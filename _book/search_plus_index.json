{"./":{"url":"./","title":"Flutter","keywords":"","body":"Flutter 即时通信 IM 为您准备了 Flutter 的 API 调用示例，您可以访问 GitHub 获取源码。扫描下方二维码即可体验 API 调用示例 Demo： 功能概览 模块名称 模块功能简介 V2TIMManager IM SDK 主核心类，负责 IM SDK 的初始化、登录、消息收发，建群退群等功能。 V2TIMMessageManager 提供高级消息处理相关接口 V2TIMGroupManager 群组高级接口，包含了群组的高级功能，例如群成员邀请、非群成员申请进群等操作接口。 V2TIMSignalingManager 提供了信令操作相关接口 V2TIMConversationManager 会话接口，包含了会话的获取，删除和更新的逻辑 V2TIMFriendshipManager 关系链接口，包含了好友的添加和删除，黑名单的添加和删除等逻辑 V2TIMOfflinePushManager 提供离线推送相关的接口 关键类 IM API中使用到的数据类型 Enums IM API中使用到的枚举类型 callbacks IM API中使用到的回调函数类型 相关链接 IM-flutter 首页 IM-flutter 快速入门 IM-flutter github案例 "},"demo-ti-yan.html":{"url":"demo-ti-yan.html","title":"demo体验","summary":"demo体验","keywords":"","body":"demo体验 .card-container { width: 280px; display: block; float: left; padding-left: 15px; padding-right: 15px; box-sizing: border-box; } .card { border-radius: 10px; height: 290px; padding-top: 13px; padding-left: 10px; padding-right: 10px; padding-bottom: 10px; margin-top: 10px; border: 1px solid #ebeef5; background-color: #fff; overflow: hidden; box-shadow: 0 2px 12px 0 rgb(0 0 0 / 10%); text-align: center; } .markdown-text-box img { box-shadow: none; } .titlename { color:#191919; position: relative; top: -2px; font-weight: bolder; font-size: larger; } @media (max-width: 768px){ .card-container, .scene-card-container{ width: 100%; } .scene-card > div{ width: 100%!important; margin-left: 0!important; } img { box-shadow: none; } } Flutter Demo Android 快速入门 iOS 快速入门 "},"kuai-su-ji-cheng/tuikit/":{"url":"kuai-su-ji-cheng/tuikit/","title":"TUIKit 快速集成方案（推荐）","keywords":"","body":"TUIKit 介绍 TUIKit 是基于腾讯云 IM SDK 的一款 UI 组件库，它提供了一些通用的 UI 组件，例如会话列表、聊天界面和联系人列表等，开发者可根据实际业务需求通过该组件库快速地搭建自定义 IM 应用。TUIKit 中的组件在实现 UI 功能的同时，调用 IM SDK 相应的接口实现 IM 相关逻辑和数据的处理，因而开发者在使用 TUIKit 时只需关注自身业务或个性化扩展即可。 效果图 会话列表，通讯录相关界面 演示效果如下图所示： 聊天界面收发消息 演示效果如下图所示： 输入区域自定义部分功能 演示效果如下图所示： 自定义消息类型 演示效果如下图所示： 相关文档 价格说明 折扣活动 "},"kuai-su-ji-cheng/tuikit/cha-jian-shi-chang-shi-yong-zhi-nan.html":{"url":"kuai-su-ji-cheng/tuikit/cha-jian-shi-chang-shi-yong-zhi-nan.html","title":"插件市场使用指南","keywords":"","body":"说明： 插件市场通过结合多种云能力，可以让开发者使用 IM 做更多的事情，您能根据自己的需求选择合适的插件，快速构建功能丰富的产品。 插件市场目前正在灰度中，如果未被灰度到，您也可以通过链接直接使用：即时通信 IM 插件市场。 目前上线的插件有： 音视频通话插件 Flutter版本 厂商离线推送插件 Flutter版本 插件的使用方式如下： 在 IM 控制台 中找到需要使用的插件，并单击安装开启，注意：生效时间约2分钟。 在客户端 SDK 中，集成对应环境的插件 SDK，具体的插件集成教程，可以在插件详情页查看。 收费情况 音视频通话插件、离线推送插件在控制台开通后即可使用，插件无需单独付费。 音视频通话插件中使用到的即时通信 IM 与实时音视频 TRTC，需单独购买。 离线推送插件的收费和调用频率可参考不同厂商的离线推送集成文档。 错误码 错误码 描述 说明 70130 the configuration to use this plugin was not obtained 对当前 sdkappid 无权使用该插件，请在控制台开启 "},"kuai-su-ji-cheng/tuikit/kuai-su-ji-cheng-fang-an.html":{"url":"kuai-su-ji-cheng/tuikit/kuai-su-ji-cheng-fang-an.html","title":"快速集成方案","keywords":"","body":"什么是 TUIKit Flutter TUIKit 是基于 Flutter IM SDK 实现的一套 UI 组件，其中包含会话、聊天、关系链、群组等功能，基于 UI 组件您可以像搭积木一样快速搭建起自己的业务逻辑。其构架图如下： 目前包含的组件如下： TIMUIKitCore 核心 TIMUIKitConversation 会话 TIMUIKitChat 聊天 TIMUIKitContact 联系人 TIMUIKitProfile 好友管理 TIMUIKitGroupProfile 群管理 TIMUIKitGroup 我的群聊 TIMUIKitBlackList 黑名单 TIMUIKitNewContact 新的联系人 上图项目源码：im-flutter-uikit，项目已开源，您可直接使用。 支持平台 Android iOS 操作步骤 如下会介绍如何使用 Flutter TUIKit 快速构建一个简单的即时通信应用。 步骤1: 创建 Flutter 应用 请参见 Flutter 文档 快速创建一个 Flutter 应用。 步骤2: 安装依赖 在 pubspec.yaml 文件中的 dependencies 下添加 tim_ui_kit。或者执行如下命令： // step 1: flutter pub add tim_ui_kit // step 2: flutter pub get 步骤3: 初始化 TUIKit 在 initState 中初始化 TIMUIKit，项目启动只需要初始化一次即可。 /// main.dart import 'package:flutter/material.dart'; import 'package:tim_ui_kit/tim_ui_kit.dart'; void main() { runApp(MyApp()); } class MyApp extends StatelessWidget { // This widget is the root of your application. @override Widget build(BuildContext context) { return MaterialApp( title: 'TIMUIKit Demo', theme: ThemeData( primarySwatch: Colors.blue, ), home: MyHomePage(title: 'TIMUIKit Demo'), ); } } class MyHomePage extends StatefulWidget { MyHomePage({Key? key, required this.title}) : super(key: key); final String title; @override _MyHomePageState createState() => _MyHomePageState(); } class _MyHomePageState extends State { final CoreServicesImpl _coreInstance = TIMUIKitCore.getInstance(); @override void initState() { _coreInstance.init( sdkAppID: 0, // 控制台申请的 SDKAppID loglevel: LogLevelEnum.V2TIM_LOG_DEBUG, listener: V2TimSDKListener()); super.initState(); } @override Widget build(BuildContext context) { return Scaffold( appBar: AppBar( title: Text(widget.title), ), body: Container(), ); } } 步骤4: 获取签名和登录 说明： 正确的 UserSig 签发方式是将 UserSig 的计算代码集成到您的服务端，并提供面向 App 的接口，在需要 UserSig 时由您的 App 向业务服务器发起请求获取动态 UserSig。更多详情请参见 服务端生成 UserSig。 添加两个 TextField 用于输入 UserID 和 UserSig。单击登录后调用登录接口。 /// main.dart /// 省略 class _MyHomePageState extends State { /// 获取 TIMUIKitCore Instance final CoreServicesImpl _coreInstance = TIMUIKitCore.getInstance(); String userID = \"\"; String userSig = \"\"; /// 省略 void _login() { // 登录 _coreInstance.login(userID: userID, userSig: userSig); } @override Widget build(BuildContext context) { return Scaffold( appBar: AppBar( title: Text(widget.title), ), body: Center( child: Column( mainAxisAlignment: MainAxisAlignment.center, children: [ TextField( onChanged: ((value) { setState(() { userID = value; }); }), decoration: InputDecoration(hintText: \"userID\"), ), TextField( onChanged: ((value) { setState(() { userSig = value; }); }), decoration: InputDecoration(hintText: \"userSig\"), ), ElevatedButton( onPressed: (() { _login(); }), child: const Text(\"登录\")) ], ), ), ); } } 步骤5: 集成所需组件 创建 message.dart 文件集成 TIMUIKitConversation 和 TIMUIKitChat 包含不仅限于此。可根据您的需求集成更多的组件。 修改 main.dart 中代码，登录成功后跳转至该页面。 /// message.dart import 'package:flutter/material.dart'; import 'package:tim_ui_kit/tim_ui_kit.dart'; class Conversation extends StatelessWidget { const Conversation({Key? key}) : super(key: key); @override Widget build(BuildContext context) { return Scaffold( appBar: AppBar( title: const Text( \"消息\", style: TextStyle(color: Colors.black), ), ), body: TIMUIKitConversation( onTapItem: (selectedConv) { Navigator.push( context, MaterialPageRoute( builder: (context) => Chat( selectedConversation: selectedConv, ), )); }, ), ); } } class Chat extends StatelessWidget { final V2TimConversation selectedConversation; const Chat({Key? key, required this.selectedConversation}) : super(key: key); String? _getConvID() { return selectedConversation.type == 1 ? selectedConversation.userID : selectedConversation.groupID; } @override Widget build(BuildContext context) { return TIMUIKitChat( conversationID: _getConvID() ?? '', // groupID 或者 UserID conversationType: selectedConversation.type ?? 0, // 会话类型 conversationShowName: selectedConversation.showName ?? \"\", // 会话展示名称 onTapAvatar: (_) {}, // 点击消息发送者头像回调事件、可与 TIMUIKitProfile 关联使用 appBarActions: [ IconButton( onPressed: () {}, icon: const Icon(Icons.more_horiz_outlined)) ], ); } } /// main.dart /// 部分代码省略 void _login() async { final res = await _coreInstance.login(userID: userID, userSig: userSig); if (res.code == 0) { Navigator.of(context).pushAndRemoveUntil( MaterialPageRoute( builder: (BuildContext context) => const Conversation()), (route) => false, ); } } 常见问题 1. 引入了 TUIKit 还需要引入 IM SDK 吗？ 不需要再次引入 IM SDK 了。如果需要使用 IM SDK 相关的接口，可通过 TIMUIKitCore.getSDKInstance() 获取。为了保证 IM SDK 版本的一致性，我们推荐您使用该方式使用 SDK。 2. 发送语音、图片、文件等消息闪退? 请查看是否打开了相机、麦克风、相册等权限。 "},"kuai-su-ji-cheng/tuikit/ui-zu-cheng-wen-dang.html":{"url":"kuai-su-ji-cheng/tuikit/ui-zu-cheng-wen-dang.html","title":"UI 组成文档","keywords":"","body":"TIMUIKitCore TIMUIKitCore 提供两个静态方法 getInstance 和 getSDKInstance。 getInstance：返回 CoreServicesImpl 实例。 getSDKInstance： 返回 SDK 实例。 CoreServicesImpl 为 TIMUIKit 核心类，包含初始化、登录、登出、获取用户信息等方法。 import 'package:tim_ui_kit/tim_ui_kit.dart'; final CoreServicesImpl _coreInstance = TIMUIKitCore.getInstance(); final V2TIMManager _sdkInstance = TIMUIKitCore.getSDKInstance(); /// init _coreInstance.init( sdkAppID: 0, // 控制台申请的sdkAppID loglevel: LogLevelEnum.V2TIM_LOG_DEBUG, listener: V2TimSDKListener()); /// unInit _coreInstance.unInit(); /// login _coreInstance.login( userID: 0, // 用户ID userSig: \"\" // 参考官方文档userSig ) /// logout _coreInstance.logout(); /// getUsersInfo _coreInstance.getUsersInfo(userIDList: [\"123\", \"456\"]); /// setOfflinePushConfig _coreInstance.setOfflinePushConfig( businessID: businessID, // IM 控制台证书 ID，接入 TPNS 不需要填写 token: token, // 注册应用到厂商平台或者 TPNS 时获取的 token isTPNSToken: false // 是否接入配置 TPNS，token 是否是从TPNS 获取 ) /// setSelfInfo _coreInstance.setSelfInfo(userFullInfo: userFullInfo) // 设置用户信息 /// setTheme _coreInstance.setTheme(TUITheme theme: theme) // 设置主题色 /* TUITheme( // 应用主色 final Color? primaryColor; // 应用次色 final Color? secondaryColor; // 提示颜色，用于次级操作或提示 final Color? infoColor; // 浅背景颜色，比主背景颜色浅，用于填充缝隙或阴影 final Color? weakBackgroundColor; // 浅分割线颜色，用于分割线或边框 final Color? weakDividerColor; // 浅字色 final Color? weakTextColor; // 深字色 final Color? darkTextColor; // 浅主色，用于AppBar或Panels final Color? lightPrimaryColor; // 字色 final Color? textColor; // 警示色，用于危险操作 final Color? cautionColor; // 群主标识色 final Color? ownerColor; // 群管理员标识色 final Color? adminColor;) */ 静态方法 TIMUIKitCore.getInstance()： 返回 CoreServicesImpl 实例 TIMUIKitCore.getSDKInstance()： 返回为 V2TIMManager 为 SDK 实例，具体使用方式请参见 Flutter IM SDK 文档 TIMUIKitConversation TIMUIKitConversation 为会话组件，拉取用户会话列表，默认提供一套 UI，用户也可自定义会话条目。同时提供对应的 TIMUIKitConversationController。 import 'package:tim_ui_kit/tim_ui_kit.dart'; final TIMUIKitConversationController _controller = TIMUIKitConversationController(); void _handleOnConvItemTaped(V2TimConversation? selectedConv) { /// 处理逻辑，在此可跳转至聊天界面 } List _itemSlidableBuilder( V2TimConversation conversationItem) { return [ ConversationItemSlidablePanel( onPressed: (context) { _clearHistory(conversationItem); }, backgroundColor: hexToColor(\"006EFF\"), foregroundColor: Colors.white, label: '清除聊天', autoClose: true, ), ConversationItemSlidablePanel( onPressed: (context) { _pinConversation(conversationItem); }, backgroundColor: hexToColor(\"FF9C19\"), foregroundColor: Colors.white, label: conversationItem.isPinned! ? '取消置顶' : '置顶', ) ]; } TIMUIKitConversation( onTapItem: _handleOnConvItemTaped, /// 会话 Item tap 回调 可用于跳转至聊天界面 itemSlidableBuilder: _itemSlidableBuilder, /// 会话 Item 向左滑动 的操作项， 可自定义会话置顶等 controller: _controller, /// 会话组件控制器， 可通过其获取会话的数据，设置会话数据，会话置顶等操作 itembuilder: (conversationItem) {} /// 用于自定义会话 Item 的UI。 可结合TIMUIKitConversationController 实现业务逻辑 conversationCollector: (conversation) {} /// 会话收集器，可自定义会话是否显示 ) TIMUIKitConversationController 方法: loadData(int count)： 加载会话列表，count 为单次加载数量 reloadData(int count)： 重新加载会话列表，count 为单次加载数量 pinConversation({required String conversationID, required bool isPinned})： 会话置顶 clearHistoryMessage({required V2TimConversation conversation})： 清除指定会话消息 deleteConversation({required String conversationID})： 删除指定会话 setConversationListener({V2TimConversationListener? listener})： 添加会话监听器 dipose()： 销毁 TIMUIKitChat TIMUIKitChat 为聊天组件，提供消息列表的展示及消息发送的能力，同时支持自定义各种消息类型的展示。同时可结合 TIMUIKitChatController 实现消息的本地存储及消息预渲染。 目前支持的消息解析: 文本消息 图片消息 视频消息 语音消息 群消息 合并消息 文件消息 import 'package:tim_ui_kit/tim_ui_kit.dart'; TIMUIKitChat( conversationID: \"\", /// 会话ID conversationType: 0, /// 会话类型 conversationShowName: \"\", /// 会话显示名称 appBarActions: [], /// appBar操作项，可用于跳转至群详情、个人详情页面。 onTapAvatar: _onTapAvatar, /// 头像tap 回调，可用于跳转至用户详情界面。 showNickName: false, /// 是否显示昵称 messageItemBuilder: (message) { /// 自定义消息构造器、返回null 会使用默认构造器。 }, exteraTipsActionItemBuilder: (message) { /// 消息长按Tips自定义配置项，可根据业务额外配置 } ) TIMUIKitChatController 方法 setMessageListener({V2TimAdvancedMsgListener? listener})：设置高级消息监听器 removeMessageListener({V2TimAdvancedMsgListener? listener})：移除高级消息监听器 clearHistory()：清除历史消息 dispose()：销毁 TIMUIKitProfile TIMUIKitProfile 为用户详情展示，同时支持自定义添加操作项。 TIMUIKitProfile( userID: \"\", controller: TIMUIKitProfileController(), // Profile Controller operationListBuilder: (context, userInfo, conversation) { ///自定义操作项，例如消息免打扰、消息置顶等。 如若不传，会提供默认的操作项 }, bottomOperationBuilder: (context, friendInfo, conversation) { /// 底部操作项，如删除好友等。 }, handleProfileDetailCardTap: (BuildContext context, V2TimUserFullInfo? userFullInfo) { /// 个人详情 tile tap 回调 }, canJumpToPersonalProfile: false, // 是否可以跳转至个人详情界面 ) TIMUIKitProfileController pinedConversation(bool isPined，String convID)： 会话置顶，isPined 为是否置顶，convID 为需要置顶的会话 ID addUserToBlackList(bool shouldAdd，String userID)： 添加用户至黑名单，shouldAdd 为是否需要添加至黑名单，userID 为需要被添加到黑名单的用户 changeFriendVerificationMethod(int allowType)： 更改好友验证方式，0 为\"同意任何用户添加好友\"、1 为\"需要验证\"、2 为\"拒绝任何人加好友\" updateRemarks(String userID，String remark)： 更新好友备注，userID 为被更新的用户 ID，remark 为备注 loadData： 加载数据 dispose()： 销毁 addFriend(String userID)： 添加好友，userID 为被添加好友的用户 ID TIMUIKitGroupProfile TIMUIKitGroupProfile 为群管理页面，同时支持自定义添加操作项。 TIMUIKitGroupProfile( groupID: \"\", //群 ID 必填 operationListBuilder:(){}, // 操作项自定义构造器 bottomOperationListBuilder: () {}, // 底部操作项自定义构造器 ) operationListBuilder 及 bottomOperationListBuilder 主要给予用户可配置操作条目的能力，同时可结合子组件配合使用，可以自己选择搭配。 静态方法 TIMUIKitGroupProfile.memberTile()： 群成员卡片、用于显示群成员概览、群成员列表、删除群成员等操作 TIMUIKitGroupProfile.groupNotification()： 群公告显示及群公告更改 TIMUIKitGroupProfile.groupManage()： 群管理、可设置管理员、禁言等 TIMUIKitGroupProfile.groupType()： 显示群类型 TIMUIKitGroupProfile.groupAddOpt()： 加群方式及修改 TIMUIKitGroupProfile.nameCard()： 群昵称及修改 TIMUIKitBlackList TIMUIKitBlackList 为黑名单列表。 TIMUIKitBlackList( onTapItem: (_) {}, /// tap item 回调 emptyBuilder: () {} /// 当列表为空时显示 itemBuilder: () {} /// 自定义 item ) TIMUIKitGroup TIMUIKitGroup 为群列表。 TIMUIKitGroup( onTapItem: (_) {}, /// tap item 回调 emptyBuilder: () {} /// 当列表为空时显示 itemBuilder: () {} /// 自定义 item ) TIMUIKitContact TIMUIKitContact 为联系人组件，提供联系人列表。 import 'package:tim_ui_kit/tim_ui_kit.dart'; TIMUIKitContact( topList: [ TopListItem(name: \"新的联系人\", id: \"newContact\"), TopListItem(name: \"我的群聊\", id: \"groupList\"), TopListItem(name: \"黑名单\", id: \"blackList\") ], /// 顶部操作列表 topListItemBuilder: _topListBuilder, /// 顶部操作列表构造器 onTapItem: (item) { }, /// 点击联系人 emptyBuilder: (context) => const Center( child: Text(\"无联系人\"), ), /// 联系人列表为空时显示 ); TIMUIKitNewContact TIMUIKitNewContact 为新的联系人界面。 TIMUIKitNewContact( onAccept: (applicationInfo) { /// 接受好友回调 }, onRefuse: (applicationInfo) { /// 拒绝好友回调 }, emptyBuilder: () { /// 未收到好友申请时回调 }, itemBuilder: () { /// 自定义好友申请项构造器 } ) "},"kuai-su-ji-cheng/tuikit/yin-shi-ping-tong-hua-cha-jian-ji-cheng.html":{"url":"kuai-su-ji-cheng/tuikit/yin-shi-ping-tong-hua-cha-jian-ji-cheng.html","title":"音视频通话插件集成","keywords":"","body":"TUICalling TUICalling 是基于腾讯云实时音视频（TRTC）和即时通信 IM 服务组合而成的，支持1v1和多人视频通话。 TRTC SDK：使用 TRTC SDK 作为低延时音视频通话组件。 IM SDK：使用 IM SDK 发送和处理信令消息。 TUICalling API 概览 基础函数 init: 初始化 TUICalling。 sharedInstance: 组件单例。 call: C2C 邀请通话。 groupCall: Group 邀请通话。 destroy: 销毁 TUICalling。 setCallingListener: 设置监听器。 removeCallingListener: 移除监听器。 enableCustomViewRoute: 开启/关闭自定义视图。 基础组件 CallMessageItem 音视频通话自定义消息。 isCallingData 检测是否为音视频通话消息。 前置条件 创建一个 Flutter 应用。 在 pubspec.yaml 文件中的 dependencies 下添加 tim_ui_kit_calling_plugin。或者执行如下命令： ```dart /// step 1: flutter pub add tim_ui_kit_calling_plugin /// step 2: flutter pub get [并根据该指南](https://cloud.tencent.com/document/product/269/76803)，在插件市场，启用推送插件。 ## 操作步骤 ### 步骤1：引入 navigatorKey 在您的`MateriaApp`中添加`navigatorKey`。其目的用于在接受到语音通话邀请时可以打开通话窗口。 ```dart import 'package:tim_ui_kit_calling_plugin/tim_ui_kit_calling_plugin.dart'; MaterialApp( navigatorKey: TUICalling.navigatorKey, ... ) 步骤2：初始化 TUICalling 若您是在现有 IM Flutter 应用中集成音视频通话的功能，建议您在登录之后初始化。 TUICalling 初始化，会收到音视频通话的邀请后，自动弹出通话窗口。同时会自动初始化和登录 IM, 以用于音视频通话邀请的信令发送。 class HomePageState extends State { final TUICalling _calling = TUICalling(); @override initState() { super.initState(); final userID = '1234756'; final userSig = ''; final sdkAppId = 0; /// 控制台申请的sdkAppID _calling.init(sdkAppID: sdkAppId, userID: userID, userSig: userSig); } } 说明： 正确的 UserSig 签发方式是将 UserSig 的计算代码集成到您的服务端，并提供面向 App 的接口，在需要 UserSig 时由您的 App 向业务服务器发起请求获取动态 UserSig。更多详情请参见 服务端生成 UserSig。 基础函数定义 init 初始化 Future init({required int sdkAppID, required String userID,required String userSig}); call c2c 邀请通话 Future call(String userId,CallingScenes type,) groupCall group 邀请通话 Future call(List userIdList, CallingScenes type, String? groupId) destroy 销毁 void destroy() enableCustomViewRoute 开启自定义视图 void enableCustomViewRoute(bool isEnable) setCallingListener 设置监听器 void setCallingListener(TUICallingListener listener); removeCallingListener 移除监听器 void removeCallingListener(TUICallingListener listener); sharedInstance Future sharedInstance(); TUICallingListener /// 错误回调，表示 SDK 不可恢复的错误，一定要监听并分情况给用户适当的界面提示 /// /// 参数param： /// /// errCode 错误码 /// /// errMsg 错误信息 /// /// extraInfo 扩展信息字段，个别错误码可能会带额外的信息帮助定位问题 onError, /// 警告回调，用于告知您一些非严重性问题，例如出现卡顿或者可恢复的解码失败。 /// /// 参数param： /// /// warningCode 错误码 /// /// warningMsg 警告信息 /// /// extraInfo 扩展信息字段，个别警告码可能会带额外的信息帮助定位问题 onWarning, ///本地进房 /// /// 如果加入成功，result 会是一个正数（result > 0），代表加入房间的时间消耗，单位是毫秒（ms）。 /// /// 如果加入失败，result 会是一个负数（result 0 时为进房耗时（ms），result 常见问题 如何自定义通话界面? TUICalling 默认提供了单人和群组通话，如果需要自定义通话界面，请调用enableCustomViewRoute方法开启自定义视图，开启后，收到音视频通话邀请后，不会自动打开音视频通话窗口。可通过调用setCallingListener 方法设置消息监听及用户进房等信息的监听来实现邀请收发及音视频通话业务。同时调用sharedInstance 获取 TRTCCalling 实例。该实例提供了 TRTC 相关的能力，例如开关摄像头、开关麦克风、挂断、接听等. "},"kuai-su-ji-cheng/tuikit/chang-shang-xiao-xi-tui-song-cha-jian-ji-cheng.html":{"url":"kuai-su-ji-cheng/tuikit/chang-shang-xiao-xi-tui-song-cha-jian-ji-cheng.html","title":"厂商消息推送插件集成","keywords":"","body":"腾讯云即时通信 IM 的终端用户需要随时都能够得知最新的消息，而由于移动端设备的性能与电量有限，当 App 处于后台时，为了避免维持长连接而导致的过多资源消耗，腾讯云即时通信 IM 推荐您使用各厂商提供的系统级推送通道来进行消息通知，系统级的推送通道相比第三方推送拥有更稳定的系统级长连接，可以做到随时接受推送消息，且资源消耗大幅降低。 说明： 在没有主动退出登录的情况下，应用退后台、手机锁屏、或者应用进程被用户主动杀掉三种场景下，如果想继续接收到 IM 消息提醒，可以接入即时通信 IM 离线推送。 如果应用主动调用 logout 退出登录，或者多端登录被踢下线，即使接入了 IM 离线推送，也收不到离线推送消息。 使用腾讯云 IM 厂商推送 Flutter 集成插件的离线推送能力，可快速接入主流厂商（苹果iOS/Google FCM/OPPO/VIVO/华为/小米/魅族）的离线推送。 本教程含接入腾讯云即时通信 IM 离线推送全流程。插件已封装上述厂商的 SDK，使用时仅需简单改造调用即可。 如果您的应用不需要离线推送，或场景不满足离线推送的需求，请直接看本文最后一节 “在线推送-在本地创建新消息通知” 在线推送部分。 如果您的应用已经自行完成厂商离线推送，仅需查看本教程 第一步 和 第五步，在控制台内录入厂商信息，并在应用登录后，上报证书 ID 即可。 插件 API 概览 说明： 以下 API 若无特殊说明，均可自动兼容 Android/iOS 平台及支持厂商，插件内部进行平台及厂商判断，您直接调用即可。 API 说明 构造函数（TimUiKitPushPlugin） 实例化一个 Push 插件对象，并确定是否使用 Google Service FCM init 初始化插件，绑定点击通知回调事件及传入厂商渠道信息 uploadToken 自动获取设备 Token 及证书 ID，自动上传至腾讯云 IM 服务端 requireNotificationPermission 申请推送权限 setBadgeNum 设置未读数角标 （仅支持部分 Android 设备，可参见 API 代码参数说明） clearAllNotification 清除通知栏内，当前应用，所有的通知 getDevicePushConfig 获取当前厂商的推送相关信息，含机型/证书 ID/Token getDevicePushToken 获取当前厂商的推送 Token getOtherPushType 获取厂商信息 getBuzId 获取当前厂商对应的腾讯云控制台上注册的证书 ID createNotificationChannel 为 Android 机型创建通知 Channel 渠道 clearAllNotification 清除通知栏内，当前应用，所有的通知，详见 Google 官方文档 displayNotification 在客户端本地，手动创建一条消息通知 displayDefaultNotificationForMessage 在客户端本地，按照默认的规则，自动为一个 V2TimMessage 创建一个消息通知 接入准备（注册厂商） 需要完成厂商开发者账号申请（一般需要企业认证），创建应用，申请 PUSH 权限，拿到 key 信息。 Apple iOS 请根据该教程，完成 Apple 推送证书申请。 分别将申请到的生产环境和开发环境证书托管至即时通信 IM 控制台。 打开 IM 控制台-基础配置 右侧，添加 iOS 证书。 Android Google FCM 前往 Google Firebase控制台 创建一个项目，无需启用 Google Analysis。 单击您的应用卡片，进入应用配置页面。 单击 Project Overview 右侧的 ，选择项目设置>服务帐号，单击生成新的私钥下载私钥文件。 将该私钥文件托管至即时通信 IM 控制台。在 IM 控制台-基础配置 右侧，添加 Android 证书。选择 Google 后，请选择上传证书。 OPPO 开通服务 请参见 OPPO PUSH 服务开启指南 注册开发者账号，创建应用，并开通 PUSH 服务。 在 OPPO 推送平台 >配置管理>应用配置页面，您可以查看详细的应用信息。记录 AppId、AppKey、AppSecret 和 MasterSecret 信息。 创建消息通道 按照 OPPO 官网要求，在 OPPO Android 8.0 及以上系统版本必须配置 ChannelID，否则推送消息无法展示。您需要先在 App 中创建对应的 ChannelID（例如 tuikit）。 请在配置管理-新建通道内，创建一个新通道。通道ID即为Channel ID。 说明： OPPO 对于公信通道有每日上限，对于通讯类型消息，建议参见 OPPO 官方文档 申请私信通道。 上传证书至控制台 在 IM 控制台-基础配置 右侧，添加 Android 证书。选择 OPPO 后，请填写相关信息。 ChannelID 请填写此前在 OPPO 控制台为通讯能力申请的专用通道，最好是私信，以免到达每日推送上限。 打开方式请选择打开应用内指定页面 > activity，填写com.tencent.flutter.tim_ui_kit_push_plugin.pushActivity.OPPOMessageActivity。 小米 开通服务 打开 小米开放平台官网 进行注册并通过开发者认证。 说明： 认证过程大约需要2天左右，请务必提前阅读 小米推送服务启用指南，以免影响您的接入进度。 在小米开放平台创建应用，并选择应用服务>PUSH服务，创建推送服务应用。 小米推送服务应用创建完成后，在应用详情中，您可以查看详细的应用信息。 记录主包名、AppID、AppSecret 信息。 上传证书至控制台 在 IM 控制台-基础配置 右侧，添加 Android 证书。选择小米后，请填写相关信息，行为请选择打开应用。 vivo 开通服务 打开 vivo 开放平台官网 进行注册并通过开发者认证。 说明： 认证过程大约需要3天左右，请务必提前阅读 vivo 推送服务说明，以免影响您的接入进度。 登录 vivo 开放平台的管理中心，选择消息推送>创建>测试推送，创建 vivo 推送服务应用。 vivo 推送服务应用创建完成后，在应用详情中，您可以查看详细的应用信息。记录 APP ID、APP key 和 App secret信息。 说明： 要求应用在上架后，才能使用正式推送服务。如果您需要在开发中调试 vivo 机器，请参见本文最后一节 vivo 调试 内容，开启测试模式。 上传证书至控制台 在 IM 控制台-基础配置 右侧，添加 Android 证书。选择 vivo 后，请填写相关信息。 单击后续动作请选择为：打开应用内指定页面。 应用内页面 配置为：tencent_im_push://${替换成您的包名}/message?#Intent;scheme=tencent_im_push;launchFlags=0x4000000;end 华为 获取密钥 进入 华为开放平台，注册和登录开发者账号，详情参见 账号注册认证（如果您是新注册账号，需进行实名认证）。 在华为推送平台中新建应用，详情参见 创建应用。记录AppID、AppSecret 信息。 说明： 若在应用信息>我的应用中无法找到 SecretKey，可前往项目设置>常规中查看 Client Secret。 配置 SHA256 证书指纹 获取 SHA256 证书指纹，并在华为推送平台中配置证书指纹，单击 保存。证书指纹获取可参见 生成签名证书指纹。 ?如果您的应用需要经过流水线编译发布，每次编译在不同的构建机上进行，可在本地创建keystore.jks密钥文件，得到该 keystore 的 SHA256 值，填入华为推送平台中。 在流水线的构建脚本中，对完成构建后的产物进行归档对齐，及使用刚才的 keystore 签名。此时该最终产物签名 SHA256 值即可保持一致。代码如下： zipalign -v -p 4 构建生成的apk.apk 打包生成的apk_aligned.apk apksigner sign --ks keystore.jks --ks-pass pass:您创建的keystore密码 --out 最终签名 完成的apk.apk 打包生成的apk_aligned.apk 获取华为推送配置文件 登录华为开放平台，进入我的项目> 选择项目 > 项目设置，下载华为应用最新配置文件 agconnect-services.json。放置于android/app目录下。 打开推送服务开关 在华为推送平台，单击全部服务>推送服务，进入推送服务页面。 在推送服务页面，单击立即开通，详情请参见 打开推送服务开关。 上传证书至控制台 在 IM 控制台-基础配置 右侧，添加 Android 证书。 选择华为后，请填写相关信息。 角标参数请填写Android应用入口 Activity 类，如我们DEMO的 com.tencent.flutter.tuikit，否则华为通道下发通知的角标设置将不生效。 点击后续动作请选择打开应用。 魅族 开通服务 打开 魅族开放平台官网 进行注册并通过开发者认证。 说明： 认证过程大约需要3天左右，请务必提前阅读 魅族 Flyme 推送接入文档，以免影响您的接入进度。 登录魅族开放平台的管理控制台，选择服务>集成推送服务>推送后台，创建魅族推送服务应用。 魅族推送服务应用创建完成后，在应用详情中，您可以查看详细的应用信息。记录应用包名、App ID、App Secret信息。 上传证书至控制台 在 IM 控制台-基础配置 右侧，添加 Android 证书。 选择华为后，请填写相关信息。单击后续动作请选择：打开应用。 使用插件跑通离线推送（全览 + Android） 在您的项目中安装 IM Flutter 离线推送插件： flutter pub add tim_ui_kit_push_plugin 并根据该指南，在插件市场，启用推送插件。 步骤1: 汇总常量类 完成 接入准备（注册厂商）的配置后，可在即时通信 IM 的控制台首页右侧，查看我们后台为您的厂商渠道 App 信息分配的证书 ID。 请将这些信息，配上厂商渠道的账号信息，实例化一个静态的PushAppInfo类，汇总起来。后续步骤需要传入此对象。 该类支持配置所有您需要接入厂商推送机型的信息。无需完整填写构造函数字段。若需要使用某个厂商平台，请完整填写该平台相关字段。 import 'package:tim_ui_kit_push_plugin/model/appInfo.dart'; static final PushAppInfo appInfo = PushAppInfo( hw_buz_id: , // 华为证书ID mi_app_id: , // 小米APPID mi_app_key: , // 小米APPKey mi_buz_id: , // 小米证书ID mz_app_id: , // 魅族APPID mz_app_key: , // 魅族APPKey mz_buz_id: , // 魅族证书ID vivo_buz_id: , // vivo证书ID oppo_app_key: , // OPPO APPKey oppo_app_secret: , // OPPO APP Secret oppo_buz_id: , // OPPO证书ID oppo_app_id: , // OPPO APPID google_buz_id: , // Google FCM证书ID apple_buz_id: , // Apple证书ID ); 说明： 可参见我们DEMO lib/utils/push/push_constant.dart文件 中的做法。 步骤2: 代码中添加厂商工程配置 Google FCM 兼容 Android 模拟器调试 如果需要使用 Firebase Emulator Suite，请打开 android/app/src/main/AndroidManifest.xml 文件，在 application 中新增usesCleartextTraffic字段。 集成 Google Firebase Flutter 能力 请打开 pubspec.yaml 文件，添加对firebase_core的依赖，使用1.12.0版本。 说明： 由于最新版 Google Firebase Flutter 插件最低支持的Dart版本为2.16.0，此处限制为2022年3月发布的1.12.0版本。 dependencies: firebase_core: 1.12.0 执行flutter pub get完成安装。 在控制台内，执行以下命令，结合操作提示，完成配置 Google Firebase Flutter 项目。 详见 Google FlutterFire 官方文档。 ```shell // 安装Firebase CLI npm install -g firebase-tools curl -sL https://firebase.tools | bash dart pub global activate flutterfire_cli // 生成配置文件 flutterfire configure 4. 执行该步骤后，会将此项目与您在 Google Firebase 创建的项目关联起来，执行结果可以参见下图： ![](https://qcloudimg.tencent-cloud.cn/raw/21aa8a7fc710746e7fafd28178f1e047.png) `main()`方法中初始化 FirebaseAPP。 ```Dart WidgetsFlutterBinding.ensureInitialized(); await Firebase.initializeApp( options: DefaultFirebaseOptions.currentPlatform, ); 不选装 Google FCM 推送 由于国内大部分机型不支持 Google Service，开发者可无需执行此配置。 后续引入插件时，将isUseGoogleFCM字段设为 false 即可。 华为 打开文件 android/build.gradle 。 buildscript>repositories & dependencies下分别添加华为仓库地址和 HMS gradle 插件依赖： buildscript { repositories { google() jcenter() maven {url 'https://developer.huawei.com/repo/'} // 添加华为 maven 仓库地址 } dependencies { // 其他classpath配置 classpath 'com.huawei.agconnect:agcp:1.3.1.300' // 添加华为推送 gradle 插件依赖 } // Set release signing and passwords in the same build configuration file signingConfigs { release { storeFile file('') storePassword '' keyAlias '' keyPassword '' } } buildTypes { // debug模式也要使用证书编译，否则华为指纹验证不通过 debug { signingConfig signingConfigs.release } release { signingConfig signingConfigs.release } } } 打开 android/build.gradle 文件，在allprojects>repositories下添加华为依赖仓库地址： allprojects { repositories { google() jcenter() maven {url 'https://developer.huawei.com/repo/'} // 添加华为 maven 仓库地址 } } 登录华为开放平台，进入我的项目> 选择项目 > 项目设置，下载华为应用最新配置文件 agconnect-services.json。放置于android/app目录下。 应用层引入 HMS SDK gradle 插件 打开 android/app/build.gradle 文件，添加以下配置： // app 其他 gradle 插件 apply plugin: 'com.huawei.agconnect' // HMS SDK gradle 插件 android { // app 配置内容 } 华为/新荣耀推送角标权限 打开 android/app/src/main/AndroidManifest.xml 文件，如下添加 uses-permission 。 vivo 配置 APPID 及 APPKey 打开 android/app/build.gradle 文件，如下配置 vivo 的 APPID 和 App_Key。 android: { defaultConfig { manifestPlaceholders = [ .... vivo_APPID: \"vivo的APPID\" vivo_APPKEY:\"vivo的APP_Key\", ..... ] } } 打开 android/app/src/main/AndroidManifest.xml 文件，在 中，如下添加meta-data。 VIVO角标权限 打开 android/app/src/main/AndroidManifest.xml 文件，如下添加 uses-permission 。 小米/OPPO/魅族 打开 android/app/build.gradle 文件，在 defaultConfig 中加入包名。defaultConfig { applicationId \"${替换成您的包名}\" ... } 打开 android/app/src/main/AndroidManifest.xml 文件，配置各厂商权限列表。 步骤3: 应用启动时初始化 调用插件init方法。该步骤会完成初始化各厂商通道。 该步骤建议在应用启动后就执行调用。 说明： 由于国内大部分 Android 设备不支持 Google Service, 因此提供一个开关isUseGoogleFCM供开发者根据主要用户群体判断，是否启用 Google Firebase Cloud Messaging 推送服务。 import 'package:tim_ui_kit_push_plugin/tim_ui_kit_push_plugin.dart'; final TimUiKitPushPlugin cPush = TimUiKitPushPlugin( isUseGoogleFCM: bool, // 是否启用Google Firebase Cloud Messaging，默认true启用 ); cPush.init( pushClickAction: pushClickAction, // 单击通知后的事件回调，会在STEP6讲解 appInfo: PushConfig.appInfo, // 传入STEP1做的appInfo ); 初始化结束后，需要为部分厂商创建消息通道，如OPPO和小米均需此配置。调用createNotificationChannel方法即可。 说明： 如果向厂商申请的 channel ID 一致，同一个 channel ID 调用一次即可。 cPush.createNotificationChannel( channelId: \"new_message\", channelName: \"消息推送\", channelDescription: \"推送新聊天消息\"); 部分厂商（如 OPPO）默认不提供推送权限，需要开发者手动申请。调用requireNotificationPermission方法即可。 说明： 申请权限的时机可由您自行决定，您可以在用户登录成功后再调用。 cPush.requireNotificationPermission(); 步骤4: 上报 Token 及证书 ID 需要将当前设备对应厂商的证书 ID 及 Device Token 上报至腾讯云即时通信后台，服务端才可正常使用厂商通道下行通知。 插件支持自动在appInfo内找到当前厂商的证书ID，并自动完成Token上报。 说明： 根据个保法内隐私相关规定，请在用户Login后再调用该方法上报。 Device Token 在同一设备保持一致，仅需在登录时上报一次即可，无需每次启动都上报。 import 'package:tim_ui_kit_push_plugin/tim_ui_kit_push_plugin.dart'; final TimUiKitPushPlugin cPush = TimUiKitPushPlugin( isUseGoogleFCM: false, ); final bool isUploadSuccess = await cPush.uploadToken(PushConfig.appInfo); 步骤5: 前后台切换监听 需要在每次切换前后台时，通过 IM SDK 上报 IM 后端当前状态。 若为前台在线状态，则收到新消息不触发 notification 推送；反之则会进行推送。 具体请参见 Flutter 官方监听前后台切换方案。 建议：在应用切换到 inactive/paused 状态前，使用插件中setBadgeNum( int badgeNum )方法，将最新未读数同步至桌面角标。iOS角标由IM SDK自动管理，此处本插件支持配置 XIAOMI(MIUI6 - MIUI 11机型), HUAWEI, HONOR, vivo 及 OPPO 设备角标。 说明： OPPO角标属于OPPO侧高级权益，不默认开放。如需使用，请自行联系OPPO应用推送权益对接人。 /// coreInstance @override Future setOfflinePushStatus({required AppStatus status, int? totalCount}) { if(Platfrom.isIOS){ return; } if(status == AppStatus.foreground){ // 当应用status为前台时，上报doForeground() return TencentImSDKPlugin.v2TIMManager .getOfflinePushManager() .doForeground(); }else{ // 当应用status为后台时，上报doBackground()，并带上未读数 return TencentImSDKPlugin.v2TIMManager .getOfflinePushManager() .doBackground(unreadCount: totalCount ?? 0); } } /// App final TimUiKitPushPlugin cPush = TimUiKitPushPlugin( isUseGoogleFCM: false, ); @override void didChangeAppLifecycleState(AppLifecycleState state) async { print(\"--\" + state.toString()); int? unreadCount = await _getTotalUnreadCount(); switch (state) { case AppLifecycleState.inactive: _coreInstance.setOfflinePushStatus(status: AppStatus.background, totalCount: unreadCount); if(unreadCount != null){ cPush.setBadgeNum(unreadCount); } break; case AppLifecycleState.resumed: _coreInstance.setOfflinePushStatus(status: AppStatus.foreground); break; case AppLifecycleState.paused: _coreInstance.setOfflinePushStatus(status: AppStatus.background, totalCount: unreadCount); if(unreadCount != null){ cPush.setBadgeNum(unreadCount); } break; } } 步骤6: 发消息配置及单击通知跳转 发送消息 直接通过 SDK 发送 如您自行接入腾讯云 IM SDK，请在发消息时配置OfflinePushInfo offlinePushInfo字段。 OfflinePushInfo({ this.title = '', // 推送通知标题。留空字符串时，按照优先级，IM后台自动替换成 sender的昵称 => sender ID。因此，如无特殊需求，该字段建议留空，可达到和微信一致的效果 this.desc = '', // 推送第二行小字部分 this.disablePush = false, this.ext = '', // 推送内额外信息，对方可于单击通知跳转时拿到。建议传含Conversation信息的JSON，用于收件方跳转至对应Chat。可参见下方TUIKit的实例代码。 this.androidOPPOChannelID = '', // OPPO的channel ID }); 接入TUIKit 如果您使用我们的 Flutter TUIKit 组件库，可直接在TIMUIKitChat组件TIMUIKitChatConfig中，使用notificationTitle/notificationOPPOChannelID/notificationBody/notificationExt/notificationIOSSound定义自定义推送。详情如下： TIMUIKitChat( config: TIMUIKitChatConfig( notificationTitle: \"\",// 推送通知标题。留空字符串时，按照优先级，IM后台自动替换成sender的昵称 => sender ID。因此，如无特殊需求，该字段建议留空，可达到和微信一致的效果 notificationOPPOChannelID: \"\", // 用于推送消息的OPPO配置Channel ID notificationBody: (V2TimMessage message, String convID, ConvType convType) { return \"您根据给出的参数自定义的第二行通知\"; }, notificationExt: (V2TimMessage message, String convID, ConvType convType) { // 您根据给出的参数自定义的EXT字段：此处建议传conversation id，JSON格式，即如下所示 String createJSON(String convID){ return \"{\\\"conversationID\\\": \\\"$convID\\\"}\"; } String ext = (convType == ConvType.c2c ? createJSON(\"c2c_${message.sender}\") : createJSON(\"group_$convID\")); return ext; } ) ) 处理单击回调 此时填上 步骤3 初始化时，为 pushClickAction 埋的坑。 初始化时，注册该回调方法，可拿到含推送本体及 ext 信息在内的 Map。 如果上一步创建 OfflinePushInfo 时，在 ext 内传入了含 conversationID 的 JSON，此时即可直接跳转到对应 Chat。 说明： 在后台跳转情况下，此时 Flutter 首页可能已经 unmounted，无法为跳转提供 context，因此建议启动时缓存一个 context，保证跳转成功。 建议跳转成功后，清除通知栏中其他通知消息，避免太多IM消息堆积在通知栏中。调用插件中clearAllNotification()方法即可。 BuildContext? _cachedContext; final TimUiKitPushPlugin cPush = TimUiKitPushPlugin( isUseGoogleFCM: false, ); // 仅限TUIKit final TIMUIKitChatController _timuiKitChatController = TIMUIKitChatController(); @override void initState() { super.initState(); _cachedContext = context; } void handleClickNotification(Map msg) async { String ext = msg['ext'] ?? \"\"; Map extMsp = jsonDecode(ext); String convId = extMsp[\"conversationID\"] ?? \"\"; // 【TUIKit】若当前的会话与要跳转至的会话一致，则不跳转。 final currentConvID = _timuiKitChatController.getCurrentConversation(); if(currentConvID == convId.split(\"_\")[1]){ return; } final targetConversationRes = await TencentImSDKPlugin.v2TIMManager .getConversationManager() .getConversation(conversationID: convId); V2TimConversation? targetConversation = targetConversationRes.data; if(targetConversation != null){ cPush.clearAllNotification(); Navigator.push( _cachedContext ?? context, MaterialPageRoute( builder: (context) => Chat( selectedConversation: targetConversation, ), )); } } 步骤7: 使用 TRTC 打单聊语音/视频通话，发送离线推送 一般情况下，发起 TRTC 通话使用信令消息通知对方。您可在信令消息中，按照 步骤6，加入offlinePushInfo字段。 Flutter 通话插件接入 如果您使用到我们的 tim_ui_kit_calling_plugin 插件，请将其升级至0.2.0版本以上，即可使用离线推送能力。 参见如下示例，直接在call方法第三个参数中，传入offlinePush对象即可。 ```Dart final user = await sdkInstance.getLoginUser(); final myId = user.data; OfflinePushInfo offlinePush = OfflinePushInfo( title: \"\", desc: \"邀请您语音通话\", ext: \"{\\\"conversationID\\\": \\\"c2c_$myId\\\"}\", disablePush: false, ignoreIOSBadge: false, androidOPPOChannelID: PushConfig.OPPOChannelID ); _calling?.call(widget.selectedConversation.userID!, CallingScenes.Audio, offlinePush); {% hint style=\"info\" %} 说明： 通话群邀请暂不支持离线推送。 {% endhint %} ## 使用插件跑通离线推送（iOS 增补） 本部分在使用插件跑通离线推送（Android）完成的基础上，补充对应步骤 iOS 端需要做的事情。 该页面没有提到过的步骤，和 Android 端一致。 ### 步骤2: 代码中添加 iOS 工程配置 1. 使用 Xcode 打开您的项目，在 **Runner**>**Target** 中，配置支持 **Push** 的 **Signing Profile**。 2. 并在左上角新增`Push Notification`的 Capability。 ![](https://qcloudimg.tencent-cloud.cn/raw/e1be71c63e505281aed6c7eb61c587ac.png) 3. 执行`flutter pub get`安装好插件后进入 iOS 目录，执行：`pod install`安装依赖库。 4. 将以下代码添加到 iOS 工程下`ios/Runner/AppDelegate.swift`文件`didFinishLaunchingWithOptions`方法中。 Objective-C： ```objc if (@available(iOS 10.0, *)) { [UNUserNotificationCenter currentNotificationCenter].delegate = (id) self; } Swift： if #available(iOS 10.0, *) { UNUserNotificationCenter.current().delegate = self as? UNUserNotificationCenterDelegate } 如果不使用 Google Firebase 套件，需要在info.plist加入如下字段。flutter_apns.disable_firebase_core 步骤3: 应用启动时初始化 调用插件init方法。该步骤会完成初始化各厂商通道，并申请厂商通知权限。该步骤建议在应用启动后就执行调用。 import 'package:tim_ui_kit_push_plugin/tim_ui_kit_push_plugin.dart'; final TimUiKitPushPlugin cPush = TimUiKitPushPlugin(); cPush.init( pushClickAction: pushClickAction, // 单击通知后的事件回调，会在STEP6讲解 appInfo: PushConfig.appInfo, // 传入STEP1做的appInfo ); 步骤6: 发消息配置及单击通知跳转 发送消息 直接通过 SDK 发送 如您自行接入腾讯云 IM SDK，请在发消息时配置OfflinePushInfo offlinePushInfo字段。 OfflinePushInfo({ // ..其他配置 this.iOSSound = \"\", // iOS离线推送声音设置， 当 iOSSound = kIOSOfflinePushNoSound，表示接收时不会播放声音。 当 iOSSound = kIOSOfflinePushDefaultSound，表示接收时播放系统声音。 如果要自定义 iOSSound，需要先把语音文件链接进 Xcode 工程，然后把语音文件名（带后缀）设置给 iOSSound。 this.ignoreIOSBadge = false, }); 接入TUIKit 如果您使用我们的 Flutter TUIKit 组件库，可直接在TIMUIKitChat组件TIMUIKitChatConfig中，使用notificationTitle/notificationOPPOChannelID/notificationBody/notificationExt/notificationIOSSound定义自定义推送。详情如下： TIMUIKitChat( config: TIMUIKitChatConfig( // ..其他配置 notificationIOSSound: \"\", // iOS离线推送声音设置， 当 iOSSound = kIOSOfflinePushNoSound，表示接收时不会播放声音。 当 iOSSound = kIOSOfflinePushDefaultSound，表示接收时播放系统声音。 如果要自定义 iOSSound，需要先把语音文件链接进 Xcode 工程，然后把语音文件名（带后缀）设置给 iOSSound。 ) ) 调试 离线推送自查 您可使用 离线推送自查 工具，检测终端状态/证书上报及发送测试消息。 vivo 调试 由于 vivo 官方限制，应用在 vivo 应用市场上架前，不允许使用正式 PUSH 能力，详见此文档。 开发过程中，需要调试，请参见本步骤： 获取测试设备（vivo 真机）的 regId（我们称做 Device Token）。 在 vivo 控制台内，添加该设备为测试设备。 此时可推送测试消息至测试设备。可参见 vivo 单播推送文档。 由于腾讯云 IM 控制台的测试推送，和直接使用 IM SDK 发送聊天消息的推送，均不能修改推送模式为测试。因此请使用我们提供的，可触发测试消息的JS脚本，单击此处下载 下载后，请根据顶部五行注释，填入vivo相关参数。默认ext为conversationID，如果在处理单击回调跳转（可参见 步骤6）时需要其他字段，请自行修改JS代码。 执行脚本。npm install axios npm install js-md5 后node testvivo。推送结果会显示在 log 最后一行。 此时测试终端可收到测试消息推送，单击消息后，可触发 Dart 层回调。 厂商推送限制 1、国内厂商都有消息分类机制，不同类型也会有不同的推送策略。如果想要推送及时可靠，需要按照厂商规则设置自己应用的推送类型为高优先级的系统消息类型或者重要消息类型。反之离线推送消息会受厂商推送消息分类影响，与预期会有差异。 2、另外，一些厂商对于应用每天的推送数量也是有限制的，可以在厂商控制台查看应用每日限制的推送数量。 如果离线推送消息出现推送不及时或者偶尔收不到情况，需要考虑下这里： 华为：将推送消息分为服务与通讯类和资讯营销类，推送效果和策略不同。另外，消息分类还和自分类权益有关： 无自分类权益，推送消息厂商还会进行二次智能分类 。 有申请自分类权益，消息分类会按照自定义的分类进行推送。 具体请参见 厂商描述。 vivo：将推送消息分为系统消息类和运营消息类，推送效果和策略不同。系统消息类型还会进行厂商的智能分类二次修正，若智能分类识别出不是系统消息，会自动修正为运营消息，如果误判可邮件申请反馈。另外，消息推送也受日推总数量限制，日推送量由应用在厂商订阅数统计决定。 具体请参见 厂商描述1 或 厂商描述2。 OPPO：将推送消息分为私信消息类和公信消息类，推送效果和策略不同。其中私信消息是针对用户有一定关注度，且希望能及时接收的信息，私信通道权益需要邮件申请。公信通道推送数量有限制。 具体请参见 厂商描述1 或 厂商描述2。 小米：将推送消息分为重要消息类和普通消息类，推送效果和策略不同。其中重要消息类型仅允许即时通讯消息、个人关注动态提醒、个人事项提醒、个人订单状态变化、个人财务提醒、个人状态变化、个人资源变化、个人设备提醒这8类消息推送，可以在厂商控制台申请开通。普通消息类型推送数量有限制。 具体请参见 厂商描述1 或 厂商描述2。 魅族：推送消息数量有限制，具体可参见 魅族平台合约。 FCM：推送上行消息频率有限制。 具体请参见 厂商描述。 收不到离线推送怎么排查？ 1、OPPO 手机 OPPO 手机收不到推送一般有以下几种情况： 按照 OPPO 推送官网要求，在 Android 8.0 及以上系统版本的 OPPO 手机上必须配置 ChannelID，否则推送消息无法展示。配置方法可以参见 OPPO 推送配置。 在消息中 透传的离线推送的自定义内容 不是 JSON 格式，会导致 OPPO 手机收不到推送。 OPPO 安装应用通知栏显示默认关闭，需要确认下开关状态。 2、发送消息为自定义消息 自定义消息的离线推送和普通消息不太一样，自定义消息的内容我们无法解析，不能确定推送的内容，所以默认不推送，如果您有推送需求，需要您在sendMessage的时候设置offlinePushInfo的desc字段，推送的时候会默认展示 desc 信息。 3、设备通知栏设置影响 离线推送的直观表现就是通知栏提示，所以同其他通知一样受设备通知相关设置的影响，以华为为例： “手机设置-通知-锁屏通知-隐藏或者不显示通知”，会影响锁屏状态下离线推送通知显示。 “手机设置-通知-更多通知设置-状态栏显示通知图标”，会影响状态栏下离线推送通知的图标显示。 “手机设置-通知-应用的通知管理-允许通知”，打开关闭会直接影响离线推送通知显示。 “手机设置-通知-应用的通知管理-通知铃声” 和 “手机设置-通知-应用的通知管理-静默通知”，会影响离线推送通知铃音的效果。 4、按照流程接入完成，还是收不到离线推送 首先在 IM 控制台通过 离线测试工具 自测下是否可以正常推送。 推送异常情况，设备状态异常，需要检查下 IM 控制台配置各项参数是否正确，再者需要检查下代码初始化注册逻辑，包括厂商推送服务注册和 IM 设置离线推送配置相关逻辑是否正确设置。 推送异常情况，设备状态正常，需要看下是否需要正确填写 channel ID 或者后台服务是否正常。 离线推送依赖厂商能力，一些简单的字符可能会被厂商过滤不能透传推送。如 OPPO 则对 ext 字段限制为 JSON 格式。 如果离线推送消息出现推送不及时或者偶尔收不到情况，需要看下厂商的推送限制。 在线推送-在本地创建新消息通知 本文以上部分介绍了，如何使用本插件，结合腾讯云IM后端的推送服务，实现通过厂商通道的离线推送。 但是，在某些情况下，厂商离线推送并不适用。如，您的目标客户端机型非我们兼容的厂商，使用华强北定制的Android设备等。 此时，您只得通过在线监听收到新消息回调，在客户端上，手动触发创建通知。这仅适用于，应用未被kill掉，还处于前后台状态，能正常与IM服务端通信。 为此种情况，本插件在0.3版本中，新增两个本地创建消息的方法，displayNotification 自定义通知，及 displayDefaultNotificationForMessage 根据消息生成默认通知，您可按需使用。 接入前准备 在您的项目中安装IM Flutter 推送插件： flutter pub add tim_ui_kit_push_plugin 并根据该指南，在插件市场，启用推送插件。 Android 确保 @mipmap/ic_launcher 存在且为您的应用Icon。完整路径：android/app/src/main/res/mipmap/ic_launcher.png 如果不存在，可手动将您的应用Icon复制进去，或通过Android Studio自动创建不同分辨率版本（mipmap 目录右键，New => Image Asset）。 打开 android/app/src/main/AndroidManifest.xml 文件，在您应用的主activity中，添加如下代码。 iOS 如果您已经配置iOS端离线推送，可忽略本部分。若无，请在 ios/Runner/AppDelegate.swift 或 ios/Runner/AppDelegate.m文件中， didFinishLaunchingWithOptions 函数内，添加如下代码。可参考我们的DEMO。 Objective-C: if (@available(iOS 10.0, *)) { [UNUserNotificationCenter currentNotificationCenter].delegate = (id) self; } Swift: if #available(iOS 10.0, *) { UNUserNotificationCenter.current().delegate = self as? UNUserNotificationCenterDelegate } 初始化插件 请在IM SDK 初始化完成后，初始化本Push插件。实例化一个 cPush 插件类，供后续调用。 final TimUiKitPushPlugin cPush = TimUiKitPushPlugin(); cPush.init( // 此处绑定点击通知的跳转函数，下文会介绍 pushClickAction: onClickNotification, ); 监听新消息回调触发通知 监听 V2TimAdvancedMsgListener 如果您已经挂载监听 V2TimAdvancedMsgListener ，可忽略本部分；若无，请在IM login后，挂载监听。 代码如下： final advancedMsgListener = V2TimAdvancedMsgListener( onRecvNewMessage: (V2TimMessage newMsg) { // 这里完成监听回调触发事件 // 下一步创建的方法，请在这里调用 }, }); TencentImSDKPlugin.v2TIMManager .getMessageManager() .addAdvancedMsgListener(listener: advancedMsgListener); 触发本地消息通知 请从我们提供的两个API中，displayNotification 自定义通知，及 displayDefaultNotificationForMessage 根据消息生成默认通知，选一个合适的 API。 对于Android端，这两个API均需传入 channelID 及 channelName。若还未创建 Android Push Channel ，请使用插件 createNotificationChannel API创建。 cPush.createNotificationChannel( channelId: \"new_message\", channelName: \"消息推送\", channelDescription: \"推送新聊天消息\"); displayNotification 本API需要您提供 title, body, 及 ext 用于点击跳转信息，三个参数。您可以根据需要自行解析收到的 V2TimMessage，生成这三个字段。 为便于跳转，此处ext的生成规则可查看 displayDefaultNotificationForMessage 的代码。 cPush.displayNotification( channelID: \"new_message\", channelName: \"消息推送\", title: \"\", body: \"\", ext: \"\" ); displayDefaultNotificationForMessage 为了方便，推荐您使用此API，自动根据 V2TimMessage，生成通知。 您只需传入一个 V2TimMessage 即可。 cPush.displayDefaultNotificationForMessage( message: message, channelID: \"new_message\", channelName: \"消息推送\"); 点击通知跳转 本步骤与上文离线推送的步骤6点击回调一致，均为在ext中，读取需要跳转的conversation，并导航过去。 如果您在上一步使用 displayDefaultNotificationForMessage，或在 displayNotification 中使用与default相同的ext生成函数，此时的ext结构为：\"conversationID\": \"对应的conversation\"。 此时，填上初始化时，为pushClickAction埋的坑。 初始化时，注册该回调方法，可拿到含推送本体及ext信息在内的Map。 说明： 在后台跳转情况下，此时Flutter首页可能已经unmounted，无法为跳转提供context，因此建议启动时缓存一个context，保证跳转成功。 建议跳转成功后，清除通知栏中其他通知消息，避免太多IM消息堆积在通知栏中。调用插件中clearAllNotification()方法即可。 BuildContext? _cachedContext; final TimUiKitPushPlugin cPush = TimUiKitPushPlugin( isUseGoogleFCM: false, ); // 仅限TUIKit final TIMUIKitChatController _timuiKitChatController = TIMUIKitChatController(); @override void initState() { super.initState(); _cachedContext = context; } void onClickNotification(Map msg) async { String ext = msg['ext'] ?? \"\"; Map extMsp = jsonDecode(ext); String convId = extMsp[\"conversationID\"] ?? \"\"; // 【TUIKit】若当前的会话与要跳转至的会话一致，则不跳转 final currentConvID = _timuiKitChatController.getCurrentConversation(); if(currentConvID == convId.split(\"_\")[1]){ return; } final targetConversationRes = await TencentImSDKPlugin.v2TIMManager .getConversationManager() .getConversation(conversationID: convId); V2TimConversation? targetConversation = targetConversationRes.data; if(targetConversation != null){ cPush.clearAllNotification(); Navigator.push( _cachedContext ?? context, MaterialPageRoute( builder: (context) => Chat( selectedConversation: targetConversation, ), )); } } 如果您自定义了 ext 结构，则需自实现点击跳转函数。 此时，您已完成在线推送的接入。测试通过后，你可以在 onRecvNewMessage 内定义，触发推送通知的时机及场景。 联系我们 如果您在接入使用过程中有任何疑问，请加入QQ群：788910197 咨询。 "},"kuai-su-ji-cheng/tuikit/zi-ding-yi-biao-qing-cha-jian-ji-cheng.html":{"url":"kuai-su-ji-cheng/tuikit/zi-ding-yi-biao-qing-cha-jian-ji-cheng.html","title":"自定义表情插件集成","keywords":"","body":"以下将为您介绍 TUIKit Sticker Plugin 自定义表情包插件。 介绍 TUIKit Sticker Plugin 是提供定义自定义表情包数据，生成表情包 Panel UI的 TUIKit plugin（TUIKit Sticker Plugin 不依赖 TUIKit）。 业务代码、TUIKit、TUIKit Sticker Plugin 三方关系如下图： 表情包分为下面类型： 字符类表情包，通过 unicode 定义，通过 sendTextMsg 方法发送消息，可与字符同时存在于输入栏，当作 Text 消息。 图片类表情包，通过图片地址定义，通过 sendFaceMsg 方法发送消息，不能与字符同时存在于输入栏，当作 Face 消息。 整体流程 TUIKit 通过 TIMUIKitChat 组件里的 customStickerPanel 将 sendTextMessage （发送文字信息），sendFaceMessage（发送表情信息），deleteText （删除最后一个文字/表情），addText （添加文字/表情） 方法暴露出来。 业务侧通过 TUIKit Sticker Plugin 的 CustomStickerPackage 生成表情包所需的数据。 业务侧通过 TUIKit Sticker Plugin 的 StickerPanel 生成表情包 panel 组件。 将组件回传至 TUIKit 生成 表情包 panel。 说明： TUIKit 若未接受到 customStickerPanel 则展示默认表情包 panel。 业务侧可不通过 TUIKit Sticker Plugin 定义表情包数据，可自行定义。 业务侧可不用 TUIKit Sticker Plugin 的 StickerPanel 生成表情包 panel 组件，可自定义。 表情包图片支持开发者本地地址或线上地址（通过 HTTP 或 HTTPS 请求能访问的地址）。 操作步骤 步骤1：安装 在项目的 pubspec.yaml 文件中的 dependencies 下添加 tim_ui_kit_sticker_plugin 的依赖。或执行以下命令： // Step 1 flutter pub add tim_ui_kit_sticker_plugin // Step 2 flutter pub get 步骤2：TUIKit Sticker Plugin 定义表情包数据 调用 CustomSticker 类来生成单个表情包。 class CustomSticker { final int? unicode; // unicode int值 选填 final String name; // 表情包名称 final int index; // 表情包序号 final String? url; // 表情包地址 选填 } 调用 CustomStickerPackage 类来初始化表情包 Package。 class CustomStickerPackage { // 一个系列的表情包定义为一个package final String name; // 表情包package name final String? baseUrl; // 表情包package baseUrl 选填 final List stickerList; // 表情包列表 final CustomSticker menuItem; // 切换表情包的按钮的图标 bool get isCustomSticker => menuItem.unicode == null; // *** 注意，如果menuItem的unicode传值int，则认为当前表情包package为字符类表情包 } 步骤3：TUIKit Sticker Plugin 生成表情包 Panel UI class StickerPanel extends StatefulWidget { final void Function() sendTextMsg; // TUIKit回传的方法，发送文本消息 final void Function(int index，String data) sendFaceMsg; // TUIKit回传的方法，发送表情消息 final void Function(int unicode) addText; // TUIKit回传的方法，添加文本给输入框 final void Function() deleteText; // TUIKit回传的方法，删除最后一个输入框文本 final List customStickerPackageList; // 自定义表情包package列表 final Color? backgroundColor; // 背景颜色，选填 final Color? lightPrimaryColor; // 轻主色调，选填 } "},"kuai-su-ji-cheng/tuikit/di-li-wei-zhi-cha-jian-ji-cheng.html":{"url":"kuai-su-ji-cheng/tuikit/di-li-wei-zhi-cha-jian-ji-cheng.html","title":"地理位置插件集成","keywords":"","body":"使用本插件，开发者可方便地在其腾讯云 IM Flutter 项目中，引入发送接收展示位置消息能力。本插件提供三个组件： 位置选择器（LocationPicker） 位置消息完整展示器（LocationShow） 位置消息列表展示器（LocationMsgElement） 说明： 上述插件提供为其配套业务逻辑能力，除与地图底层 SDK 交互部分外。 为方便开发者快速接入，我们还提供基于百度地图的完整 Example 代码。具体请查看腾讯云 IM Flutter 或本 Plugin 的 Example。 术语介绍 POI: Point of interesting。即地图上任何非地理意义的有意义的点，每个 POI 均有特定坐标/名称/各级地址/ID。 例如：深圳腾讯大厦，蛇口太子广场。 整体流程 选定底层地图 SDK。 继承三个抽象类，完成本插件业务代码与地图 SDK 间交互。 将继承后的抽象类实例化，传入本插件提供的三个组件中。 选定底层地图 SDK 本插件大部分业务逻辑接口基于百度地图设计，选用百度地图可较快完成项目。但不限制具体使用哪一块地图 SDK，常用地图 Flutter SDK 如下： 百度地图：国内+国外（五万/年）数据，请参见 官方文档。 高德地图：仅国内数据，请参见 官方文档。 Google Map：含全球数据，请参见 官方文档。 开发接入 数据交互数据结构 本插件使用一系列数据结构来定义 SDK 与插件间传递的信息，包含如下： class LocationMessage { final String desc; final double longitude; final double latitude; } /// 代表经纬度 class TIMCoordinate implements TIMLocationBaseModel { /// 纬度 late double latitude; /// 经度 late double longitude; Map toMap(); fromMap(Map map); } /// POI信息类 class TIMPoiInfo implements TIMLocationBaseModel { /// POI名称 String? name; /// POI坐标 TIMCoordinate? pt; /// POI地址信息 String? address; /// POI唯一标识符uid String? uid; /// POI所在省份 String? province; /// POI所在城市 String? city; fromMap(Map map); Map toMap(); } /// 根据地理坐标反向查询结果类 class TIMReverseGeoCodeSearchResult implements TIMLocationBaseModel { /// 地址坐标 TIMCoordinate? location; /// 地址名称 String? address; /// 层次化地址信息 TIMAddressComponent? addressDetail; /// 地址周边POI信息，成员类型为BMKPoiInfo List? poiList; /// 结合当前位置POI的语义化结果描述， 用于地址名称字段。例如\"腾讯大厦内，招行信息研发大厦附近18米\"。 String? semanticDescription; fromMap(Map map); Map toMap(); } /// 地址结果的层次化信息 class TIMAddressComponent implements TIMLocationBaseModel { /// 国家 String? country; /// 省份名称 String? province; /// 城市名称 String? city; /// 区县名称 String? district; /// 乡镇 String? town; fromMap(Map map); Map toMap() } /// 枚举：地图区域改变原因 enum TIMRegionChangeReason { /// 继承抽象类，连接地图 SDK 与插件业务逻辑 若选用百度地图，可直接使用我们的完整 Example 代码，快速完成项目。请参加 详细指南。 请根据选定的地图 SDK，继承以下三个类： TIMMapService 地图定位及 POI 搜索能力 Service。需要根据地图 SDK 完成交互并将数据提供给插件业务代码。 /// 【可选】仅当您需要使用地图SDK提供的定位能力，才需要继承本方法。开关：LocationPicker/LocationShow的isUseMapSDKLocation字段。 /// 需做到根据地图SDK提供的定位能力定位再再通过'moveMapCenter(coordinate)'将地图挪过去， /// 并返回含根据新的地图中心查询附近POI的结果及是否出错参数的方法 void moveToCurrentLocationActionWithSearchPOIByMapSDK({ required void Function(TIMCoordinate coordinate) moveMapCenter, void Function(TIMReverseGeoCodeSearchResult, bool)? onGetReverseGeoCodeSearchResult, }); /// 根据关键词搜索POI，优先返回在当前city内的结果，但同时也可以搜到其他city的POI void poiCitySearch({ required void Function(List?, bool) onGetPoiCitySearchResult, required String keyword, required String city, }); /// 根据地理坐标查询附近的POI，并返回包含TIMReverseGeoCodeSearchResult及是否报错参数的方法 void searchPOIByCoordinate( {required TIMCoordinate coordinate, required void Function(TIMReverseGeoCodeSearchResult, bool) onGetReverseGeoCodeSearchResult}); TIMMapWidget 渲染地图的基类，对外暴露地图事件。是 StatefulWidget，需要继承 TIMMapState。 包含地图加载完成回调及地图拖动结束回调。 final Function? onMapLoadDone; final Function(TIMCoordinate? targetGeoPt, TIMRegionChangeReason regionChangeReason)? onMapMoveEnd; TIMMapState 渲染地图基类的State，提供完成一系列地图交互能力，并对外返回可直接使用的地图实例。 /// 地图创建完成回调 void onMapLoadDone(){} /// 地图移动结束 void onMapMoveEnd(TIMCoordinate? targetGeoPt, TIMRegionChangeReason regionChangeReason){} /// 移动地图视角 void moveMapCenter(TIMCoordinate pt){} /// 禁用地图交互 void forbiddenMapFromInteract() {} /// 在地图上添加图钉 void addMarkOnMap(TIMCoordinate pt, String title){} /// 此处实例化地图 @override Widget build(BuildContext context) { return Container( child: 某地图的Widget( onMapCreated: onMapCreated, mapOptions: initMapOptions(), ), ); } 使用组件 位置选择器（LocationPicker） 该组件以类似微信的位置选择器页面呈现，允许用户定位当前位置/地图选点/搜索特定 POI /展示选定 POI 周边其他 POI。 /// 地理位置选择完成后的onChange事件，返回一个LocationMessage，可用于发送消息。 /// 【特别说明】由于腾讯云IM位置消息仅支持传递一个desc字符串，因此此处的LocationMessage.desc将名称及地址拼接传递，格式：\"腾讯大厦/////深圳市南山区深南大道10000号\"。 /// 该拼接格式可被本插件所需地方解析，请放心使用。 final ValueChanged onChange; /// 传入根据选定地图SDK实例化后的LocationUtils final LocationUtils locationUtils; /// 用于还未加载出来定位时，打开页面后，默认的中心点。 final TIMCoordinate? initCoordinate; /// 用于控制是否使用地图SDK定位能力。若使用，请确保moveToCurrentLocationActionWithSearchPOIByMapSDK方法继承正确。 final bool? isUseMapSDKLocation; /// 传入根据选定地图SDK实例化后的地图组件TIMMapWidget final TIMMapWidget Function( VoidCallback onMapLoadDone, Key mapKey, Function(TIMCoordinate? targetGeoPt, TIMRegionChangeReason regionChangeReason) onMapMoveEnd) mapBuilder; 位置消息完整展示器（LocationShow） 该组件以类似微信的位置详情展示页面呈现，使用大地图配上图标，展示接收到的位置。底部显示位置名称/地址，及拉起跳转导航软件的按钮。 /// 位置名称标题 final String addressName; /// 位置地址 final String? addressLocation; /// 纬度 final double latitude; /// 经度 final double longitude; /// 传入根据选定地图SDK实例化后的LocationUtils final LocationUtils locationUtils; /// 用于控制是否使用地图SDK定位能力。若使用，请确保moveToCurrentLocationActionWithSearchPOIByMapSDK方法继承正确。 final bool? isUseMapSDKLocation; /// 第三方导航APP列表，如果没传，则默认腾讯/百度/高德/苹果地图。 final List? navigationMapList; /// 传入根据选定地图SDK实例化后的地图组件TIMMapWidget final TIMMapWidget Function( VoidCallback onMapLoadDone, Key mapKey) mapBuilder; 位置消息列表展示器（LocationMsgElement） 此组件用于在历史消息列表中，展示位置消息。效果类似微信。提供小地图展示/位置名称及地址展示。 /// 消息ID final String? messageID; /// V2TimLocationElem消息 final V2TimLocationElem locationElem; /// 是否自己发送 final bool isFromSelf; /// 是否显示被跳转样式 final bool? isShowJump; /// 清除跳转方法 final VoidCallback? clearJump; /// 传入根据选定地图SDK实例化后的LocationUtils final LocationUtils locationUtils; /// 传入根据选定地图SDK实例化后的地图组件TIMMapWidget final TIMMapWidget Function(VoidCallback onMapLoadDone, Key mapKey) mapBuilder; 配合 TUIKit 使用接入 此部分完整代码可在 IM Flutter Demo 中得到。 历史消息列表渲染小地图（LocationMsgElement） 请在 TIMUIKitChat 中新增如下字段。该小地图可以自动单击跳转至完整版详细地图（LocationShow）。 TIMMapWidget 和 TIMMapService 需要替换为自己的实例化对象。 locationMessageItemBuilder: (locationElem, isFromSelf, isShowJump, clearJump, messageID) => LocationMsgElement( messageID: messageID, locationElem: locationElem, isFromSelf: isFromSelf, isShowJump: isShowJump, clearJump: clearJump, mapBuilder: (onMapLoadDone, mapKey) => TIMMapWidget( onMapLoadDone: onMapLoadDone, key: mapKey, ), locationUtils: LocationUtils(TIMMapService()), ), 加号面板增加位置 item 并跳转至位置选择器（LocationMsgElement） 请在 TIMUIKitChat 中新增如下字段。该 extraAction 可跳转至位置选择器，并发送消息。 TIMMapWidget 和 TIMMapService 需要替换为自己的实例化对象。 morePanelConfig: MorePanelConfig( extraAction: [ MorePanelItem( id: \"location\", title: (\"位置\"), onTap: (c) { Navigator.push( context, MaterialPageRoute( builder: (context) => LocationPicker( onChange: (LocationMessage location) async { // 此处消息发送逻辑需要根据业务框架适当修改 final locationMessageInfo = await sdkInstance.v2TIMMessageManager.createLocationMessage( desc: location.desc, longitude: location.longitude, latitude: location.latitude); final messageInfo = locationMessageInfo.data!.messageInfo; _timuiKitChatController.sendMessage( convID: _getConvID()!, convType: _getConvType(), messageInfo: messageInfo ); }, mapBuilder: (onMapLoadDone, mapKey, onMapMoveEnd) => TIMMapWidget( onMapMoveEnd: onMapMoveEnd, onMapLoadDone: onMapLoadDone, key: mapKey, ), locationUtils: LocationUtils(TIMMapService()), ), )); }, icon: Container( height: 64, width: 64, margin: const EdgeInsets.only(bottom: 4), decoration: const BoxDecoration( color: Colors.white, borderRadius: BorderRadius.all(Radius.circular(5))), child: Icon( Icons.location_on, color: hexToColor(\"5c6168\"), size: 32, ), )) ], ), "},"kuai-su-ji-cheng/zi-shi-xian-ui/":{"url":"kuai-su-ji-cheng/zi-shi-xian-ui/","title":"自实现 UI 快速集成方案","keywords":"","body":""},"kuai-su-ji-cheng/zi-shi-xian-ui/ji-cheng-sdk.html":{"url":"kuai-su-ji-cheng/zi-shi-xian-ui/ji-cheng-sdk.html","title":"集成 SDK","keywords":"","body":"本文主要介绍如何快速将腾讯云即时通信 IM SDK 集成到您的 Flutter 项目中。 环境要求 平台 版本 Flutter 2.2.0 及以上版本。 Android Android Studio 3.5及以上版本，App 要求 Android 4.1及以上版本设备。 iOS Xcode 11.0及以上版本，真机调试请确保您的项目已设置有效的开发者签名。 集成 IM SDK 您可以通过 pub add 的方式直接集成腾讯云 IM SDK（Flutter），或者在 pubspec.yaml 中写入 IM SDK 的方式来集成。 flutter pub add 安装 在终端窗口中输入如下命令（需要提前安装 Flutter 环境）： flutter pub add tencent_im_sdk_plugin 在 pubspec.yaml 中写入 dependencies: tencent_im_sdk_plugin: \"最新版本\" //可在https://pub.dev/packages/tencent_im_sdk_plugin上查看im flutter sdk的最新版本并使用 此时您的 editor 或许会自动 flutter pub get，如果没有请您在命令行中手动输入 flutter pub get。 引入并初始化 SDK import 'package:tencent_im_sdk_plugin/tencent_im_sdk_plugin.dart'; 常见问题 flutter pub get/add 失败如何解决？ 请参见官网配置 国内镜像。 "},"kuai-su-ji-cheng/zi-shi-xian-ui/chu-shi-hua.html":{"url":"kuai-su-ji-cheng/zi-shi-xian-ui/chu-shi-hua.html","title":"初始化","keywords":"","body":"功能描述 在使用 IM SDK 的各项功能前，必须先进行初始化。 大多数场景下，在应用生命周期内，您只需要进行一次 IM SDK 初始化。 初始化 初始化 SDK 需要操作以下步骤： 准备 SDKAppID。 设置 LogLevelEnum。 设置 SDK 事件监听器。 调用 initSDK 初始化 SDK。 下文我们将依次为您详细讲解具体的步骤内容。 准备 SDKAppID 您必须拥有正确的 SDKAppID，才能进行初始化。 SDKAppID 是腾讯云 IM 服务用于区分客户帐号的唯一标识。我们建议每一个独立的 App 都申请一个新的 SDKAppID。不同 SDKAppID 之间的消息是天然隔离的，不能互通。 您可以在 即时通信 IM 控制台 查看所有的 SDKAppID，单击 创建新应用 按钮，可以创建新的 SDKAppID。 设置 LogLevelEnum 初始化 SDK 前，您需要初始化一个 LogLevelEnum(Dart) 对象。该对象用于对 SDK 进行日志级别设置。 设置日志级别 IM SDK 支持多种日志级别，如下表所示： 日志级别 LOG 输出量 LogLevelEnum.V2TIM_LOG_NONE 不输出任何 log LogLevelEnum.V2TIM_LOG_DEBUG 输出 DEBUG，INFO，WARNING，ERROR 级别的 log （默认的日志级别） LogLevelEnum.V2TIM_LOG_INFO 输出 INFO，WARNING，ERROR 级别的 log LogLevelEnum.V2TIM_LOG_WARN 输出 WARNING，ERROR 级别的 log LogLevelEnum.V2TIM_LOG_ERROR 输出 ERROR 级别的 log SDK 日志存储规则如下： IM SDK 本地日志默认保存 7 天；SDK 在初始化时，会自动清理 7 天之前的日志。 在 Android 平台上，IM SDK 的日志在 4.8.50 版本之前默认存储于 /sdcard/tencenet/imsdklogs/应用包名 目录下，4.8.50 及之后的版本存储于 /sdcard/Android/data/包名/files/log/tencent/imsdk 目录下。 从 4.7.1 版本开始，IM SDK 的日志开始采用微信团队的 xlog 模块进行输出。xlog 日志默认是压缩的，需要使用 Python 脚本进行解压。 获取解压脚本：若使用 Python 2.7，则单击 Decode Log 27 获取解压脚本；若使用 Python 3.0，则单击 Decode Log 30 获取解压脚本。 在 Windows 或者 Mac 控制台输入如下命令即可对 log 文件进行解压，解压后的文件以 xlog.log 结尾，可以直接使用文本编辑器打开。python decode_mars_nocrypt_log_file.py imsdk_yyyyMMdd.xlog 设置 SDK 事件监听器 SDK 初始化后，会通过 V2TimSDKListener 抛出一些事件，例如连接状态、登录票据过期等。 我们建议您在调用initSDK时传入 V2TimSDKListener(Dart) 接口添加 SDK 事件监听器，在对应回调中做一些逻辑处理。 V2TimSDKListener 相关回调如下表所示： 事件回调 事件描述 推荐操作 onConnecting 正在连接到腾讯云服务器 适合在 UI 上展示 “正在连接” 状态。 onConnectSuccess 已经成功连接到腾讯云服务器 - onConnectFailed 连接腾讯云服务器失败 提示用户当前网络连接不可用。 onKickedOffline 当前用户被踢下线 此时可以 UI 提示用户 “您已经在其他端登录了当前帐号，是否重新登录？” onUserSigExpired 登录票据已经过期 请使用新签发的 UserSig 进行登录。 onSelfInfoUpdated 当前用户的资料发生了更新 可以在 UI 上更新自己的头像和昵称。 注意： 如果收到 onUserSigExpired 回调，说明您登录用的 UserSig 票据已经过期，请使用新签发的 UserSig 进行重新登录。如果继续使用过期的 UserSig，会导致 IM SDK 登录进入死循环。 调用初始化接口 操作完上述步骤后，您可以调用 initSDK(Dart) 进行 SDK 初始化。 示例代码如下： // 1. 从即时通信 IM 控制台获取应用 SDKAppID。 int sdkAppID = 0; // 2. 添加 V2TimSDKListener 的事件监听器，sdkListener 是 V2TimSDKListener 的实现类 V2TimSDKListener sdkListener = V2TimSDKListener( onConnectFailed: (code, error) {}, onConnectSuccess: () {}, onConnecting: () {}, onKickedOffline: () {}, onSelfInfoUpdated: (V2TimUserFullInfo info) {}, onUserSigExpired: () {}, ); // 3.初始化，成功之后可以注册事件。 TencentImSDKPlugin.v2TIMManager.initSDK( sdkAppID: sdkAppID, loglevel: LogLevelEnum.V2TIM_LOG_ALL, listener: sdkListener, ); 反初始化 普通情况下，如果您的应用生命周期跟 IM SDK 生命周期一致，退出应用前可以不进行反初始化。 但有些特殊场景，例如您只在进入特定界面后才初始化 IM SDK，退出界面后不再使用，可以对 IM SDK 进行反初始化。 反初始化需要操作一个步骤：调用反初始化接口 unInitSDK(Dart) 示例代码如下： // 反初始化 SDK TencentImSDKPlugin.v2TIMManager.unInitSDK(); 常见问题 1. 在调用登录等其他接口时，发生错误，返回错误码是 6013 和错误描述是 \"not initialized\" 的信息。 在使用 IM SDK 登录、消息、群组、会话、关系链和资料、信令的功能前，必须先进行初始化。 交流与反馈 欢迎加入 QQ 群进行技术交流和反馈问题，QQ 群：788910197。 "},"kuai-su-ji-cheng/zi-shi-xian-ui/deng-lu-deng-chu.html":{"url":"kuai-su-ji-cheng/zi-shi-xian-ui/deng-lu-deng-chu.html","title":"登录登出","keywords":"","body":"功能描述 初始化 IM SDK 后，您需要调用 SDK 登录接口，验证帐号身份，获得帐号的功能使用权限。登录 IM SDK 成功后，才能正常使用消息、会话等功能。 注意： 只有获取会话的接口可以在调用登录接口后立即调用。其他各项功能的接口，必须在 SDK 登录成功后才能调用。因此在使用其他功能之前，请务必登录且确保登录成功，否则可能导致功能异常或不可用！ 登录 首次登录一个 IM 帐号时，不需要先注册这个帐号。在登录成功后，IM 自动完成这个帐号的注册。 您可以调用 login(Dart) 接口进行登录。 login 接口的关键参数如下： 参数 含义 说明 UserID 登录用户唯一标识 建议只包含大小写英文字母（a-z、A-Z）、数字（0-9）、下划线（_）和连词符（-)。长度不超过 32 字节。 UserSig 登录票据 由您的业务服务器进行计算以保证安全。计算方法请参考 UserSig 后台 API。 您需要在以下场景调用 login 接口： App 启动后首次使用 IM SDK 的功能。 登录时票据过期：login 接口的回调会返回 ERR_USER_SIG_EXPIRED（6206） 或 ERR_SVR_ACCOUNT_USERSIG_EXPIRED（70001） 错误码，此时请您生成新的 userSig 重新登录。 在线时票据过期：用户在线期间也可能收到 onUserSigExpired(dart) 回调，此时需要您生成新的 userSig 并重新登录。 在线时被踢下线：用户在线情况下被踢，IM SDK 会通过 onKickedOffline(dart) 回调通知给您，此时可以在 UI 提示用户，并调用 login 重新登录。 以下场景无需调用 login 接口： 用户的网络断开并重新连接后，不需要调用 login 函数，IM SDK 会自动上线。 当一个登录过程在进行时，不需要进行重复登录。 说明： 调用 IM SDK 接口成功登录后，将会开始计算 DAU，请根据业务场景合理调用登录接口，避免出现 DAU 过高的情况。 在一个 App 中，IM SDK 不支持多个帐号同时在线，如果同时登录多个帐号，只有最后登录的帐号在线。 示例代码如下： String userID = \"your user id\"; String userSig = \"userSig from your server\"; V2TimCallback res = await TencentImSDKPlugin.v2TIMManager.login(userID: userID, userSig: userSig); if(res.code == 0){ // 登录成功逻辑 }else{ // 登录失败逻辑 } 获取登录用户 在登录成功后，通过调用getLoginUser(dart) 获取登录用户 UserID。 如果登录失败，获取的登录用户 UserID 为空。 示例代码如下： // 获取登录成功的用户 UserID V2TimValueCallback getLoginUserRes = await TencentImSDKPlugin.v2TIMManager.getLoginUser(); if(getLoginUserRes.code == 0){ userID = getLoginUserRes.data; } 获取登录状态 通过调用getLoginStatus(dart) 获取登录状态，如果用户已经处于已登录和登录中状态，请勿再频繁调用登录接口登录。IM SDK 支持的登录状态，如下表所示： 登录状态 含义 V2TIM_STATUS_LOGINED (0) 已登录 V2TIM_STATUS_LOGINING (1) 登录中 V2TIM_STATUS_LOGOUT (2) 未登录 示例代码如下： V2TimValueCallback getLoginStatusRes = await TencentImSDKPlugin.v2TIMManager.getLoginStatus(); if(getLoginStatusRes.code == 0){ int status = getLoginStatusRes.data; if(status == 0){ // 已登录 } else if(status == 1){ // 登录中 } else if(status == 2){ // 未登录 } } 多端登录与互踢 您可以在腾讯云控制台配置 IM SDK 的多端登录策略。 多端登录策略有多种可选，例如“移动或桌面平台可有1种平台在线+Web可同时在线”、“不同平台均可同时在线“。 相关配置请参考：登录设置。 您可以在腾讯云控制台配置 IM SDK 的同平台可登录实例数配置，即相同平台的设备可支持几个同时在线。 此功能仅限旗舰版使用。目前 Web 端可同时在线个数最多为 10 个。Android、iPhone、iPad、Windows、Mac（Flutter以实际编译结果为准） 平台可同时在线设备个数最多为 3 个。 相关配置请参考：登录设置。 调用 login(dart) 接口时，如果同一个帐号的多端登录策略超出限制，新登录的实例会把之前已登录的实例踢下线。 被踢下线的一方，会收到 onKickedOffline(dart) 回调。 登出 普通情况下，如果您的应用生命周期跟 IM SDK 生命周期一致，退出应用前可以不登出，直接退出即可。 但有些特殊场景，例如您只在进入特定界面后才使用 IM SDK，退出界面后不再使用，此时可以调用logout(dart) 接口登出 SDK。登出成功后，不会再收到其他人发送的新消息。注意这种情况下，登出成功后还需要调 unInitSDK(dart) 对 SDK 进行反初始化。 示例代码如下： V2TimCallback logoutRes = await TencentImSDKPlugin.v2TIMManager.logout(); if(logoutRes.code == 0){ } 帐号切换 如果您希望在应用中实现帐号切换的需求，只需要每次切换帐号时调用 login(dart) 即可。 例如已经登录了 alice，现在要切换到 bob，只需要直接 login bob 即可。login bob 前无需显式调用 logout alice，IM SDK 内部会自动处理。 交流与反馈 欢迎加入 QQ 群进行技术交流和反馈问题，QQ 群：788910197。 "},"kuai-su-ji-cheng/zi-shi-xian-ui/xiao-xi-xiang-guan/":{"url":"kuai-su-ji-cheng/zi-shi-xian-ui/xiao-xi-xiang-guan/","title":"消息相关","keywords":"","body":""},"kuai-su-ji-cheng/zi-shi-xian-ui/xiao-xi-xiang-guan/xiao-xi-jie-shao.html":{"url":"kuai-su-ji-cheng/zi-shi-xian-ui/xiao-xi-xiang-guan/xiao-xi-jie-shao.html","title":"消息介绍","keywords":"","body":"消息类介绍 在腾讯云 IM SDK 中，消息类为 V2TIimessage (Dart) 。您在发送和接收消息过程中都会频繁地用到该类。 V2TimMessage 类定义了以下内容： 属性 含义 说明 msgID 消息 ID 消息创建的时候为空，调用 sendMessage 的时候同步返回。 timestamp 消息时间戳 消息发送到服务端的时间。可用于消息排序。 sender 消息发送者的 userID 客户自己设置，跟 login 时传入的 userID 一致。 nickName 消息发送者的昵称 客户自己设置。调用 setSelfInfo 设置及修改。详情可参考 用户资料。 friendRemark 消息发送者的好友备注 接收方使用。例如 alice 给好友 bob 备注为 \"bob01\"。当 bob 给 alice 发消息，此时对于 alice 而言，消息中的 friendRemark 为 \"bob01\"。调用 setFriendInfo 设置。 nameCard 发送者的群名片 仅群聊消息有效。例如 alice 修改自己的群名片为 \"doctorA\"，那么 alice 往群里发送的消息，群成员收到的消息 nameCard 字段值为 \"doctorA\"。接收者可以将这个字段优先作为用户名称的显示。调用 setGroupMemberInfo 设置。 faceURL 消息发送者头像 客户自己设置的头像 URL，可以通过它下载头像图片。 groupID 群组 ID 群聊消息中 groupID 为群组 ID；单聊消息中 groupID 为 nil。 userID 用户 ID 单聊消息中 userID 为对端用户 ID；群聊消息中 userID 为 nil。 seq 消息序列号 单聊消息的 seq 由本地生成，不能保证严格递增且唯一；群聊消息的 seq 由服务器生成，在当前群里的严格递增且唯一的。 random 消息随机码 SDK 内部生成。 status 消息发送状态 目前支持：发送中、发送成功、发送失败、被删除、导入到本地、被撤销。 isSelf 消息发送者是否是自己 可用于消息筛选。 needReadReceipt 消息是否需要已读回执 发送方设置。6.1 以上版本有效，需要购买旗舰版套餐。详情可参考 已读回执 priority 消息优先级 仅群聊消息有效。通过 sendMessage 接口设置。 groupAtUserList 群消息被 @ 的用户列表 仅群聊消息有效。列表中存储的是 userID。详情可参考 群 @ 消息 elemType 消息类型 目前支持：文本、自定义内容、图片、语音、视频、文件、地理位置、表情、群 tips、合并转发消息。详情可参考 消息分类。 textElem 文本消息存储元素 发送文本消息需要创建并填充该元素；收到消息判断 elemType 为 TEXT 时，可以从 textElem 中解析出内容。详情可参考 发送消息 / 接收消息。 customElem 自定义消息存储元素 发送自定义消息需要创建并填充该元素；收到消息判断 elemType 为 CUSTOM 时，可以从 customElem 中解析出内容。 imageElem 图片消息存储元素 发送图片消息需要创建并填充该元素；收到消息判断 elemType 为 IMAGE 时，可以从 imageElem 中解析出内容。 soundElem 语音消息存储元素 发送语音消息需要创建并填充该元素；收到消息判断 elemType 为 SOUND 时，可以从 soundElem 中解析出内容。 videoElem 视频消息存储元素 发送视频消息需要创建并填充该元素；收到消息判断 elemType 为 VIDEO 时，可以从 videoElem 中解析出内容。 fileElem 文件消息存储元素 发送文件消息需要创建并填充该元素；收到消息判断 elemType 为 FILE 时，可以从 fileElem 中解析出内容。 locationElem 地理位置消息存储元素 发送地理位置消息需要创建并填充该元素；收到消息判断 elemType 为 LOCATION 时，可以从 locationElem 中解析出内容。 faceElem 表情消息存储元素 发送地理位置消息需要创建并填充该元素；收到消息判断 elemType 为 FACE 时，可以从 faceElem 中解析出内容。 mergerElem 合并消息存储元素 发送合并位置消息需要创建并填充该元素；收到消息判断 elemType 为 MERGER 时，可以从 mergerElem 中解析出内容。详情可参考 转发消息 groupTipsElem 群 tips 消息存储元素 群 tips 消息目前只能由服务器发送。SDK 收到消息判断 elemType 为 GROUP_TIPS 时，可以从 groupTipsElem 中解析出内容。详情可参考 接收消息 cloudCustomData 消息自定义数据 发送方设置。内容由用户自定义。云端保存，会发送到对端，程序卸载重装后还能拉取到。 isExcludedFromUnreadCount 消息是否不计入会话未读数 发送方设置。默认为需要计入会话未读数。5.3.425 及以上版本支持。 isExcludedFromLastMessage 消息是否不计入会话 lastMsg 发送方设置。默认为需要计入会话 lastMsg。5.4.666 及以上版本支持。 offlinePushInfo 自定义离线推送信息 详情可参考 离线推送 isRead 消息是否本端已读 如果是自己发的消息，默认已读。 isPeerRead 消息是否对端已读 仅单聊消息有效。 localCustomData 消息自定义数据 发送方设置。本地保存，不会发送到对端，程序卸载重装后失效。 localCustomInt 消息自定义数据 发送方设置。本地保存，不会发送到对端，程序卸载重装后失效。可以用来标记语音、视频消息是否已经播放。 消息分类 腾讯云 IM 消息按照消息的发送目标可以分为：“单聊消息”（又称 “C2C 消息”）和“群聊消息” 两种： 消息分类 API 关键词 说明 单聊消息 C2CMessage 又称 C2C 消息，在发送时需要指定消息接收者的 UserID，只有接受者可以收到该消息。 群聊消息 GroupMessage 在发送时需要指定目标群组的 groupID，该群中的所有用户均能收到消息。 按照消息承载的内容可以分为 “文本消息”、“自定义（信令）消息”，“图片消息”、“视频消息”、“语音消息”、“文件消息”、“位置消息”、“合并消息” 等几种类型。 消息分类 API 关键词 说明 文本消息 TextElem 普通的文字消息。 自定义消息 CustomElem 一段二进制 buffer，通常用于传输您应用中的自定义信令。 图片消息 ImageElem SDK 会在发送原始图片的同时，自动生成两种不同尺寸的缩略图，三张图分别被称为原图、大图、微缩图。 视频消息 VideoElem 一条视频消息包含一个视频文件和一张配套的缩略图。 语音消息 SoundElem 支持语音是否播放红点展示。 文件消息 FileElem 文件消息最大支持100MB。 位置消息 LocationElem 地理位置消息由位置描述、经度（longitude ）和纬度（latitude）三个字段组成。 合并消息 MergerElem 最大支持 300 条消息合并。 消息存储策略 腾讯云 IM 消息按照消息存储策略，可以分为两种消息：在线消息、非在线消息。 在线消息是指只有当用户在线时才能接收到，离线后不会通过离线推送下发给用户。非在线消息是指无论用户是否在线，都能收到的消息。 在线消息会实时下发，不会存储在服务端。SDK 也不会存储在线消息。所以换设备或卸载后重新安装 App 拉取历史消息都不能拉到此类消息。 说明： 直播群所有的消息都属于在线消息。 全员推送的消息都属于在线消息。 非在线消息会被 SDK 和服务端存储。漫游服务器默认存储 7 天的消息。如果您希望存储超过 7 天，需要购买增值服务。服务内容和计费请查看 增值服务资费。 换设备或卸载后重新安装 App 拉取历史消息可以拉到此类消息。 交流与反馈 欢迎加入 QQ 群进行技术交流和反馈问题，QQ 群：788910197。 "},"kuai-su-ji-cheng/zi-shi-xian-ui/xiao-xi-xiang-guan/fa-song-xiao-xi.html":{"url":"kuai-su-ji-cheng/zi-shi-xian-ui/xiao-xi-xiang-guan/fa-song-xiao-xi.html","title":"发送消息","keywords":"","body":"功能描述 发送消息方法在核心类 TencentImSDKPlugin.v2TIMManager.getMessageManager()中。 支持发送文本、自定义、富媒体消息，消息类型都是 V2TimMessage。 V2TimMessage 中可以携带不同类型子类，表示不同类型的消息。 重点接口说明 接口 sendMessage (dart) 是发送消息中最核心的接口。该接口支持发送所有类型的消息。 说明： 下文中提到的发消息高级接口，指的都是 sendMessage。 接口说明如下： Future> sendMessage( { required String id, required String receiver, required String groupID, int priority = 0, bool onlineUserOnly = false, bool needReadReceipt = false, bool isExcludedFromUnreadCount = false, bool isExcludedFromLastMessage = false, Map? offlinePushInfo, String? cloudCustomData, String? localCustomData, } ) 参数说明： 参数 含义 单聊有效 群聊有效 说明 id 创建消息返回的id YES YES 需要通过对应的 `createXxxMessage` 接口先行创建 receiver 单聊消息接收者 userID YES NO 如果是发送 C2C 单聊消息，只需要指定 receiver 即可 groupID 群聊 groupID NO YES 如果是发送群聊消息，只需要指定 groupID 即可 priority 消息优先级 NO YES 请把重要消息设置为高优先级（例如红包、礼物消息），高频且不重要的消息设置为低优先级（例如点赞消息） onlineUserOnly 是否只有在线用户才能收到 YES YES 如果设置为 YES ，接收方历史消息拉取不到，常被用于实现”对方正在输入”或群组里的非重要提示等弱提示功能 offlinePushInfo 离线推送信息 YES YES 离线推送时携带的标题和内容 needReadReceipt 发送群消息是否支持已读 NO YES 发送群消息是否支持已读 isExcludedFromUnreadCount 发送消息是否计入会话未读数 YES YES 如果设置为 true，发送消息不会计入会话未读，默认为 false isExcludedFromLastMessage 发送消息是否计入会话 lastMessage YES YES 如果设置为 true，发送消息不会计入会话 lastMessage，默认为 false cloudCustomData 消息云端数据 YES YES 消息附带的额外的数据，存云端，消息的接受者可以访问到 localCustomData 消息本地数据 YES YES 消息附带的额外的数据，存本地，消息的接受者不可以访问到，App 卸载后数据丢失 说明： 如果 groupID 和 receiver 同时设置，表示给 receiver 发送定向群消息。具体请参考 群定向消息。 发送文本消息 文本消息区分单聊和群聊，涉及的接口、传参有所区别。 发送文本消息可以采用两种接口：普通接口和高级接口。高级接口比普通接口能设置更多的发送参数（例如优先级、离线推送信息等）。 普通接口参考下文具体描述，高级接口就是上文中提到的 sendMessage。 单聊文本消息 高级接口 调用高级接口发送单聊文本消息分两步： 调用 createTextMessage (dart) 创建文本消息。 调用 sendMessage (dart) 发送消息。 示例代码如下： // 创建文本消息 V2TimValueCallback createTextMessage = await TencentImSDKPlugin.v2TIMManager.getMessageManager().createTextAtMessage( text: \"test\", atUserList: [], ); if(createTextMessage.code == 0){ String id = createTextMessage.data.id; // 发送文本消息 V2TimValueCallback sendMessageRes = await TencentImSDKPlugin.v2TIMManager.getMessageManager().sendMessage(id: id, receiver: \"userID\", groupID: \"\"); if(sendMessageRes.code == 0){ // 发送成功 } } 群聊文本消息 高级接口 调用高级接口发送群聊文本消息分两步： 调用 createTextMessage (dart) 创建文本消息。 调用 sendMessage (dart) 发送消息。 示例代码如下： // 创建文本消息 V2TimValueCallback createTextAtMessageRes = await TencentImSDKPlugin.v2TIMManager.getMessageManager().createTextAtMessage( text: \"test\", atUserList: [], ); if(createTextAtMessageRes.code == 0){ String id = createTextAtMessageRes.data.id; // 发送文本消息 V2TimValueCallback sendMessageRes = await TencentImSDKPlugin.v2TIMManager.getMessageManager().sendMessage(id: id, receiver: \"\", groupID: \"groupID\"); if(sendMessageRes.code == 0){ // 发送成功 } } 发送自定义消息 自定义消息区分单聊和群聊，涉及的接口或者传参有所区别。发送自定义消息可以采用两种接口：普通接口和高级接口。 高级接口即上文中已介绍过的 sendMessage (dart)，比普通接口能设置更多的发送参数（例如优先级、离线推送信息等）。 单聊自定义消息 高级接口 调用高级接口发送单聊自定义消息分两步： 调用 createCustomMessage (dart) 创建自定义消息。 调用 sendMessage (dart) 发送消息。 示例代码如下： // 创建自定义消息 V2TimValueCallback createCustomMessageRes = await TencentImSDKPlugin.v2TIMManager.getMessageManager().createCustomMessage( data: '自定义data', desc: '自定义desc', extension: '自定义extension', ); if(createCustomMessageRes.code == 0){ String id = createCustomMessageRes.data.id; // 发送自定义消息 V2TimValueCallback sendMessageRes = await TencentImSDKPlugin.v2TIMManager.getMessageManager().sendMessage(id: id, receiver: \"userID\", groupID: \"\"); if(sendMessageRes.code == 0){ // 发送成功 } } 群聊自定义消息 高级接口 调用高级接口发送群聊自定义消息分两步： 调用 createCustomMessage (dart) 创建自定义消息。 调用 sendMessage (dart) 发送消息。 代码示例如下： // 创建自定义消息 V2TimValueCallback createCustomMessageRes = await TencentImSDKPlugin.v2TIMManager.getMessageManager().createCustomMessage( data: '自定义data', desc: '自定义desc', extension: '自定义extension', ); if(createCustomMessageRes.code == 0){ String id = createCustomMessageRes.data.id; // 发送自定义消息 V2TimValueCallback sendMessageRes = await TencentImSDKPlugin.v2TIMManager.getMessageManager().sendMessage(id: id, receiver: \"\", groupID: \"groupID\"); if(sendMessageRes.code == 0){ // 发送成功 } } 发送富媒体消息 富媒体消息发送没有普通接口，都需要使用高级接口，步骤是： 调用 createXxxMessage 创建指定类型的富媒体消息对象，其中 Xxx 表示具体的消息类型。 调用 sendMessage(dart) 发送消息。 在消息回调中获取消息是否发送成功或失败。 图片消息 创建图片消息需要先获取到本地图片路径。 发送消息过程中，会先将图片文件上传至服务器，同时回调上传进度。上传成功后再发送消息。 示例代码如下： V2TimValueCallback createImageMessageRes = await TencentImSDKPlugin.v2TIMManager.getMessageManager().createImageMessage( imagePath: \"本地图片绝对路径\", ); if (createImageMessageRes.code == 0) { String id = createImageMessageRes.data.id; V2TimValueCallback sendMessageRes = await TencentImSDKPlugin .v2TIMManager .getMessageManager() .sendMessage(id: id, receiver: \"userID\", groupID: \"groupID\"); if (sendMessageRes.code == 0) { // 发送成功 } } 语音消息 创建语音消息需要先获取到本地语音文件路径和语音时长，其中语音时长可用于接收端 UI 显示。 发送消息过程中，会先将语音文件上传至服务器，同时回调上传进度。上传成功后再发送消息。 示例代码如下： V2TimValueCallback createSoundMessageRes = await TencentImSDKPlugin.v2TIMManager.getMessageManager().createSoundMessage( soundPath: \"本地录音文件绝对路径\", duration: 10,// 录音时长 ); if (createSoundMessageRes.code == 0) { String id = createSoundMessageRes.data.id; V2TimValueCallback sendMessageRes = await TencentImSDKPlugin .v2TIMManager .getMessageManager() .sendMessage(id: id, receiver: \"userID\", groupID: \"groupID\"); if (sendMessageRes.code == 0) { // 发送成功 } } 视频消息 创建视频消息需要先获取到本地视频文件路径、视频时长和视频快照，其中时长和快照可用于接收端 UI 显示。 发送消息过程中，会先将视频上传至服务器，同时回调上传进度。上传成功后再发送消息。 示例代码如下： V2TimValueCallback createVideoMessageRes = await TencentImSDKPlugin.v2TIMManager .getMessageManager() .createVideoMessage( videoFilePath: \"本地视频文件绝对路径\", type: \"mp4\", // 视频类型 duration: 10,// 视频时长 snapshotPath: \"本地视频封面文件绝对路径\", ); if (createVideoMessageRes.code == 0) { String id = createVideoMessageRes.data.id; V2TimValueCallback sendMessageRes = await TencentImSDKPlugin .v2TIMManager .getMessageManager() .sendMessage(id: id, receiver: \"userID\", groupID: \"groupID\"); if (sendMessageRes.code == 0) { // 发送成功 } } 文件消息 创建文件消息需要先获取到本地文件路径。 发送消息过程中，会先将文件上传至服务器，同时回调上传进度。上传成功后再发送消息。 示例代码如下： V2TimValueCallback createFileMessageRes = await TencentImSDKPlugin.v2TIMManager .getMessageManager() .createFileMessage( filePath: \"本地文件绝对路径\", fileName: \"文件名\", ); if (createFileMessageRes.code == 0) { String id = createFileMessageRes.data.id; V2TimValueCallback sendMessageRes = await TencentImSDKPlugin .v2TIMManager .getMessageManager() .sendMessage(id: id, receiver: \"userID\", groupID: \"groupID\"); if (sendMessageRes.code == 0) { // 发送成功 } } 定位消息 定位消息会直接发送经纬度，一般需要配合地图控件显示。 示例代码如下： V2TimValueCallback createLocationMessage = await TencentImSDKPlugin.v2TIMManager .getMessageManager() .createLocationMessage( desc: \"深圳市南山区深南大道\",//位置信息摘要 longitude: 34,// 经度 latitude: 20, // 纬度 ); if (createLocationMessage.code == 0) { String id = createLocationMessage.data.id; V2TimValueCallback sendMessageRes = await TencentImSDKPlugin .v2TIMManager .getMessageManager() .sendMessage(id: id, receiver: \"userID\", groupID: \"groupID\"); if (sendMessageRes.code == 0) { // 发送成功 } } 表情消息 表情消息会直接发送表情编码，通常接收端需要将其转换成对应的表情 icon。 示例代码如下： V2TimValueCallback createFaceMessageRes = await TencentImSDKPlugin.v2TIMManager .getMessageManager() .createFaceMessage( index: 0, data: \"\", ); if (createFaceMessageRes.code == 0) { String id = createFaceMessageRes.data.id; V2TimValueCallback sendMessageRes = await TencentImSDKPlugin .v2TIMManager .getMessageManager() .sendMessage(id: id, receiver: \"userID\", groupID: \"groupID\"); if (sendMessageRes.code == 0) { // 发送成功 } } 交流与反馈 欢迎加入 QQ 群进行技术交流和反馈问题，QQ 群：788910197。 "},"kuai-su-ji-cheng/zi-shi-xian-ui/xiao-xi-xiang-guan/jie-shou-xiao-xi.html":{"url":"kuai-su-ji-cheng/zi-shi-xian-ui/xiao-xi-xiang-guan/jie-shou-xiao-xi.html","title":"接收消息","keywords":"","body":"功能描述 通过 addAdvancedMsgListener 监听接收所有类型消息（文本、自定义、富媒体消息），相关回调在 V2TimAdvancedMsgListener 协议中定义。 设置消息监听器 高级消息监听器 添加监听器 接收方调用 addAdvancedMsgListener (dart) 添加高级消息监听器。一般建议在比较靠前的时间点调用，例如例如聊天消息界面初始化后，确保 App 能及时收到消息。 示例代码如下： TencentImSDKPlugin.v2TIMManager.getMessageManager().addAdvancedMsgListener( listener: V2TimAdvancedMsgListener( onRecvC2CReadReceipt: (List receiptList) {},// C2C 对端用户会话已读通知（对端用户调用 markC2CMessageAsRead，自己会收到该通知） onRecvMessageModified: (V2TimMessage message) {},// 消息内容被修改 onRecvMessageReadReceipts: (List receiptList) {},// 消息已读回执通知（如果自己发送的消息支持已读回执，消息接收端调用 sendMessageReadReceipts，自己会收到该通知） onRecvMessageRevoked: (String messageid) {},// 收到消息撤回的通知 onRecvNewMessage: (V2TimMessage message) {},// 收到新消息 onSendMessageProgress: (V2TimMessage message, int progress) {},// 上传消息进度事件 ), ); 移除监听器 如果想停止接收消息，接收方可调用 removeAdvancedMsgListener (dart) 移除高级消息监听器。 示例代码如下： // 创建listener V2TimAdvancedMsgListener listener = V2TimAdvancedMsgListener( onRecvC2CReadReceipt: (List receiptList) {}, onRecvMessageModified: (V2TimMessage message) {}, onRecvMessageReadReceipts: (List receiptList) {}, onRecvMessageRevoked: (String messageid) {}, onRecvNewMessage: (V2TimMessage message) {}, onSendMessageProgress: (V2TimMessage message, int progress) {}, ); // 注册listener TencentImSDKPlugin.v2TIMManager .getMessageManager() .addAdvancedMsgListener(listener: listener); // 移除listener TencentImSDKPlugin.v2TIMManager.getMessageManager().removeAdvancedMsgListener(listener: listener); 接收文本消息 接收方使用高级消息监听器接收单聊、群聊文本消息，需要以下几步： 调用 addAdvancedMsgListener 设置事件监听器。 监听 onRecvNewMessage (dart) 回调，在其中接收自定义消息。 希望停止接收消息，调用 removeAdvancedMsgListener 移除监听。该步骤不是必须的，客户可以按照业务需求调用。 代码示例如下： V2TimAdvancedMsgListener listener = V2TimAdvancedMsgListener( onRecvC2CReadReceipt: (List receiptList) {}, onRecvMessageModified: (V2TimMessage message) {}, onRecvMessageReadReceipts: (List receiptList) {}, onRecvMessageRevoked: (String messageid) {}, onRecvNewMessage: (V2TimMessage message) { // 处理文本消息 if(message.elemType == MessageElemType.V2TIM_ELEM_TYPE_TEXT){ String text = message.textElem.text; } }, onSendMessageProgress: (V2TimMessage message, int progress) {}, ); TencentImSDKPlugin.v2TIMManager .getMessageManager() .addAdvancedMsgListener(listener: listener); 接收自定义消息 接收方使用高级消息监听器接收单聊、群聊自定义消息，需要以下几步： 调用 addAdvancedMsgListener 设置事件监听器。 监听 onRecvNewMessage (dart) 回调，在其中接收自定义消息。 希望停止接收消息，调用 removeAdvancedMsgListener 移除监听。该步骤不是必须的，客户可以按照业务需求调用。 代码示例如下： V2TimAdvancedMsgListener listener = V2TimAdvancedMsgListener( onRecvC2CReadReceipt: (List receiptList) {}, onRecvMessageModified: (V2TimMessage message) {}, onRecvMessageReadReceipts: (List receiptList) {}, onRecvMessageRevoked: (String messageid) {}, onRecvNewMessage: (V2TimMessage message) { // 使用自定义消息 if(message.elemType == MessageElemType.V2TIM_ELEM_TYPE_CUSTOM){ String data = message.customElem.data; String desc = message.customElem.desc; String ext = message.customElem.extension; } }, onSendMessageProgress: (V2TimMessage message, int progress) {}, ); TencentImSDKPlugin.v2TIMManager .getMessageManager() .addAdvancedMsgListener(listener: listener); 接收富媒体消息 接收富媒体消息只能使用高级消息监听器，需要以下几步： 接收方调用 addAdvancedMsgListener 接口设置高级消息监听。 接收方通过监听回调 onRecvNewMessage (dart) 获取消息 V2TimMessage。 接收方解析 V2TIMMessage 消息中的 elemType 属性，并根据其类型进行二次解析，获取消息内部 Elem 中的具体内容。 希望停止接收消息，调用 removeAdvancedMsgListener 移除监听。该步骤不是必须的，客户可以按照业务需求调用。 图片消息 一个图片消息会包含三种格式大小的图片，分别为原图、大图、微缩图（SDK 会在发送图片消息的时候自动生成微缩图、大图，客户不需要关心） 大图：是将原图等比压缩。压缩后宽、高中较小的一个等于 720 像素。 缩略图：是将原图等比压缩。压缩后宽、高中较小的一个等于 198 像素。 Flutter SDK 会在空闲时间将图片消息下载到 App 本地，开发者可直接使用即可，本地图片在APP卸载时清除 示例代码向您演示如何从 V2TimMessage 中解析出图片消息内容： V2TimAdvancedMsgListener listener = V2TimAdvancedMsgListener( onRecvC2CReadReceipt: (List receiptList) {}, onRecvMessageModified: (V2TimMessage message) {}, onRecvMessageReadReceipts: (List receiptList) {}, onRecvMessageRevoked: (String messageid) {}, onRecvNewMessage: (V2TimMessage message) { // 使用图片消息 if (message.elemType == MessageElemType.V2TIM_ELEM_TYPE_IMAGE) { String path = message .imageElem.path; // 图片上传时的路径，消息发送者才会有这个字段，消息发送者可用这个字段将图片预先上屏，优化上屏体验。 for (var item in message.imageElem.imageList) { // 遍历大图、原图、缩略图 // 解析图片属性 int height = item.height; String localUrl = item.localUrl; int size = item.size; int type = item.type; // 大图 缩略图 原图 String url = item.url; String uuid = item.uuid; int width = item.width; } } }, onSendMessageProgress: (V2TimMessage message, int progress) {}, ); TencentImSDKPlugin.v2TIMManager .getMessageManager() .addAdvancedMsgListener(listener: listener); 视频消息 接收方收到视频消息后，一般需要在聊天界面显示一个视频预览图，当用户点击消息后，才会触发视频的播放。 所以这里需要两步： Flutter SDK 会在空闲时间将视频消息下载到 App 本地，开发者可直接使用即可，本地视频和视频封面在APP卸载时清除 示例代码向您演示如何从 V2TimMessage 中解析出视频消息内容： if(message.elemType == MessageElemType.V2TIM_ELEM_TYPE_VIDEO){ // 解析视频消息属性，封面、播放地址、宽高、大小等。 message.videoElem.UUID; message.videoElem.duration; message.videoElem.localSnapshotUrl; message.videoElem.localVideoUrl; message.videoElem.snapshotHeight; message.videoElem.snapshotPath; // ... } 语音消息 Flutter SDK 会在空闲时间将语音消息下载到 App 本地，开发者可直接使用即可，本地语音消息在APP卸载时清除 示例代码向您演示如何从 V2TimMessage 中解析出语音消息内容： if(message.elemType == MessageElemType.V2TIM_ELEM_TYPE_SOUND){ // 解析语音消息 播放地址，本地地址，大小，时长等。 message.soundElem.UUID; message.soundElem.dataSize; message.soundElem.duration; message.soundElem.localUrl; message.soundElem.url; // ... } 文件消息 Flutter SDK 会在空闲时间将语音消息下载到 App 本地，开发者可直接使用即可，本地文件消息在APP卸载时清除 示例代码向您演示如何从 V2TimMessage 中解析出文件消息内容： if(message.elemType == MessageElemType.V2TIM_ELEM_TYPE_FILE){ // 解析文件消息 文件名、文件大小、url等 message.fileElem.UUID; message.fileElem.fileName; message.fileElem.fileSize; message.fileElem.localUrl; message.fileElem.path; message.fileElem.url; } 地理位置消息 接收到地理位置消息后，接收放可直接从 locationElem 中解析出经纬度信息。 示例代码向您演示如何从 V2TimMessage 中解析出地理位置消息内容： if(message.elemType == MessageElemType.V2TIM_ELEM_TYPE_LOCATION){ // 解析地理位置消息，经纬度、描述等 message.locationElem.desc; message.locationElem.latitude; message.locationElem.longitude; } 表情消息 SDK 仅为表情消息提供消息透传的通道，消息内容字段参考 faceElem (dart) 定义。其中 index 和 data 的内容由客户自定义。 例如发送方可设置 index = 1, data = \"x12345\"，表示 “微笑“ 表情。 接收方收到表情消息后解析出 1 和 \"x12345\"，按照预设的规则将其展示为 “微笑“ 表情。 示例代码向您演示如何从 V2TIMMessage 中解析出表情消息内容： if (message.elemType == MessageElemType.V2TIM_ELEM_TYPE_FACE) { message.faceElem.data; message.faceElem.index; } 群 tips 消息 群 tips 消息表示群组中，除了普通消息以外，用户会接收到的提示类消息。例如 “管理员将 alice 移除群聊” “bob 修改了群名称为 xxxx” 等。 说明： 群 tips 消息只有群聊成员会收到，单聊成员收不到。 群 tips 消息有多种类型，参考 V2TIMGroupTipsType (dart) 的定义。 接收方接受到群 tips 消息后，一般需要做： 解析出 V2TIMGroupTipsElem 中的各个字段 根据 type 判断这个 tips 消息是什么类型 根据类型，结合其他的字段，组装要显示的内容。 举个例子： 接收方解析出 type = V2TIM_GROUP_TIPS_TYPE_GROUP_INFO_CHANGE，表示这是个群资料变更通知。 接收方可以从 opMember 中获取到操作者信息，再从 groupChangeInfoList 获取到修改后的群名称。 此时，接收方可以将 “操作者” 和 “修改后的群名称” 组装起来，构造出一条群提示。例如 “alice 修改了群名称为 group123”。 示例代码向您演示如何从 V2TIMMessage 中解析出群 tips 消息内容： if(message.elemType == MessageElemType.V2TIM_ELEM_TYPE_GROUP_TIPS){ message.groupTipsElem.groupID; // 所属群组 message.groupTipsElem.type; // 群Tips类型 message.groupTipsElem.opMember; // 操作人资料 message.groupTipsElem.memberList; // 被操作人资料 message.groupTipsElem.groupChangeInfoList; // 群信息变更详情 message.groupTipsElem.memberChangeInfoList; // 群成员变更信息 message.groupTipsElem.memberCount; // 当前群在线人数 } 接收多个 Elem 的消息 通过 Message 对象正常解析出第一个 Elem 对象。 通过第一个 Elem 对象的 nextElem 方法获取下一个 Elem 对象，如果下一个 Elem 对象存在，会返回 Elem 对象实例，如果不存在，会返回 null。 示例代码如下： if(message.textElem.nextElem!=null){ // 有下一个消息 } 交流与反馈 欢迎加入 QQ 群进行技术交流和反馈问题，QQ 群：788910197。 "},"kuai-su-ji-cheng/zi-shi-xian-ui/xiao-xi-xiang-guan/li-shi-xiao-xi.html":{"url":"kuai-su-ji-cheng/zi-shi-xian-ui/xiao-xi-xiang-guan/li-shi-xiao-xi.html","title":"历史消息","keywords":"","body":"功能描述 拉取历史消息的 API 在类 TencentImSDKPlugin.v2TIMManager.getMessageManager() 中。 除了支持单聊、群聊历史消息的拉取外，还提供了高级接口以支持按指定方向拉取、按指定起点和指定时间范围拉取。 除了支持单独拉取本地历史消息外，还支持拉取云端历史消息。 说明： 在拉取云端历史消息时，如果检测到网络异常，SDK 会返回本地存储的历史消息。 本地存储的历史消息无时间显示，但云端存储的历史消息有存储时长的限制： 体验版：免费存储 7 天，不支持延长 专业版：免费存储 7 天，支持延长 旗舰版：免费存储 30 条，支持延长 说明： 延长历史消息存储时长是增值服务，您可以登录 即时通信 IM 控制台 修改相关配置，具体计费说明请参加 增值服务资费 。 富媒体消息（图片、文件、语音等）对应的文件存储时长，与历史消息存储时长保持一致。 拉取单聊历史消息 您可以调用接口 getC2CHistoryMessageList (dart) 获取单聊历史消息。 在网络正常的情况下会拉取最新的云端数据。如果网络出现异常，SDK 会返回本地存储的历史消息。 如果您仅仅想拉取本地历史消息，可以参考 高级接口 。 本接口支持分页拉取，参考：分页拉取。 示例代码如下： // 拉取单聊历史消息 // 首次拉取，lastMsgID 设置为 null // 再次拉取时，lastMsgID 可以使用返回的消息列表中的最后一条消息的id TencentImSDKPlugin.v2TIMManager.getMessageManager().getC2CHistoryMessageList( userID: \"userId\", count: 10, lastMsgID: null, ); 拉取群聊历史消息 您可以调用接口 getGroupHistoryMessageList (dart) 获取群聊历史消息。 在网络正常的情况下会拉取最新的云端数据。如果网络出现异常，SDK 会返回本地存储的历史消息。 如果您仅仅想拉取本地历史消息，可以参考 高级接口 。 本接口支持分页拉取，参考：分页拉取。 注意： 只有会议群（Meeting）才能拉取到进群前的历史消息，更多关于群消息的限制，详见 消息能力差异 。 直播群（AVChatRoom）消息不存云端漫游和本地数据库，调用这个接口无效。 示例代码如下： // 拉取群聊历史消息 // 首次拉取，lastMsgID 设置为 null // 再次拉取时，lastMsgID 可以使用返回的消息列表中的最后一条消息id TencentImSDKPlugin.v2TIMManager .getMessageManager() .getGroupHistoryMessageList( groupID: \"groupID\", count: 10, lastMsgID: null, ); 高级功能 高级接口 如果以上的普通接口无法满足您对拉取历史消息的需求，我们还提供了高级接口 getHistoryMessageList (dart)。 该接口除了支持普通拉取单聊、群聊历史消息外，还支持以下高级特性： 支持设置拉取消息的位置：从本地拉取、从云端拉取。 支持按照指定的方向拉取：往消息时间更老的方向拉取、往消息时间更新的方向拉取。 支持拉取本地指定的消息类型：文本、图片、语音、视频、文件、表情、群 tips 消息、合并消息、自定义消息等。 接口原型： Future>> getHistoryMessageList({ HistoryMsgGetTypeEnum? getType = HistoryMsgGetTypeEnum.V2TIM_GET_LOCAL_OLDER_MSG, String? userID, String? groupID, int lastMsgSeq = -1, required int count, String? lastMsgID, }) async { return ImFlutterPlatform.instance.getHistoryMessageList( getType: getType!.index, userID: userID, count: count, lastMsgID: lastMsgID, groupID: groupID, lastMsgSeq: lastMsgSeq); } 参数说明： 参数 含义 单聊有效 群聊有效 是否必填 说明 getType 拉取消息的位置及方向，可以设置拉取 本地/云端 的 更老/更新 的消息 YES YES YES 当设置从云端拉取时，会将本地存储消息列表与云端存储消息列表合并后返回。如果无网络，则直接返回本地消息列表。 userID 拉取指定用户的单聊历史消息 YES NO NO 拉取单聊消息，需要指定对方的 userID，此时 groupID 传空即可。 groupID 拉取指定群组的群聊历史消息 NO YES NO 拉取单聊消息，需要指定群聊的 groupID，此时 userID 传空即可。 count 单次拉取的消息数量 YES YES YES 建议设置为 20，否则可能影响拉取速度 lastMsgID 最后一条消息，表示从哪条消息开始拉取历史消息 YES YES NO 1. 单聊和群聊中均能使用。2. 设置 lastMsg 作为拉取的起点，返回的消息列表中不包含这条消息。3. 如果设置为空，则使用会话的最新一条消息作为拉取起点。 lastMsgSeq 最后一条消息 seq，表示从哪条消息开始拉取历史消息 NO YES NO 1. 仅能在群聊中使用该字段。2. 设置 lastMsgSeq 作为拉取的起点，返回的消息列表中包含这条消息。3. 如果同时指定了 lastMsg 和 lastMsgSeq，SDK 优先使用 lastMsg。4. 如果均未指定 lastMsg 和 lastMsgSeq，拉取的起点取决于是否设置 getTimeBegin。设置了，则使用设置的范围作为起点；未设置，则使用最新消息作为起点。 分页拉取 拉取单聊历史消息、拉取群聊历史消息 以及 高级接口 均可以按照相同的方式实现分页，即使用 lastMsg 和 count 来实现。 通过 lastMsg 和 count 来实现分页。第一次拉取时 lastMsg 可以设置为空，使用消息列表中返回来最后一条消息作为下一次拉取的 lastMsg 从而拉去下一页数据。 当 lastMsg 设置为空时，SDK 会默认从最新的消息开始返回。 当设置 lastMsg 后，返回的消息列表不包含设置的 lastMsg。 返回的消息列表中，越新的消息越靠前。 说明： 为了不影响历史消息拉取速度，建议分页时 count 设置为 20。 由于返回的消息列表会包含 lastMsgSeq 所对应的消息，所以在拉取群聊历史消息时，不建议使用 lastMsgSeq 来续拉。 仅拉取本地消息 通过设置 getType 来实现仅拉取本地消息： getType 取值为 V2TIM_GET_LOCAL_OLDER_MSG 时，表示往时间更旧的方向，拉取本地存储的消息。 getType 取值为 V2TIM_GET_LOCAL_NEWER_MSG 时，表示往时间更新的方向，拉取本地存储的消息。 示例代码将演示：从最新的消息开始，往更老的方向，从本地数据库中拉取 20 条单聊消息。 TencentImSDKPlugin.v2TIMManager.getMessageManager().getHistoryMessageList( count: 10, getType: HistoryMsgGetTypeEnum.V2TIM_GET_LOCAL_OLDER_MSG, userID: \"userID\", ); 跳转到群 @ 消息后拉取 在群聊会话中，收到群 @ 消息后，一般需要通过点击群 @ 提示条，跳转到群 @ 消息的位置，并拉取附近的消息列表用于显示。 由于群 @ 消息本身也需要显示，可以将 lastMsgSeq 设置成群 @ 消息的 sequence ，并使用 高级接口 来拉取。 示例代码将演示：点击群 @ 提示后，跳转到群 @ 消息，并拉取前后各 20 条消息用于展示。 // 获取群 @ 消息对应的的 sequence int atSequence = 1081; // 拉取群 @ 消息及之前的消息 TencentImSDKPlugin.v2TIMManager.getMessageManager().getHistoryMessageList( count: 20, // 拉取 20 条 getType: HistoryMsgGetTypeEnum.V2TIM_GET_CLOUD_OLDER_MSG, // 拉取比群 @ 消息更早的消息 lastMsgSeq: atSequence,// 从群 @ 消息开始拉取，包括群 @ 消息 groupID: \"groupID\" // 拉取群聊消息 ); // 拉取群 @ 消息之后的消息 TencentImSDKPlugin.v2TIMManager.getMessageManager().getHistoryMessageList( count: 20, // 拉取 20 条 getType: HistoryMsgGetTypeEnum.V2TIM_GET_CLOUD_NEWER_MSG, // 拉取比群 @ 消息更晚的消息 lastMsgSeq: atSequence,// 从群 @ 消息开始拉取，包括群 @ 消息 groupID: \"groupID\" // 拉取群聊消息 ); 常见问题 1. 拉历史消息时，日志中出现 \"total count of request cloud message exceed max limit\" 信息 SDK 目前的策略是： 当 getType 设置成拉云端历史消息，且拉取 x 条消息时，SDK 会从云端拉取 x 条消息。 SDK 会过滤无效的消息，例如消息被删除、非当前用户关心的消息等。 当云端历史消息中无效的消息过多，就会触发 SDK 多次分页拉取。 为了提供系统的稳定性和健壮性，SDK 最多触发 3 次自动分页。当超过限制后，会出现 “total count of request cloud message exceed max limit” 的日志信息。 为了尽可能的减少此类限频机制对业务层的影响，您可以使用如下措施来减少无效消息的产生： 您可以使用在线消息，也就是说在发送消息时 onlineUserOnly 字段设置为 YES/true 。 如果是群聊消息，可以使用群定向消息指定消息的接收者，避免产生无效消息。 2. 拉云端历史消息时，消息 “丢失” ？ 当 getType 设置成拉云端历史消息，且拉取 count 条消息时，SDK 会做如下操作： SDK 先从本地拉取 count 条消息。 SDK 再次云端拉取 count 条消息，过滤掉被删除等无效的消息，如果不够 count 条，SDK 内部触发分页拉取。 将本地和云端消息进行合并，更新消息状态等信息。 从合并的消息列表中，返回 count 条消息。 一般出现消息 “丢失” 时，指的是在第 2 步中拉取的无效消息过多，导致触发了 问题 1 中的限频机制 ，从而导致实际拉取的云端消息不够。 建议按照 问题 1 中的解决方法 来处理，如果仍然无法解决，欢迎加入 QQ 群（468195767）反馈。 3. 拉取的历史消息，群名片等群成员信息没有实时更新？ SDK 会在消息产生时，更新当前的群名片、role 等群成员信息并存储在本地数据库中。 当拉取群历史消息时，会直接返回消息产生时的群成员信息，不会实时更新。 如果您需要获取最新的群成员信息，您可以使用 getGroupMembersInfo(dart)。 4. 拉取历史消息时卡顿 SDK 内部已对消息拉取做了性能优化，您如果碰到消息卡顿的情况，可以先尝试减少拉取的消息数 count ，如果还是不能解决问题，欢迎加入 QQ 群（788910197）反馈。 交流与反馈 欢迎加入 QQ 群进行技术交流和反馈问题，QQ 群：788910197。 "},"kuai-su-ji-cheng/zi-shi-xian-ui/xiao-xi-xiang-guan/zhuan-fa-xiao-xi.html":{"url":"kuai-su-ji-cheng/zi-shi-xian-ui/xiao-xi-xiang-guan/zhuan-fa-xiao-xi.html","title":"转发消息","keywords":"","body":"功能描述 如果您想实现类似于微信的合并转发功能，需要进行以下步骤： 根据原始消息列表创建一条合并消息。 把合并消息发送到对端。 对端收到合并消息后解析出原始消息列表。 合并消息的展示还需要标题和摘要信息，如下图所示： 合并转发 合并消息展示 点击合并消息下载合并消息列表展示 合并转发消息 创建并发送合并转发消息 我们在创建一条合并消息的时候不仅要设置合并消息列表，还要设置标题和摘要信息，实现流程如下： 调用 createMergerMessage (dart) 接口创建一条合并消息，创建合并消息的时候需要设置原始消息列表，合并消息标题、合并消息摘要等信息。 属性 含义 说明 msgIDList 原始消息ID列表 合并转发的原始消息ID列表 title 标题 合并消息的标题，如上图所示 “xixiyah 和 Hello 的聊天记录” abstractList 摘要列表 合并消息的摘要信息，如上图所示，合并消息需要预先展示原始消息的摘要信息，当用户点击 Cell 后才去展示完整消息内容 compatibleText 兼容文本信息 低版本 SDK 如果不支持合并消息，默认会收到一条文本消息，文本消息的内容为 compatibleText 创建并发送合并消息示例代码如下： // 需要被转发的消息列表，消息列表里可以包含合并消息，不能包含群 Tips 消息 V2TimValueCallback createMergerMessageResult = await TencentImSDKPlugin.v2TIMManager .getMessageManager() .createMergerMessage( msgIDList: [\"msgid1\", \"msgid2\"], title: \"user1与user2的聊天\", // 合并消息标题 abstractList: [\"user1:hello\", \"user2:你好\"], // 合并消息摘要列表 compatibleText: \"当前版本不支持该消息\", // 合并消息兼容文本，低版本 SDK 如果不支持合并消息，默认会收到一条文本消息，文本消息的内容为 compatibleText ); if (createMergerMessageResult.code == 0) { TencentImSDKPlugin.v2TIMManager.getMessageManager().sendMessage( id: createMergerMessageResult.data.id, receiver: \"\", groupID: \"\", ); } 接收合并转发消息 添加监听器 接收方调用 addAdvancedMsgListener (dart) 添加高级消息监听器。 一般建议在比较靠前的时间点调用，例如例如聊天消息界面初始化后，确保 App 能及时收到消息。 示例代码如下： TencentImSDKPlugin.v2TIMManager .getMessageManager() .addAdvancedMsgListener(listener: listener); 解析消息 添加监听器后，接收方会在 onRecvNewMessage 中收到合并消息 V2TimMessage。 可以先通过合并消息元素 V2TimMergerElem (dart) 获取 title 和 abstractList UI 展示。 当用户点击合并消息的时候再调用 downloadMergerMessage(dart) 接口下载合并消息列表 UI 展示。 示例代码如下： if(message.elemType == MessageElemType.V2TIM_ELEM_TYPE_MERGER){ message.mergerElem.abstractList; message.mergerElem.isLayersOverLimit; message.mergerElem.title; V2TimValueCallback> download = await TencentImSDKPlugin.v2TIMManager.getMessageManager().downloadMergerMessage(msgID: message.msgID,); if(download.code == 0){ List messageList = download.data; } } 逐条转发消息 如果您需要转发单条消息，可以先通过 createForwardMessage (dart) 接口创建一条和原消息内容完全一样的转发消息，再调用 sendMessage (dart) 接口把转发消息发送出去。 示例代码如下： // 创建转发消息，转发消息的 elem 内容和原消息完全一致 V2TimValueCallback createForwardMessageRes = await TencentImSDKPlugin.v2TIMManager.getMessageManager().createForwardMessage(msgID: \"msgid\"); // 发送消息给用户 \"denny\" if(createForwardMessageRes.code == 0){ TencentImSDKPlugin.v2TIMManager.getMessageManager().sendMessage(id: createForwardMessageRes.data.id, receiver: \"denny\", groupID: \"\"); } 交流与反馈 欢迎加入 QQ 群进行技术交流和反馈问题，QQ 群：788910197。 "},"kuai-su-ji-cheng/zi-shi-xian-ui/xiao-xi-xiang-guan/xiao-xi-bian-geng.html":{"url":"kuai-su-ji-cheng/zi-shi-xian-ui/xiao-xi-xiang-guan/xiao-xi-bian-geng.html","title":"消息变更","keywords":"","body":"功能描述 会话里面已经发送成功的消息，会话内任意成员可以针对消息做二次修改。消息修改成功后会同步给会话的全部成员。 说明： 仅Flutter sdk 4.0.0 及以上版本支持。 变更消息 会话参与者可以调用 modifyMessage(dart) 接口对会话里的消息做二次修改。 修改消息时，IM SDK 仅限制了会话参与者才能修改，如果您需要更多限制，例如限制只有消息发送者才能修改，可以自行在业务层处理。 目前消息支持修改的信息如下： 1、localCustomData (dart) 2、localCustomInt (dart) 3、cloudCustomData (dart) 4、V2TIMTextElem (dart) 5、V2TIMCustomElem (dart) 示例代码如下： // 查找到需要修改的消息 V2TimValueCallback> msgListRes = await TencentImSDKPlugin.v2TIMManager.getMessageManager().findMessages(messageIDList: ['msgid']); // 编辑消息 if(msgListRes.code == 0){ List messageList = msgListRes.data; if(messageList.isNotEmpty){ V2TimMessage originMessage = messageList[0]; originMessage.cloudCustomData = \"change data\"; V2TimValueCallback modify = await TencentImSDKPlugin.v2TIMManager.getMessageManager().modifyMessage(message: originMessage); if(modify.code == 0){ if(modify.data.code ==0){ // 修改成功 } } } } 监听消息变更回调 会话的参与者调用 addAdvancedMsgListener (dart) 添加高级消息监听器。 当会话里的消息被修改后，会话的参与者都会收到 onRecvMessageModified(dart) 回调，回调里面会携带修改之后的消息对象。 示例代码如下： onRecvMessageModified: (V2TimMessage message) { // msg 为被修改之后的消息对象 }, 交流与反馈 欢迎加入 QQ 群进行技术交流和反馈问题，QQ 群：788910197。 "},"kuai-su-ji-cheng/zi-shi-xian-ui/xiao-xi-xiang-guan/cha-ru-xiao-xi.html":{"url":"kuai-su-ji-cheng/zi-shi-xian-ui/xiao-xi-xiang-guan/cha-ru-xiao-xi.html","title":"插入消息","keywords":"","body":"功能描述 插入消息只会将消息插入本地数据库，不会发送到服务端。 警告： 如果用户切换手机登录，或程序卸载重装，之前插入的消息会丢失。 该接口主要用于满足向聊天会话中插入一些提示性消息的需求，例如 “您已经退出该群”、“请注意信息安全，不要在群聊中发送任何账号、密码和验证码等私密信息“ 等。这类消息有展示在聊天消息区的需求，但并没有发送给其他人的必要。 向单聊插入本地消息 您可以调用 insertC2CMessageToLocalStorage (dart) 向单聊插入本地消息。目前Flutter端仅支持插入自定义消息。 示例代码如下： TencentImSDKPlugin.v2TIMManager.getMessageManager().insertC2CMessageToLocalStorage(data: \"\", userID: \"\", sender: \"\"); 向群聊插入本地消息 您可以调用 insertGroupMessageToLocalStorage (dart) 向群聊插入本地消息。 示例代码如下： TencentImSDKPlugin.v2TIMManager.getMessageManager().insertGroupMessageToLocalStorage(data: \"\", groupID: \"\", sender: \"\"); 交流与反馈 欢迎加入 QQ 群进行技术交流和反馈问题，QQ 群：788910197。 "},"kuai-su-ji-cheng/zi-shi-xian-ui/xiao-xi-xiang-guan/shan-chu-xiao-xi.html":{"url":"kuai-su-ji-cheng/zi-shi-xian-ui/xiao-xi-xiang-guan/shan-chu-xiao-xi.html","title":"删除消息","keywords":"","body":"功能描述 删除消息分为两种：删除本地消息和删除云端消息。 删除云端消息会在删除本地消息的基础上，同步删除云端存储的消息，且无法恢复。 如果删除的是最后一条消息，会话的 lastMessage 会变为前一条消息。 删除本地消息 您可以调用 deleteMessageFromLocalStorage (dart) 删除本地消息。 说明： 该接口只能删除本地历史，消息删除后，SDK 会在本地把这条消息标记为已删除状态，调用 getHistoryMessage 不能再拉取到。 如果程序卸载重装，本地会失去对这条消息的删除标记，调用 getHistoryMessage 还能再拉取到该条消息。 示例代码如下： TencentImSDKPlugin.v2TIMManager.getMessageManager().deleteMessageFromLocalStorage(msgID: \"\"); 删除云端存储的消息 您可以调用 deleteMessages (dart) 删除云端存储的消息。 该接口会在删除本地消息的基础上，同步删除云端存储的消息，且无法恢复。 说明： 每次调用，最多只能删除 30 条消息。 每次调用，待删除的消息必须属于同一会话。 1 秒钟最多只能调用 1 次该接口。 如果一个账号在某设备上拉取过这些消息，那么调用该接口删除云端消息后，这些消息仍然会保存在该设备上，即删除消息不支持多端同步。 示例代码如下： TencentImSDKPlugin.v2TIMManager.getMessageManager().deleteMessages(msgIDs: ['messageid']); 交流与反馈 欢迎加入 QQ 群进行技术交流和反馈问题，QQ 群：788910197。 "},"kuai-su-ji-cheng/zi-shi-xian-ui/xiao-xi-xiang-guan/qing-kong-xiao-xi.html":{"url":"kuai-su-ji-cheng/zi-shi-xian-ui/xiao-xi-xiang-guan/qing-kong-xiao-xi.html","title":"清空消息","keywords":"","body":"功能描述 清空消息分为两种：清空单聊消息、清空群聊消息。 清空消息会同时清空当前会话内所有的消息，包含本地和云端消息，但不会删除会话本身。 说明： 如果不想清空云端消息，请不要使用本接口。 如果删除的是最后一条消息，会话的 lastMessage 会变为前一条消息。 清空单聊消息 您可以调用 clearC2CHistoryMessage (dart) 清空单聊消息。 示例代码如下： TencentImSDKPlugin.v2TIMManager.getMessageManager().clearC2CHistoryMessage(userID: \"userid\"); 清空群聊消息 您可以调用 clearGroupHistoryMessage (dart) 清空群聊消息。 示例代码如下： TencentImSDKPlugin.v2TIMManager.getMessageManager().clearGroupHistoryMessage(groupID: \"\"); 交流与反馈 欢迎加入 QQ 群进行技术交流和反馈问题，QQ 群：788910197。 "},"kuai-su-ji-cheng/zi-shi-xian-ui/xiao-xi-xiang-guan/che-hui-xiao-xi.html":{"url":"kuai-su-ji-cheng/zi-shi-xian-ui/xiao-xi-xiang-guan/che-hui-xiao-xi.html","title":"撤回消息","keywords":"","body":"功能描述 撤回消息方法在核心类 TencentImSDKPlugin.v2TIMManager.getMessageManager() 中。 通过 addAdvancedMsgListener 监听消息撤回通知。 撤回消息 发送方可以撤回一条已经发送成功的消息。 默认情况下，发送者只能撤回2分钟以内的消息，您可以按需更改消息撤回时间限制，具体操作请参见 消息撤回设置。 消息的撤回同时需要接收方 UI 代码的配合：当发送方撤回一条消息后，接收方会收到消息撤回通知 onRecvMessageRevoked。通知中包含了撤回消息的 msgID，您可以根据这个 msgID 判断 UI 层是哪一条消息撤回了，然后把对应的消息气泡切换成 \"消息已被撤回\" 状态。 发送方撤回一条消息 调用 revokeMessage (dart) 撤回一条消息。 示例代码如下： V2TimCallback revokeMessage = await TencentImSDKPlugin.v2TIMManager.getMessageManager().revokeMessage(msgID: \"\"); 接收方感知消息被撤回 调用 addAdvancedMsgListener (dart) 设置高级消息监听。 通过 onRecvMessageRevoked (dart) 接收消息撤回通知。 示例代码如下： onRecvMessageRevoked: (String messageid) { // 在本地维护的消息中处理被对方撤回的消息 }, 交流与反馈 欢迎加入 QQ 群进行技术交流和反馈问题，QQ 群：788910197。 "},"kuai-su-ji-cheng/zi-shi-xian-ui/xiao-xi-xiang-guan/zai-xian-xiao-xi.html":{"url":"kuai-su-ji-cheng/zi-shi-xian-ui/xiao-xi-xiang-guan/zai-xian-xiao-xi.html","title":"在线消息","keywords":"","body":"功能描述 某些场景下，您可能希望发出去的消息只被在线用户接收，即当接收者不在线时就不会感知到该消息。您只需在 sendMessage 时，将参数 onlineUserOnly 设置为 true，此时发送出去的消息跟普通消息相比，会有如下差异点： 不支持离线存储，即如果接收方不在线就无法收到。 不支持多端漫游，即如果接收方在一台终端设备上一旦接收过该消息，无论是否已读，都不会在另一台终端上再次收到。 不支持本地存储，即本地的、云端的历史消息中均无法找回。 经典示例 实现“对方正在输入”功能 在 C2C 单聊场景下，您可以通过 sendMessage (dart) 接口发送 \"自己正在输入\" 的提示性消息，接收方收到该消息时可以在 UI 界面展示 \"对方正在输入\"， 示例代码如下： V2TimValueCallback createCustomMessageRes = await TencentImSDKPlugin.v2TIMManager .getMessageManager() .createCustomMessage( data: '正在输入中', ); TencentImSDKPlugin.v2TIMManager.getMessageManager().sendMessage(id: createCustomMessageRes.data.id, receiver: \"\", groupID: \"\",onlineUserOnly: true); 交流与反馈 欢迎加入 QQ 群进行技术交流和反馈问题，QQ 群：788910197。 "},"kuai-su-ji-cheng/zi-shi-xian-ui/xiao-xi-xiang-guan/yi-du-hui-zhi.html":{"url":"kuai-su-ji-cheng/zi-shi-xian-ui/xiao-xi-xiang-guan/yi-du-hui-zhi.html","title":"已读回执","keywords":"","body":"功能描述 消息已读回执指的是，发送端往会话中发送消息，如果他想知道哪些人读过/还没读过这条消息，那么他就需要开启消息已读回执功能。 开启后，发送端发送消息时可以设置消息是否需要已读回执。如果设置为“需要”，接收端查看消息后才会发送自己已读给发送端。 单聊和群聊均支持消息已读回执功能，操作步骤一致。 说明： 该功能需要购买旗舰版套餐包，购买 旗舰版套餐包 后可使用。 群已读回执仅Flutter3.8.0版本支持。 消息已读回执 设置支持已读回执的群类型 如果是群消息已读回执，需要先在 即时通信 IM 控制台 >功能配置>登录与消息>群已读消息回执配置 中设置支持已读回执消息的群类型。 发送端设置消息需要已读回执 发送端创建消息后，先通过消息对象 V2TimMessage 的 needReadReceipt(dart) 字段设置消息需要已读回执，再发送消息到会话中。 示例代码如下： V2TimValueCallback createCustomMessageRes = await TencentImSDKPlugin.v2TIMManager .getMessageManager() .createCustomMessage( data: '正在输入中', ); // 发送消息时，需要把needReadReceipt设置为true TencentImSDKPlugin.v2TIMManager.getMessageManager().sendMessage(id: createCustomMessageRes.data.id, receiver: \"\", groupID: \"groupID\",onlineUserOnly: true,needReadReceipt: true); 接收端发送消息已读回执 接收端收到消息后，可以通过消息对象 V2TIMMessage 的 needReadReceipt(dart) 字段判断消息是否需要已读回执，如果需要已读回执，当用户查看消息后，调用 sendMessageReadReceipts(dart) 接口发送消息已读回执。 示例代码如下： V2TimCallback sendMessageReadReceipts = await TencentImSDKPlugin.v2TIMManager.getMessageManager().sendMessageReadReceipts(messageIDList: ['msgids']); if(sendMessageReadReceipts.code == 0){ // 成功 }else{ // 失败 } 发送端监听消息已读回执通知 接收端发送消息已读回执后，发送端可以通过 V2TimAdvancedMsgListener 的 onRecvMessageReadReceipts(dart) 回调监听消息已读回执通知，在通知中更新 UI，例如更新为 “2 人已读”。 示例代码如下： onRecvMessageReadReceipts: (List receiptList) { receiptList.forEach((element) { element.groupID; // 群id element.msgID; // 已读回执消息 ID element.readCount;// 群消息最新已读数 element.unreadCount;// 群消息最新未读数 element.userID; // C2C 消息对方 ID }); }, 发送端主动拉取消息已读回执信息 发送端从其他界面进入消息列表后，先拉取历史消息，再调用 getMessageReadReceipts(dart) 接口拉取消息已读回执信息。 其中已读回执信息 V2TimessageReceipt 字段含义如下： 属性 含义 说明 msgID 消息 ID 消息唯一 ID userID 对端用户 ID 如果是单聊，该字段表示对端用户 ID timestamp 对端用户标记会话已读时间 该字段在消息已读场景无效，如果是单聊，当对端用户调用 markC2CMessageAsRead 接口标记会话已读时，自己会收到的 onRecvC2CReadReceipt 回调，回调里会携带 timestamp 信息 groupID 群组 ID 如果是群聊，该字段为群组 ID readCount 群消息已读人数 如果是群聊，该字段为群消息已读人数 unreadCount 群消息未读人数 如果是群聊，该字段为群消息未读人数 示例代码如下： V2TimValueCallback> getMessageReadReceipts = await TencentImSDKPlugin.v2TIMManager.getMessageManager().getMessageReadReceipts(messageIDList: []); if(getMessageReadReceipts.code == 0){ getMessageReadReceipts.data.forEach((element) { // 解析群消息已读回执 element.groupID; element.msgID; element.readCount; element.timestamp; element.unreadCount; element.userID; }); } 发送端主动拉取群消息已读或未读成员列表 发送端在需要查看群消息已读或未读成员列表时，可以调用 getGroupMessageReadMemberList(dart) 接口分页拉取消息已读或未读群成员列表。 V2TimValueCallback getGroupMessageReadMemberList = await TencentImSDKPlugin.v2TIMManager.getMessageManager().getGroupMessageReadMemberList(messageID: \"\", filter: GetGroupMessageReadMemberListFilter.V2TIM_GROUP_MESSAGE_READ_MEMBERS_FILTER_READ,); if(getGroupMessageReadMemberList.code == 0){ // 获取群消息已读未读群成员列表 getGroupMessageReadMemberList.data.isFinished; getGroupMessageReadMemberList.data.memberInfoList; getGroupMessageReadMemberList.data.nextSeq; } 交流与反馈 欢迎加入 QQ 群进行技术交流和反馈问题，QQ 群：788910197。 "},"kuai-su-ji-cheng/zi-shi-xian-ui/xiao-xi-xiang-guan/cha-xun-xiao-xi.html":{"url":"kuai-su-ji-cheng/zi-shi-xian-ui/xiao-xi-xiang-guan/cha-xun-xiao-xi.html","title":"查询消息","keywords":"","body":""},"kuai-su-ji-cheng/zi-shi-xian-ui/xiao-xi-xiang-guan/qun-@-xiao-xi.html":{"url":"kuai-su-ji-cheng/zi-shi-xian-ui/xiao-xi-xiang-guan/qun-@-xiao-xi.html","title":"群 @ 消息","keywords":"","body":"功能描述 群 @ 消息就是发送方监听输入栏里的输入字符，当用户输入 @ 字符后，弹出群成员选择界面。选择完需要 @ 的成员后以 “@A @B @C......” 形式显示在输入框，并可以继续编辑消息内容，完成消息发送。 接收方会在会话界面的群聊天列表，重点显示 “有人@我” 或者“@所有人” 标识，提醒用户有人在群里 @ 自己了。 说明： 目前仅支持文本 @ 消息。 功能演示 监听 @ 字符选择群成员 编辑群 @ 消息发送 收到群 @ 消息 图一：在聊天界面监听到输入框输入 \"@\" 字符后，可以跳转到群成员选择界面，选择需要 @ 的群成员。 图二：在群成员选择完成后，重新返回聊天界面，继续编辑群 @ 消息发送。 图三：如果有消息 @ 我，自己会收到会话更新，可以在会话 Cell 展示 “有人@我” 信息。 发送群 @ 消息 发送方监听聊天界面的文本输入框，启动群成员选择界面。选择完成后回传选择群成员的 ID 和昵称信息，ID 用来构建消息对象 V2TimMessage，昵称用来在文本框显示。 发送方调用 createTextAtMessage (dart) 接口创建一条 @ 文本消息，拿到消息对象 V2TIMMessage，并在其中指定需要 @ 的成员。 发送方调用 sendMessage (dart) 接口将刚才创建的 @ 消息对象发送出去。 示例代码如下： // 创建群@消息 TencentImSDKPlugin.v2TIMManager.getMessageManager().createTextAtMessage(text: \"123\", atUserList: ['user1','user2','all']); // 发送群@消息 TencentImSDKPlugin.v2TIMManager.getMessageManager().sendMessage( id: id, receiver: \"\", groupID: \"\", ); 接收群 @ 消息 在加载和更新会话处，需要调用 V2TimConversation 的 groupAtInfolist (dart) 接口获取会话的 @ 数据列表。 通过列表中 V2TimGroupAtInfo 对象的 atType (dart) 接口获取 @ 数据类型，并更新到当前会话的 @ 信息。 示例代码如下： V2TimValueCallback getConversationList = await TencentImSDKPlugin.v2TIMManager.getConversationManager().getConversationList(nextSeq: \"\", count: 10); if(getConversationList.code == 0){ getConversationList.data.conversationList.forEach((element) { element.groupAtInfoList.forEach((element) { if(element.atType == 0){ // @我 } if(element.atType == 1){ // @all } if(element.atType == 2){ // @all&@我 } }); }); } 交流与反馈 欢迎加入 QQ 群进行技术交流和反馈问题，QQ 群：788910197。 "},"kuai-su-ji-cheng/zi-shi-xian-ui/xiao-xi-xiang-guan/qun-ding-xiang-xiao-xi.html":{"url":"kuai-su-ji-cheng/zi-shi-xian-ui/xiao-xi-xiang-guan/qun-ding-xiang-xiao-xi.html","title":"群定向消息","keywords":"","body":"功能描述 群定向消息是指向群内部分成员发送消息，而其他群成员无法收到该消息。 说明： 仅Flutter sdk 3.8.0 及以上版本支持。 该功能需要购买旗舰版套餐包。 创建定向群消息的原始消息对象不支持群 @ 消息。 社群（Community）和直播群（AVChatRoom）不支持发送定向群消息。 定向群消息默认不计入群会话的未读计数。 发送群定向消息 定向消息是指，向群内部分指定的成员发送消息，而未被指定的群成员无法收到该消息。可以按照下面的方式实现： 调用 createXXXMessage (其中 XXX 表示具体的消息类型) 接口创建一条原始消息对象 V2TIMMessage。 调用 createTargetedGroupMessage (dart) 接口根据原始消息对象创建定向消息对象 V2TimMessage，并指定消息接收成员列表。 调用 sendMessage 接口发送定向消息。 示例代码如下： // 先创建消息 V2TimValueCallback target = await TencentImSDKPlugin.v2TIMManager.getMessageManager().createTextMessage(text: \"\"); // 获取消息的发送id String id = target.data.id; // 创建定向消息 V2TimValueCallback groupTarget = await TencentImSDKPlugin.v2TIMManager.getMessageManager().createTargetedGroupMessage(id: id, receiverList: ['user1','user2'],); // 发送消息 TencentImSDKPlugin.v2TIMManager.getMessageManager().sendMessage(id: groupTarget.data.id, receiver: \"\", groupID: \"groupID\"); 接收群定向消息 定向群消息默认不计入群会话的未读计数。 接收群定向消息跟接收普通消息是一样的操作步骤，参考 接收消息。 交流与反馈 欢迎加入 QQ 群进行技术交流和反馈问题，QQ 群：788910197。 "},"kuai-su-ji-cheng/zi-shi-xian-ui/xiao-xi-xiang-guan/xiao-xi-mian-da-rao.html":{"url":"kuai-su-ji-cheng/zi-shi-xian-ui/xiao-xi-xiang-guan/xiao-xi-mian-da-rao.html","title":"消息免打扰","keywords":"","body":"功能描述 通过设置单聊和群聊的消息接收选项，可以实现类似“微信”或者“QQ”中消息免打扰的功能。 IM SDK 支持三种类型的消息接收选项，消息接收选项在 V2TIMReceiveMessageOpt 中定义： 消息接收选项 功能描述 ReceiveMsgOptEnum.V2TIM_RECEIVE_MESSAGE 在线时正常接收消息，离线时接收离线推送通知 ReceiveMsgOptEnum.V2TIM_NOT_RECEIVE_MESSAGE 在线和离线都不接收消息 ReceiveMsgOptEnum.V2TIM_RECEIVE_NOT_NOTIFY_MESSAGE 在线时正常接收消息，离线时不接收离线推送通知 使用不同的 V2TIMReceiveMessageOpt 可以实现群消息免打扰： 完全不接收消息 消息接收选项设置为 V2TIM_NOT_RECEIVE_MESSAGE 后，单聊/群聊的任何消息都收不到，会话列表也不会更新。 接收消息但不提醒，在会话列表界面显示小圆点（不显示未读数） 消息接收选项设置为 V2TIM_RECEIVE_NOT_NOTIFY_MESSAGE。 当单聊/群聊收到新消息，会话列表需要更新时，可以通过会话 V2TIMConversation 中的 unreadCount (dart) 获取到消息未读数。 根据 V2TIMConversation 的 recvOpt (dart) 判断获取到的消息接收选项为 V2TIM_RECEIVE_NOT_NOTIFY_MESSAGE 时显示小红点而非消息未读数。 说明： 此方式需使用未读计数功能，因此仅适用于好友工作群（Work）和陌生人社交群（Public）。群组类型详见 群组介绍。 设置单聊的消息接收选项 通过调用 setC2CReceiveMessageOpt(dart) 接口，设置单聊的消息接收选项。 您可以通过参数 userIDList 设置一批用户，但一次最大允许设置 30 个用户。 警告： 该接口调用频率被限制为 1 秒内最多调用 5 次。 示例代码如下： // 设置在线和离线都不接收消息 TencentImSDKPlugin.v2TIMManager.getMessageManager().setC2CReceiveMessageOpt(userIDList: ['user1','user2'], opt: ReceiveMsgOptEnum.V2TIM_NOT_RECEIVE_MESSAGE); 获取单聊的消息接收选项 通过调用 getC2CReceiveMessageOpt(dart) 接口，获取单聊的消息接收选项。 示例代码如下： V2TimValueCallback> messageOpt = await TencentImSDKPlugin.v2TIMManager.getMessageManager().getC2CReceiveMessageOpt(userIDList: ['user1','user2']); messageOpt.data.forEach((element) { // 接收消息选项 element.c2CReceiveMessageOpt; element.userID; }); 设置群聊的消息接收选项 通过调用 setGroupReceiveMessageOpt(dart) 接口，设置群聊的消息接收选项。 示例代码如下： TencentImSDKPlugin.v2TIMManager.getMessageManager().setGroupReceiveMessageOpt(groupID: \"groupID\", opt: ReceiveMsgOptEnum.V2TIM_NOT_RECEIVE_MESSAGE); 获取群聊的消息接收选项 通过调用 getGroupsInfo(dart) 接口，获得群资料 V2TIMGroupInfo 对象列表，对象的 recvOpt 字段表示群组的消息接收选项。 示例代码如下： V2TimValueCallback> groups = await TencentImSDKPlugin.v2TIMManager.getGroupManager().getGroupsInfo(groupIDList: ['groupID']); groups.data.forEach((element) { // 获取群组的接收消息选项 element.groupInfo.recvOpt; }); 交流与反馈 欢迎加入 QQ 群进行技术交流和反馈问题，QQ 群：788910197。 "},"kuai-su-ji-cheng/zi-shi-xian-ui/hui-hua-xiang-guan/":{"url":"kuai-su-ji-cheng/zi-shi-xian-ui/hui-hua-xiang-guan/","title":"会话相关","keywords":"","body":""},"kuai-su-ji-cheng/zi-shi-xian-ui/hui-hua-xiang-guan/hui-hua-jie-shao.html":{"url":"kuai-su-ji-cheng/zi-shi-xian-ui/hui-hua-xiang-guan/hui-hua-jie-shao.html","title":"会话介绍","keywords":"","body":"会话介绍 当用户创建了一个单聊或群聊，对应的会话就随之创建。 在腾讯云 IM SDK 中，会话类为 TencentImSDKPlugin.v2TIMManager.getConversationManager()。您可以使用会话管理类中的 API 实现会话列表展示/更新、会话未读数更新、置顶会话、会话草稿、会话免打扰等功能。 会话类介绍 会话类为 V2TIMConversation (dart)。V2TIMConversation 定义了以下内容： 属性 含义 说明 type 会话类型 参考 V2TIMConversationType 定义。分为 C2C（单聊）和 Group（群聊）。 conversationID 会话唯一 ID 如果是单聊，组成方式为 c2c_userID；如果是群聊，组成方式为 group_groupID。 userID 对方用户 ID 如果会话类型为单聊，userID 会存储对方的用户 ID，否则为 nil/null。 groupID 当前群聊 ID 如果会话类型为群聊，groupID 会存储当前群的群 ID，否则为 nil/null。 groupType 当前群聊类型 如果会话类型为群聊，groupType 为当前群类型，否则为 nil/null。 showName 会话展示名称 群聊会话名称优先级：群名称 > 群 ID；单聊会话名称优先级：对方好友备注 > 对方昵称 > 对方的 userID。 faceUrl 会话展示头像 群聊头像：群头像；单聊头像：对方头像。 unreadCount 会话未读消息数 具体使用请参考 会话未读数。直播群（AVChatRoom）不支持未读计数，默认为 0。 recvOpt 消息接收选项 参考 V2TIMReceiveMessageOpt 定义。具体使用请参考 免打扰。 lastMessage 会话最后一条消息 具体使用请参考 会话列表。 groupAtInfolist 群会话 @ 信息列表 通常用于展示 “有人@我” 或 “@所有人” 这两种提醒状态。 draftText 草稿信息 设置草稿信息请调用 setConversationDraft 接口，具体实现请参考 会话草稿。 draftTimestamp 草稿编辑时间 草稿设置的时候自动生成。 isPinned 会话是否置顶 具体使用请参考 置顶会话。 orderKey 会话排序字段 具体使用请参考 会话列表。 会话存储策略 本地存储的会话列表没有数量上限。 云端存储的会话列表最大数量为 100。如果您希望扩展此数量，可以升级旗舰版。旗舰版用户可以在控制台配置最高数量为 500。 云端存储的会话列表最大数量为 100。如果您希望扩展此数量，可以升级旗舰版。旗舰版用户可以在控制台配置最高数量为 500，配置页面如下图所示： 如果一个会话长时间没有信息变更，该会话在云端最多保存 7 天。如需放宽限制，请 联系我们。 本地存储的会话和云端存储的会话并不总是一致的，如果用户不主动调用 deleteConversation 接口删除本地的会话，该会话就会一直存在。而云端存储的会话最大只会保存 100 条，且对于长时间没有信息变更的会话，云端最多保存 7 天，所以不同的终端本地显示的会话可能会不一样。 "},"kuai-su-ji-cheng/zi-shi-xian-ui/hui-hua-xiang-guan/hui-hua-lie-biao.html":{"url":"kuai-su-ji-cheng/zi-shi-xian-ui/hui-hua-xiang-guan/hui-hua-lie-biao.html","title":"会话列表","keywords":"","body":"功能描述 用户在登录 App 后，可以像微信或 QQ 那样展示最近会话列表，方便找到目标会话。 会话列表如下图所示： 会话列表功能主要分为获取会话列表、处理会话列表更新。 本文将为您介绍具体的实现细节。 获取会话列表 您可以调用 getConversationList(dart) 获取会话列表。该接口拉取的是本地缓存的会话，如果服务器会话有更新，SDK 内部会自动同步，然后在 V2TIMConversationListener 回调告知客户。 用户的会话以列表的形式返回，列表中存储的是 V2TIMConversation 对象。目前 IM SDK 对会话列表的排序规则为： Flutter sdk 3.8.0及以后版本, 该接口获取的会话列表默认已经按照会话对象的 orderKey 做了排序。orderKey 值越大，代表该会话排序越靠前。orderKey 字段是整型数，当发送新消息、接收新消息、设置草稿或置顶会话时，会话被激活，orderKey 字段会增大。 Flutter sdk 3.8.0 以前版本，该接口获取的会话列表默认已经按照会话 lastMessage -> timestamp 做了排序。timestamp 越大，会话越靠前。 注意： 在某些场景下，可能出现会话的 lastMessage 为空（例如清空会话消息）。如果您使用 5.5.892 以前的 SDK，使用 lastMessage 排序时需要额外处理这种异常。我们建议您升级到 5.5.892 及以后的版本，使用 orderKey 字段排序。 您可以使用 getConversationList 实现一次性拉取或分页拉取。参考下文说明。 一次性拉取 一次性拉取适合会话数量比较少的情况（100 个以内）。此时可以将拉取的 count 设置为 INT_MAX（一般会话数量不会达到 INT_MAX 这么多）。 示例代码如下： V2TimValueCallback convList = await TencentImSDKPlugin.v2TIMManager.getConversationManager().getConversationList(nextSeq: '0',count: 100); 分页拉取 如果您的应用场景会产生较多的会话数，考虑到加载效率、网络省流，我们建议您采用分页拉取的方式。每次分页拉取的数量建议不超过 100 个。 分页拉取的步骤： 首次调用 getConversationList 时，指定参数 nextSeq 为 0（表示从头开始拉取会话列表），指定 count 为 50（表示一次拉取 50 个会话对象）。 首次拉取会话列表成功后，getConversationList 的回调结果 V2TIMConversationResult 中会包含 nextSeq（下次分页拉取的字段）、isFinish（会话拉取是否完成）。 如果 isFinished 为 true，表示所有会话已经拉取完成。 如果 isFinished 为 false，表示还有更多的会话可以拉取。此时并不意味着要立刻开始拉取 “下一页” 的会话列表。在常见的通信软件中，分页拉取通常由用户的滑动操作触发的，用户每上拉一次会话列表就触发一次分页拉取。 当用户继续上拉会话列表时，如果还有更多的会话可以拉取，可以继续调用 getConversationList 接口，并传入新一轮的 nextSeq 和 count 参数（数值来自上一次拉取返回的 V2TIMConversationResult 对象）。 重复执行【步骤 3】直至 isFinished 返回 true。 示例代码如下： V2TimValueCallback convList = await TencentImSDKPlugin.v2TIMManager.getConversationManager().getConversationList(nextSeq: '0',count: 100); var seq = convList.data.nextSeq; if(!convList.data.isFinished){ // 如果未完全拉取 V2TimValueCallback convList = await TencentImSDKPlugin.v2TIMManager.getConversationManager().getConversationList(nextSeq: seq,count: 100); } 会话列表更新 IM SDK 会在登录成功后、用户上线后、以及断线重连后，自动更新会话列表。 为了获取会话列表的更新，您需要操作如下几步： 添加会话监听器。 接收会话变更通知并处理。 移除会话监听器。非必须，可按照业务逻辑按需调用。 添加会话监听器 您可以调用 addConversationListener(dart) 添加会话监听器。添加监听器后，您才能接收到会话变更事件。 示例代码如下： TencentImSDKPlugin.v2TIMManager.getConversationManager().addConversationListener(listener: V2TimConversationListener(onConversationChanged: (conversationList) { }, //其他 )); 会话新增变更通知 您可以在 V2TIMConversationListener(Android / iOS & Mac) 中的事件，获取会话列表变更的通知。 目前 IM SDK 支持的会话变更事件有： 事件 说明 建议 onSyncServerStart 同步服务器会话开始 SDK 会在登录成功或者断网重连后自动同步服务器会话，您可以监听这个事件做一些 UI 进度展示操作。 onSyncServerFinish 同步服务器会话完成 如果会话有变更，会通过 onNewConversation/onConversationChanged 回调告知。 onSyncServerFailed 同步服务器会话失败 您可以监听这个事件做一些 UI 异常展示操作。 onNewConversation 有会话新增 例如收到一个新同事发来的单聊消息、被拉入了一个新的群组中，此时可以重新对会话列表做排序。 onConversationChanged 有会话更新 例如未读计数发生变化、最后一条消息被更新等，此时可以重新对会话列表做排序。 onTotalUnreadMessageCountChanged 会话未读总数变更通知 详情请参考 会话未读数。 说明： 为保证会话列表顺序符合最后一条消息的排序原则，每次会话变更/新增后，您需要对数据源重新排序。 如果您使用 Flutter sdk 3.8.0 以前的版本，可以使用 lastMessage 排序，但是需要注意处理 lastMessage 为空（例如清空会话消息）的情况。 如果您使用 Flutter sdk 3.8.0 及以后的版本，使用 orderKey 字段排序。 我们强烈建议您升级到 Flutter sdk 3.8.0 及以后版本。 示例代码如下： // 监听会话 TencentImSDKPlugin.v2TIMManager.getConversationManager().addConversationListener(listener: V2TimConversationListener(onConversationChanged: (conversationList) { }, onNewConversation: (conv){}, onSyncServerFailed: (){}, onSyncServerFinish: (){}, onSyncServerStart: (){}, onTotalUnreadMessageCountChanged: (count){} )); 移除会话监听器 您可以调用 removeConversationListener(dart) 移除会话监听器。移除后，您将无法再接收到会话变更事件。 该步骤不是必须的，您可以按照自己的业务逻辑按需调用。 示例代码如下： conversationManager.removeConversationListener(conversationListener); 发送不更新 lastMessage 的消息 会话列表界面，通常需要展示每个会话的最新一条消息预览及发送时间，此时您可以使用 V2TIMConversation 的 lastMessage 作为数据源实现。但是某些场景下，如果您不希望一些消息（例如系统提示等）显示为会话的最新消息，可以在 sendMessage 时设置 isExcludedFromLastMessage 为 false/no。 发送消息参考 发送消息。 说明： isExcludedFromLastMessage 仅Flutter SDK 4.0.0 及以上版本支持。 交流与反馈 欢迎加入 QQ 群进行技术交流和反馈问题，QQ 群：788910197。 "},"kuai-su-ji-cheng/zi-shi-xian-ui/hui-hua-xiang-guan/huo-qu-hui-hua.html":{"url":"kuai-su-ji-cheng/zi-shi-xian-ui/hui-hua-xiang-guan/huo-qu-hui-hua.html","title":"获取会话","keywords":"","body":"功能描述 IM SDK 提供获取会话的接口，可以获取指定的单个、多个会话的 V2TimConversation 对象信息。 获取指定的单个会话 您可以调用 getConversation(dart) 获取单个会话的信息，它是一个 V2TimConversation 对象。 示例代码如下： V2TimValueCallback conv = await conversationManager.getConversation(conversationID: \"conversationID\"); 获取指定的多个会话 getConversationList(dart) 获取指定的会话列表，列表中存储的是 V2TimConversation 对象。 示例代码如下： V2TimValueCallback convList = await conversationManager.getConversationList(nextSeq: '', count: 10); 交流与反馈 欢迎加入 QQ 群进行技术交流和反馈问题，QQ 群：788910197。 "},"kuai-su-ji-cheng/zi-shi-xian-ui/hui-hua-xiang-guan/hui-hua-wei-du-shu.html":{"url":"kuai-su-ji-cheng/zi-shi-xian-ui/hui-hua-xiang-guan/hui-hua-wei-du-shu.html","title":"会话未读数","keywords":"","body":"功能描述 用户的会话列表中一般会有若干个会话，如果某个会话收到了新消息，通常需要在列表的 cell 中以小红点或者数字角标的方式，向用户展示该会话的未读消息数，提醒用户尚未阅读。 用户点击进入该会话后退回到会话列表，未读消息数被清空，小红点消失。 部分应用还会统计所有会话的未读消息总数之和，将其展示在会话列表的底部 tab 上。 本文将向您介绍如何实现会话未读消息提醒功能。 获取所有会话未读消息总数 通常情况下，如果想得到所有会话的未读消息总数，可以遍历会话列表得到每个会话的信息 V2TimConversation，然后再把所有的 V2TimConversation 的 unreadCount 相加起来，展示在 UI 上。 但 IM SDK 为您提供了直接查询所有会话未读消息总数的 API getTotalUnreadMessageCount。 当会话的未读总数发生变更时，SDK 还会主动通过回调 onTotalUnreadMessageCountChanged，将最新的未读总数通知给您。 说明： 获取所有会话未读消息总数Flutter SDK 3.0.0. 及以上版本支持。 具体的操作步骤如下文所示。 获取未读总数 您可以调用 getTotalUnreadMessageCount(dart) 获取所有会话的未读消息总数，获取成功后可以使用其更新 UI。 示例代码如下： // 获取全部未读数 V2TimValueCallback unread = await conversationManager.getTotalUnreadMessageCount(); 未读总数变更通知 您可以调用 addConversationListener(dart) 添加会话监听器。添加监听器后，才能接收到未读总数变更通知。 您可以在 V2TIMConversationListener 中的 onTotalUnreadMessageCountChanged(dart) 中，获取变更后的未读总数。 示例代码如下： conversationManager.addConversationListener(listener: V2TimConversationListener(onTotalUnreadMessageCountChanged: (totalUnreadCount) { // 最新的未读数 },)); 清空会话未读消息数 用户点击进入会话后退回到会话列表，需要清除未读消息数。清除后，会话列表的小红点或数字角标需要随之消失。 IM SDK 针对待清空会话未读数的不同会话类型，提供了 3 个 API： 清空单聊会话未读消息数 markC2CMessageAsRead。 清空群聊会话未读消息数 markGroupMessageAsRead。 清空全部会话未读消息数 markAllMessageAsRead。 具体的操作步骤如下文所示。 说明： 清空会话未读消息数功能仅增强版 5.8.1668 及以上版本支持。 单聊 您可以调用 markC2CMessageAsRead(dart) 清空指定单聊会话的未读消息数。 示例代码如下： TencentImSDKPlugin.v2TIMManager.getMessageManager().markC2CMessageAsRead(userID: \"userID\"); 当 markC2CMessageAsRead 调用成功后： 如果调用者事先调用 addConversationListener 添加了会话监听器，会收到 onConversationChanged 回调，可以在此回调中更新 UI。 对端会收到 onRecvC2CReadReceipt 回调，回调里面会携带清空会话未读数的时间戳。 示例代码如下： // 自己 conversationManager.addConversationListener(listener: V2TimConversationListener(,onConversationChanged: (conversationList) { // 变更后的最新会话 },)); // 对端 TencentImSDKPlugin.v2TIMManager.getMessageManager().addAdvancedMsgListener(listener: V2TimAdvancedMsgListener(onRecvC2CReadReceipt: (receiptList) { // 消息被对方已读 },)); 群聊 您可以调用 markGroupMessageAsRead(dart) 清空指定群聊会话的未读消息数。 示例代码如下： TencentImSDKPlugin.v2TIMManager.getMessageManager().markGroupMessageAsRead(groupID: \"groupID\"); 当 markGroupMessageAsRead 调用成功后，如果调用者事先调用 addConversationListener 添加了会话监听器，会收到 onConversationChanged 回调，可以在此回调中更新 UI。 示例代码如下： conversationManager.addConversationListener(listener: V2TimConversationListener(,onConversationChanged: (conversationList) { // 变更后的最新会话 },)); 所有会话 您可以调用 markAllMessageAsRead(dart) 清空所有会话的未读消息数。 示例代码如下： TencentImSDKPlugin.v2TIMManager.getMessageManager().markAllMessageAsRead(); 当 markAllMessageAsRead 调用成功后，如果调用者事先调用 addConversationListener 添加了会话监听器，会收到 onConversationChanged 回调，可以在此回调中更新 UI。 示例代码如下： conversationManager.addConversationListener(listener: V2TimConversationListener(,onConversationChanged: (conversationList) { // 变更后的最新会话 },)); 交流与反馈 欢迎加入 QQ 群进行技术交流和反馈问题，QQ 群：788910197。 "},"kuai-su-ji-cheng/zi-shi-xian-ui/hui-hua-xiang-guan/zhi-ding-hui-hua.html":{"url":"kuai-su-ji-cheng/zi-shi-xian-ui/hui-hua-xiang-guan/zhi-ding-hui-hua.html","title":"置顶会话","keywords":"","body":"功能描述 会话置顶，指的是把好友或者群会话固定在会话列表的最前面，方便用户查找。置顶状态会存储在服务器，切换终端设备后，置顶状态会同步到新设备上。 置顶会话 您可以调用 pinConversation(dart) 接口，设置是否置顶会话。 会话的顺序，按V2TimConversation 对象的 orderKey 字段排序。orderKey 字段是整型数，当发送新消息、接收新消息、设置草稿或置顶会话时，会话被激活，orderKey 字段会增大。 需要注意的是，被置顶会话始终排在非置顶会话的前面，如果同时置顶多个会话，这几个会话之间的相对顺序仍然会保持，例如，有 5 个依次排序的会话 1、2、3、4、5，同时置顶会话 2 和 3，置顶后的顺序是 2、3、1、4、5，显然，会话 2 和 3 排在最前面，并且会话 2 仍然排在 3 的前面。 调用 getConversationList 获取会话列表时，该接口会先返回置顶的会话，再返回未置顶的会话。您可以通过 V2TIMConversation 对象的 isPinned 字段，检查会话有没有置顶。 示例代码如下： // isPinned 参数为 true，表示置顶会话，否则，表示取消置顶。 bool isPinned = true; conversationManager.pinConversation(conversationID: \"conversationID\", isPinned: isPinned); 会话置顶变更通知 如果您事先调用了 addConversationListener(dart) 添加会话监听器，就可以在 onConversationChanged 中获取到 V2TimConversation 对象的 isPinned 字段值。根据这个字段可以判断会话的置顶状态是否变化。 示例代码如下： conversationManager.addConversationListener(listener: V2TimConversationListener(onConversationChanged: (conversationList) { // 变更后的最新会话 },)); 交流与反馈 欢迎加入 QQ 群进行技术交流和反馈问题，QQ 群：788910197。 "},"kuai-su-ji-cheng/zi-shi-xian-ui/hui-hua-xiang-guan/shan-chu-hui-hua.html":{"url":"kuai-su-ji-cheng/zi-shi-xian-ui/hui-hua-xiang-guan/shan-chu-hui-hua.html","title":"删除会话","keywords":"","body":"功能描述 在删除好友或退出群组后，如果不需要查看好友或群会话的历史消息，可以选择删除会话。 警告： 删除会话，会同时删除终端和服务器的历史消息，且无法恢复。 会话删除默认关闭多端同步，可在即时通信 IM 控制台 开启多端同步。 删除会话 通过调用 deleteConversation(dart) 接口，删除指定的会话。 示例代码如下： // 删除指定会话 conversationManager.deleteConversation(conversationID: \"conversationID\"); 交流与反馈 欢迎加入 QQ 群进行技术交流和反馈问题，QQ 群：788910197。 "},"kuai-su-ji-cheng/zi-shi-xian-ui/hui-hua-xiang-guan/hui-hua-cao-gao.html":{"url":"kuai-su-ji-cheng/zi-shi-xian-ui/hui-hua-xiang-guan/hui-hua-cao-gao.html","title":"会话草稿","keywords":"","body":"功能描述 在发送消息时，可能会遇到消息尚未编辑完，就要切换至其它聊天窗口的情况。这些未编辑完的消息可通过 setConversationDraft 接口保存，以便于下次回到这个聊天界面时，通过 V2TIMConversation 对象的 draftText 字段，获取到尚未编辑完的内容，继续编辑。 警告： 草稿仅支持文本内容。 草稿仅在本地保存，不会存储到服务器，因此不能多端同步，程序卸载重装会失效。 设置会话草稿 通过调用 setConversationDraft(dart) 接口，设置会话草稿。 如果这个接口的 draftText 参数为空，表示取消草稿。 示例代码如下： conversationManager.setConversationDraft(conversationID: \"conversationID\",draftText: \"草稿\"); 交流与反馈 欢迎加入 QQ 群进行技术交流和反馈问题，QQ 群：788910197。 "},"kuai-su-ji-cheng/zi-shi-xian-ui/hui-hua-xiang-guan/hui-hua-biao-ji.html":{"url":"kuai-su-ji-cheng/zi-shi-xian-ui/hui-hua-xiang-guan/hui-hua-biao-ji.html","title":"会话标记","keywords":"","body":""},"kuai-su-ji-cheng/zi-shi-xian-ui/hui-hua-xiang-guan/hui-hua-fen-zu.html":{"url":"kuai-su-ji-cheng/zi-shi-xian-ui/hui-hua-xiang-guan/hui-hua-fen-zu.html","title":"会话分组","keywords":"","body":""},"kuai-su-ji-cheng/zi-shi-xian-ui/qun-zu-xiang-guan/":{"url":"kuai-su-ji-cheng/zi-shi-xian-ui/qun-zu-xiang-guan/","title":"群组相关","keywords":"","body":""},"kuai-su-ji-cheng/zi-shi-xian-ui/qun-zu-xiang-guan/qun-zu-jie-shao.html":{"url":"kuai-su-ji-cheng/zi-shi-xian-ui/qun-zu-xiang-guan/qun-zu-jie-shao.html","title":"群组介绍","keywords":"","body":"群组介绍 新版 IM SDK 已全面升级群组类型，升级后的群组类型有 5 种：好友工作群（Work）、陌生人社交群（Public）、临时会议群（Meeting）、社群（Community）和直播群（AVChatRoom）。 旧版和新版 SDK 的群组对应关系为： 旧版群组 新版群组 群组特点 Public Public陌生人社交群 类似 QQ 群，创建后群主可以指定群管理员，用户搜索群 ID 发起加群申请后，需要群主或管理员审批通过才能入群。 Private Work好友工作群 类似普通微信群，创建后仅支持已在群内的好友邀请加群，且无需被邀请方同意或群主审批。 ChatRoom Meeting临时会议群 创建后可以随意进出，支持查看入群前消息；适合于音视频会议场景、在线教育场景等与实时音视频产品结合的场景。 AVChatRoom AVChatRoom直播群 创建后可以随意进出，没有群成员数量上限，不支持历史消息存储；适合与直播产品结合，用于弹幕聊天场景。 —— Community社群 创建后可以随意进出，是娱乐协作新利器，适合用于适用于兴趣交友、游戏社交、粉丝运营、组织管理等超大社区群聊场景。同一社群内，既可划分不同分组、话题，将消息相互区隔，进行分层级沟通；又可容纳超大规模成员，共用一套好友关系，助您摸索出一条独特的社交扩张路径。 说明： 社群（Community）功能仅 SDK 5.8.1668 增强版及以上版本、Web SDK 2.17.0 及以上版本支持，需 购买旗舰版套餐包 并在 控制台 >功能配置>群组配置>群功能配置>社群中开通。 好友工作群（Work）、陌生人社交群（Public）默认不打开拉取入群前消息记录。如需开启此功能，您可以登录 即时通信 IM 控制台 修改相关配置，配置页面路径为： 每种群组类型的功能特性及限制如下表所示： 功能项 好友工作群（Work） 陌生人社交群（Public） 临时会议群（Meeting） 社群（Community） 直播群（AVChatRoom） 可用群成员角色 群主、普通成员 群主、管理员、普通成员 群主、管理员、普通成员 群主、管理员、普通成员 群主、普通成员 是否支持申请加群 不支持 支持，但需要群主或管理员审批 支持，且无需审批 支持，且无需审批 支持，且无需审批 是否支持成员邀请他人加群 支持 不支持 不支持 支持 不支持 是否支持群主退群 支持 不支持 不支持 不支持 不支持 群组资料修改权限 任意群成员均可修改 群主和管理员 群主和管理员 群主和管理员 群主 “踢人”权限 群主可踢人 群主和管理员可踢人，但管理员仅支持踢普通群成员 不支持踢人，可用“禁言”功能达到类似效果 “禁言”权限 不支持禁言 群主和管理员可禁言， 但管理员仅支持禁言普通群成员 群主可禁言 是否支持未读消息计数 支持 支持 不支持 支持 不支持 是否支持查看入群前消息记录 不支持 不支持 支持 支持 不支持 是否支持云端历史消息存储 体验版：7天专业版 ：默认7天，最高支持 增值 延长至360天旗舰版 ：默认30天，最高支持 增值 延长至360天 不支持 群组数量 体验版：最多同时存在100个，已解散的群组不计数专业版或旗舰版：无上限 体验版和专业版：不支持旗舰版：10万个 体验版：最多同时存在10个，已解散的群组不计数专业版：最多同时存在50个，已解散的群组不计数;支持 增值 扩展直播群创建数至无上限旗舰版：无上限 群成员数量 体验版：20人/群专业版 ：默认为200人/群，最高支持 增值 扩展至2000人/群旗舰版 ：默认为2000人/群，最高支持 增值 扩展至6000人/群 10万人 群成员人数无上限 说明： 专业版或旗舰版 SDKAppID 下，所有群类型日净增群组数上限为 1 万个。免费峰值群组数为 10 万个/月，超出免费量将产生 套餐外超量费用。 交流与反馈 欢迎加入 QQ 群进行技术交流和反馈问题。 "},"kuai-su-ji-cheng/zi-shi-xian-ui/qun-zu-xiang-guan/qun-zu-guan-li.html":{"url":"kuai-su-ji-cheng/zi-shi-xian-ui/qun-zu-xiang-guan/qun-zu-guan-li.html","title":"群组管理","keywords":"","body":"功能描述 群组管理功能指的是创建群组、加入群组、获取已加入的群组、退出群组和解散群组等，相关方法在核心类 TencentImSDKPlugin.v2TIMManager.getGroupManager() 中。 群事件监听 下文描述的群组管理功能中，有些会触发群事件通知回调，例如有人进群、有人退群等，这些事件都是由 IM 服务器自动触发的。 您可以调用 addGroupListener (dart) 添加群事件监听器。 当不想再接收群事件时，可调用 removeGroupListener (dart) 移除群事件监听器。 警告： 只有预先设置好群事件监听器，才能正常接收到下文中的各种群事件通知。 示例代码如下： TencentImSDKPlugin.v2TIMManager.setGroupListener(listener: V2TimGroupListener()); 创建群组 如果您想在创建群组的同时初始化群的信息，例如群简介、群头像、以及最初的几个群成员等，可以调用高级接口 createGroup (dart) 实现。创建成功的回调中会抛出 groupID。 示例代码如下： // 创建public群，并指定相关群属性 groupManager.createGroup( groupType: \"Publich\", groupName: \"groupName\", notification: \"\", introduction: \"\", faceUrl: \"\", isAllMuted: false, isSupportTopic: false, addOpt: GroupAddOptTypeEnum.V2TIM_GROUP_ADD_AUTH, memberList: [], ); 加入群组 不同类型的群组，加群的方法不同： 类型 加群方法 好友工作群（Work） 必须由其他群成员邀请 陌生人社交群（Public） 用户申请，群主或管理员审批 临时会议群（Meeting） 用户可随意加入 社群（Community） 用户可随意加入 直播群（AVChatRoom） 用户可随意加入 下面将根据加群流程从简单到复杂进行逐一介绍。 警告： 接收以下群事件需要您按照 群事件监听 中所述，提前调用 addGroupListener 添加群事件监听器。 自由加群 临时会议群（Meeting）、直播群（AVChatRoom）和社群（Community）主要用于满足成员随意进出的交互场景，例如在线会议，秀场直播等。因此这几种类型群的入群流程最为简单: 加群者调用 joinGroup (dart) 加入群组。 加群者加群成功后，全体群成员（包括加群者本人）都会收到 onMemberEnter (dart) 回调。 示例代码如下： // 加入群组 TencentImSDKPlugin.v2TIMManager.joinGroup(groupID: \"groupID\",message: \"hello\",groupType: \"Public\"); // 监听加入群组事件 TencentImSDKPlugin.v2TIMManager.addGroupListener(listener: V2TimGroupListener(onMemberEnter: ((groupID, memberList) { // 获取加入群的人员信息 }))); 邀请加群 好友工作群（Work）类似微信群和企业微信群，适用于工作交流，在交互设计上限制用户主动加入，只能由现有的群成员邀请才能加群。 加群步骤为： 现有的群成员调用 inviteUserToGroup (dart) 邀请另一个用户入群。 全体群成员（包括邀请者自己）会收到 onMemberInvited (dart) 回调。您可以在这个回调中做一些 UI 上的提示。 示例代码如下： // 邀请 userA 用户进入群组 groupA 中 groupManager.inviteUserToGroup(groupID: \"groupID\",userList:[]); // 监听群组邀请事件 TencentImSDKPlugin.v2TIMManager.addGroupListener(listener: V2TimGroupListener(onMemberInvited: ((groupID, opUser, memberList) { // 获取邀请者、被邀请成员信息 }))); 邀请且审批加群 陌生人社交群（Public）类似 QQ 中的各种兴趣群和部落群，任何人都可以申请入群，但需要经过群主或管理员审批才能真正入群。 邀请且审批加群的流程如下： 流程说明： 申请者调用 joinGroup (dart) 申请加群。 群主或管理员收到加群申请通知 onReceiveJoinApplication (dart) ，在其中调用 getGroupApplicationList (dart)获取加群申请列表。 群主或管理员遍历加群申请列表，逐一调用 acceptGroupApplication (dart) 同意加群，或调用 refuseGroupApplication (dart) 拒绝加群请求。 请求加群被同意或者拒绝后，申请者会收到 onApplicationProcessed (dart) 回调。其中 isAgreeJoin 为 true 表示同意加群，反之被拒绝。 同意加群后，全员（包括请求者）收到 onMemberEnter (dart) 回调，通知群组成员有人进群。 示例代码如下： // ******群主端******// // 1、群主端修改加群选项为需要审核 groupManager.setGroupInfo(info: V2TimGroupInfo.fromJson({ \"groupAddOpt\":GroupAddOptTypeEnum.V2TIM_GROUP_ADD_AUTH })); // 2、群主端监听加群请求并处理 TencentImSDKPlugin.v2TIMManager.addGroupListener(listener: V2TimGroupListener(onReceiveJoinApplication: (groupID, member, opReason) async { // 获取所有申请 V2TimValueCallback appls = await groupManager.getGroupApplicationList(); appls.data.groupApplicationList.forEach((application) { // 同意 groupManager.acceptGroupApplication(groupID: application.groupID, fromUser: application.fromUser, toUser: application.toUser,type: GroupApplicationTypeEnum.values[application.type]); // 拒绝 groupManager.refuseGroupApplication(groupID: application.groupID, fromUser: application.fromUser, toUser: application.toUser, addTime: application.addTime, type: GroupApplicationTypeEnum.values[application.type]); }); },)); // ******用户端******// // 1、用户端申请加群 TencentImSDKPlugin.v2TIMManager.joinGroup(groupID: \"groupID\",message: \"hello\",groupType: \"Public\"); // 2、用户端监听加群审批结果 TencentImSDKPlugin.v2TIMManager.addGroupListener(listener: V2TimGroupListener( onApplicationProcessed: ((groupID, opUser, isAgreeJoin, opReason) { // 加群申请被处理 }), onMemberEnter:(groupID,memberlist){ // 用户进群 } )); 群主或管理员也可以通过 setGroupInfo (dart) 接口调整加群选项（V2TIMGroupAddOpt），可以设置为更严格的 “禁止任何人加群”，也可以设置为更宽松的 “放开审批流程”。 V2TIMGroupAddOpt 的可选项有： 加群选项 含义 GroupAddOptTypeEnum.V2TIM_GROUP_ADD_FORBID 禁止任何人加群 GroupAddOptTypeEnum.V2TIM_GROUP_ADD_AUTH 需要群主或管理员审批才能加入（默认值） GroupAddOptTypeEnum.V2TIM_GROUP_ADD_ANY 取消审批流程，任何用户都可以加入 获取已加入的群组 您可以调用 getJoinedGroupList (dart) 获取已加入的好友工作群（Work）、陌生人社交群（Public）、临时会议群（Meeting）、社群（Community，不支持话题功能）列表。但直播群（AVChatRoom）和 社群（Community，支持话题的社群）不包含在此列表中。 代码示例如下： // 获取已经加入的群组 V2TimValueCallback> groupRes =await groupManager.getJoinedGroupList(); 退出群组 您可以调用 quitGroup (dart) 退出群组。 退群者会收到 onQuitFromGroup (dart) 回调。 群组内其他成员会收到 onMemberLeave (dart) 回调。 警告： 对于陌生人社交群（Public）、临时会议群（Meeting）、社群（Community）和直播群（AVChatRoom），群主不可以退群，只能 解散群组。 示例代码如下： // 退出群组 TencentImSDKPlugin.v2TIMManager.quitGroup(groupID: \"groupID\"); TencentImSDKPlugin.v2TIMManager.addGroupListener(listener: V2TimGroupListener(onMemberLeave: (groupID, member) { // 离开群成员信息 },)); 解散群组 您可以调用 dismissGroup (dart) 解散群组，全员会收到 onGroupDismissed (dart) 回调。 如果您在服务器端设置了允许自动解散不活跃的群，当群被服务器端自动解散后，SDK 会收到 onGroupRecycled (dart) 回调。 示例代码如下： // 解散群组 TencentImSDKPlugin.v2TIMManager.dismissGroup(groupID: \"groupID\"); // 事件监听 TencentImSDKPlugin.v2TIMManager.addGroupListener(listener: V2TimGroupListener(onGroupDismissed: (groupID, opUser) { // 群被解散 },onGroupRecycled: (groupID, opUser){ // 群被回收 })); 接收群组自定义系统通知 如果您在自己的服务器端调用 REST API 向群组中发送自定义系统通知，那么 SDK 会回调 onReceiveRESTCustomData。 交流与反馈 欢迎加入 QQ 群进行技术交流和反馈问题，QQ 群：788910197。 "},"kuai-su-ji-cheng/zi-shi-xian-ui/qun-zu-xiang-guan/qun-zi-liao.html":{"url":"kuai-su-ji-cheng/zi-shi-xian-ui/qun-zu-xiang-guan/qun-zi-liao.html","title":"群资料","keywords":"","body":"功能描述 群资料指的是与群组相关的一些信息，相关方法在核心类 TencentImSDKPlugin.v2TIMManager.getGroupManager()中。 获取群资料 您可以调用 getGroupsInfo (dart) 获取群资料。该接口支持一次传入多个 groupID，批量获取多个群的群资料。 代码示例如下： // 获取群资料 V2TimValueCallback> groupinfos = await groupManager.getGroupsInfo(groupIDList: ['groupid1']); 修改群资料 您可以调用 setGroupInfo (dart) 修改群资料。 如果您事先调用 addGroupListener 添加了群组事件监听器，群资料被修改后，全员会收到 onGroupInfoChanged (dart) 回调。 不同类型的群组，可以修改群资料的成员角色不同： 群组类型 可以修改群基础资料的成员角色 好友工作群(Work) 所有群成员 陌生人社交群（Public） 群主和管理员 临时会议群（Meeting） 群主和管理员 社群（Community） 群主和管理员 直播群（AVChatRoom） 群主 示例代码如下： groupManager.setGroupInfo(info: V2TimGroupInfo.fromJson({ \"groupAddOpt\":GroupAddOptTypeEnum.V2TIM_GROUP_ADD_AUTH // ...其他资料 })); // 回调 TencentImSDKPlugin.v2TIMManager.addGroupListener(listener: V2TimGroupListener(onGroupInfoChanged: ((groupID, changeInfos) { // 群信息更改回调 }))); 设置群消息的接收选项 任何群成员都可以调用 setGroupReceiveMessageOpt (dart) 接口修改群消息接收选项。 V2TIMReceiveMessageOpt 的可选项有： 消息接收选项 含义 ReceiveMsgOptEnum.V2TIM_RECEIVE_MESSAGE 在线正常接收消息，离线时会有厂商的离线推送通知。 ReceiveMsgOptEnum.V2TIM_NOT_RECEIVE_MESSAGE 不会接收到群消息。 ReceiveMsgOptEnum.V2TIM_RECEIVE_NOT_NOTIFY_MESSAGE 在线正常接收消息，离线不会有推送通知。 使用不同的 V2TIMReceiveMessageOpt 可以实现群消息免打扰： 完全不接收群内消息 群消息接收选项设置为 V2TIM_NOT_RECEIVE_MESSAGE 后，群内的任何消息都收不到，会话列表也不会更新。 接收群内消息但不提醒，在会话列表界面显示小圆点（不显示未读数） 群消息接收选项设置为 V2TIM_RECEIVE_NOT_NOTIFY_MESSAGE。 当群内收到新消息，会话列表需要更新时，可以通过会话 V2TIMConversation 中的 unreadCount (dart) 获取到消息未读数。 根据 V2TIMConversation 的 recvOpt (dart](https://pub.dev/documentation/tencent_im_sdk_plugin_platform_interface/latest/models_v2_tim_group_info/V2TimGroupInfo/recvOpt.html)) 判断获取到的群消息接收选项为 V2TIM_RECEIVE_NOT_NOTIFY_MESSAGE 时显示小红点而非消息未读数。 说明： 此方式需使用未读计数功能，因此仅适用于好友工作群（Work）和陌生人社交群（Public）。 示例代码如下： // 社会群接收消息选项 groupManager.setGroupInfo(info: V2TimGroupInfo.fromJson({ \"groupAddOpt\":GroupAddOptTypeEnum.V2TIM_GROUP_ADD_AUTH // ...其他资料 })); 交流与反馈 欢迎加入 QQ 群进行技术交流和反馈问题，QQ 群：788910197。 "},"kuai-su-ji-cheng/zi-shi-xian-ui/qun-zu-xiang-guan/qun-cheng-yuan-guan-li.html":{"url":"kuai-su-ji-cheng/zi-shi-xian-ui/qun-zu-xiang-guan/qun-cheng-yuan-guan-li.html","title":"群成员管理","keywords":"","body":"功能描述 群成员管理指的是对成员进行列表拉取、禁言、踢人、授权、转让群主等操作。相关方法在核心类 TencentImSDKPlugin.v2TIMManager.getGroupManager() 中。 获取群成员列表 您可以调用 getGroupMemberList (dart) 获取指定群的群成员列表。该列表中包含了各个群成员的资料信息，例如用户ID（userID）、群名片（nameCard）、头像（faceUrl）、昵称（nickName）、进群时间（joinTime）等信息。 一个群中的成员人数可能很多（例如 5000+），群成员列表的拉取接口支持过滤器（filter）和分页拉取（nextSeq）两个高级特性。 过滤器（filter） 在调用 getGroupMemberList (dart) 接口时，您可以指定 filter 确定是否仅拉取特定角色的信息列表。 过滤器 过滤类型 GroupMemberFilterTypeEnum.V2TIM_GROUP_MEMBER_FILTER_ALL 拉取所有群成员的信息列表 GroupMemberFilterTypeEnum.V2TIM_GROUP_MEMBER_FILTER_OWNER 仅拉取群主的信息列表 GroupMemberFilterTypeEnum.V2TIM_GROUP_MEMBER_FILTER_ADMIN 仅拉取群管理员的信息列表 GroupMemberFilterTypeEnum.V2TIM_GROUP_MEMBER_FILTER_COMMON 仅拉取普通群成员的信息列表 示例代码如下： // 通过 filter 参数指定只拉取群主的资料 groupManager.getGroupMemberList(count: 10,filter: GroupMemberFilterTypeEnum.V2TIM_GROUP_MEMBER_FILTER_ADMIN,nextSeq: '0',offset: 0,groupID: \"\",); 分页拉取（nextSeq） 很多情况下，用户界面上并不需要展示全部的群成员信息，只需展示群成员列表的第一页即可。等用户单击“下一页”或在列表页上拉刷新时，才需要拉取更多的群成员。针对此类场景，您可以使用分页拉取。 分页拉取的步骤为： 首次调用 getGroupMemberList 时，指定参数 nextSeq 为 0（表示从头开始拉取会话列表），一次最多拉取 50 个群成员对象。 首次拉取群成员列表成功后，getGroupMemberList 的回调结果 V2TIMGroupMemberInfoResult 中会包含 nextSeq（下次分页拉取的字段）： 如果 nextSeq 等于 0，表示已经拉取了全部的群成员。 如果 nextSeq 大于 0，表示还有更多的群成员可以拉取。此时并不意味着要立刻开始拉取 “下一页” 的成员列表。在常见的通信软件中，分页拉取通常由用户的滑动操作触发的，用户通过上拉触发一次分页拉取。 当用户继续上拉群成员列表时，如果还有更多的群成员可以拉取，可以继续调用 getGroupMemberList 接口，并传入新一轮的 nextSeq参数（nextSeq 数值来自上一次拉取返回的 V2TIMGroupMemberInfoResult 对象）。 重复执行【步骤 3】直至 nextSeq 等于 0，拉取结束。 示例代码如下： // 通过 filter 参数指定只拉取群主的资料 groupManager.getGroupMemberList(count: 10,filter: GroupMemberFilterTypeEnum.V2TIM_GROUP_MEMBER_FILTER_ADMIN,nextSeq: '0',offset: 0,groupID: \"\",); 禁言 禁言指定群成员 群主或管理员可以通过 muteGroupMember (dart) 禁言某一个群成员并设置禁言时间。禁言时间单位为秒，禁言信息存储于群成员的 muteUtil 属性字段中。 群成员被禁言后，全员（包括被禁言的群成员）都会收到 onMemberInfoChanged (dart) 事件回调。 禁言整个群 群主或管理员也可以通过 setGroupInfo (dart) 接口对整个群进行禁言，将 allMuted属性字段设置为 true 即可。全群禁言没有时间限制，需通过将群资料 setAllMuted(false) 解除禁言。 说明： 全员禁言后触发 onGroupInfoChanged (dart) 事件回调，该功能默认是关闭的，可在控制台内自行开通。 方式: 进入即时通信IM控制台群组配置模块，选择群系统通知配置，为各种类型群，单击操作中编辑，修改“群禁言变更通知”，即可。 说明： 只有群主能将管理员禁言。 示例代码如下： // 禁言群成员 userB 10分钟 groupManager.muteGroupMember(groupID: '',userID: 'userB',seconds: 10); // 全员禁言 groupManager.setGroupInfo(info: V2TimGroupInfo(isAllMuted: true,groupID: '',groupType: 'Public')); TencentImSDKPlugin.v2TIMManager.addGroupListener(listener: V2TimGroupListener(onMemberInfoChanged: (groupID, v2TIMGroupMemberChangeInfoList) { //群成员信息更改 }, onGroupInfoChanged: (groupID,info){ // 群信息修改 } )); 踢人 群主或管理员调用 kickGroupMember (dart) 接口可以将指定的普通群成员踢出群组。 普通群成员被踢后，全员（包括被踢人）会收到 onMemberKicked (dart) 回调。 由于直播群（AVChatRoom）对进群没有限制，因此直播群（AVChatRoom）没有支持踢人的接口，您可以使用 muteGroupMember (dart 禁言指定成员达到类似的成员管控的目的。禁言操作参考 禁言。 说明： 只有群主能将管理员踢出群组。 示例代码如下： groupManager.kickGroupMember(groupID: '',memberList: []); 设置管理员 群主调用 setGroupMemberRole (dart) 可以对陌生人社交群（Public）或临时会议群（Meeting）中的群成员进行管理员授权。 普通成员被授权后，拥有跟管理员同样的权限，例如支持以下操作： 修改群组基本资料 将普通群成员踢出群 将普通群成员禁言（即禁止其在一段时间内发言） 审批其他用户的入群申请 更多详情可参考 群成员角色介绍。 普通成员被授权为管理员后，全员（包括被设置的成员）会收到 onGrantAdministrator (dart) 回调。 普通成员被取消管理员授权后，全员（包括被设置的成员）会收到 onRevokeAdministrator (dart) 回调。 示例代码如下： groupManager.setGroupMemberRole(groupID: '',userID: '',role: GroupMemberRoleTypeEnum.V2TIM_GROUP_MEMBER_ROLE_ADMIN); // 监听角色更改 TencentImSDKPlugin.v2TIMManager.addGroupListener(listener: V2TimGroupListener(onMemberInfoChanged: (groupID, v2TIMGroupMemberChangeInfoList) { }, onGroupInfoChanged: (groupID,info){ }, onGrantAdministrator: (String groupID, V2TimGroupMemberInfo info, List infolist){}, onRevokeAdministrator: (String groupID, V2TimGroupMemberInfo info, List infolist){}, )); 转让群主 群主可以调用 transferGroupOwner 把群主转让给其他群成员。 群主转让后，全员会收到 onGroupInfoChanged 回调，其中 V2TIMGroupChangeInfo 的 type 为 V2TIMGroupChangeInfo.V2TIM_GROUP_INFO_CHANGE_TYPE_OWNER，value 值为新群主的 UserID。 示例代码如下： groupManager.transferGroupOwner(groupID: \"\", userID: \"userID\"); 获取群在线人数 调用 getGroupOnlineMemberCount (dart) 可以获取群在线人数。 说明： 目前仅直播群（AVChatRoom）支持获取群在线人数。 SDK 调用频率限制为 60 秒 1 次。 代码示例如下： groupManager.getGroupOnlineMemberCount(groupID: ''); 交流与反馈 欢迎加入 QQ 群进行技术交流和反馈问题，QQ 群：788910197。 "},"kuai-su-ji-cheng/zi-shi-xian-ui/qun-zu-xiang-guan/qun-cheng-yuan-zi-liao.html":{"url":"kuai-su-ji-cheng/zi-shi-xian-ui/qun-zu-xiang-guan/qun-cheng-yuan-zi-liao.html","title":"群成员资料","keywords":"","body":"功能描述 群成员资料相关方法在核心类 TencentImSDKPlugin.v2TIMManager.getGroupManager() 中。 获取群成员资料 您可以调用 getGroupMembersInfo (dart) 获取群成员资料。该接口支持批量获取，您可以一次传入多个 userID 获取多个群成员的资料，从而提升网络传输效率。 示例代码如下： // 获取群成员资料 V2TimValueCallback> memberInfos = await groupManager.getGroupMembersInfo(groupID: \"groupID\", memberList: [\"id1\"]); 修改群成员资料 群主或管理员可以调用 setGroupMemberInfo (dart) 接口修改群成员的群名片（nameCard）、自定义字段（customInfo）等与群成员相关的资料。 示例代码如下： // 设置群成员资料 groupManager.setGroupMemberInfo(groupID: \"\",userID: \"\",nameCard: \"\",customInfo: {}); 交流与反馈 欢迎加入 QQ 群进行技术交流和反馈问题，QQ 群：788910197。 "},"kuai-su-ji-cheng/zi-shi-xian-ui/qun-zu-xiang-guan/qun-zi-ding-yi-shu-xing.html":{"url":"kuai-su-ji-cheng/zi-shi-xian-ui/qun-zu-xiang-guan/qun-zi-ding-yi-shu-xing.html","title":"群自定义属性","keywords":"","body":"功能描述 群属性相关方法在核心类 TencentImSDKPlugin.v2TIMManager.getGroupManager()中。 基于 API 2.0 我们设计了全新的群自定义字段，我们称之为 \"群属性\"。基于群属性，我们可以做语聊房的麦位管理。当有人上麦的时候，可以设置一个群属性管理上麦人信息。当有人下麦的时候，可以删除对应群属性。其他成员可以通过获取群属性列表来展示麦位列表。 说明： 目前群属性功能仅支持直播群（AVChatRoom）。 群属性功能特性有： 不再需要控制台配置，客户端可以直接增删改查群属性。 最多支持 16 个群属性，每个群属性的大小最大支持 4k，所有群属性的大小最大支持 16k。 initGroupAttributes、setGroupAttributes、deleteGroupAttributes 接口合并计算，SDK 限制为单个登录用户 5 秒 10 次，超过后回调 8511 错误码；后台限制单个登录用户 1 秒 5 次，超过后返回 10049 错误码。 getGroupAttributes 接口 SDK 限制为单个登录用户 5 秒 20 次。 初始化群属性 调用 initGroupAttributes (dart) 接口可以初始化群属性。如果该群之前有群属性，会先清空原来的群属性。 示例代码如下： // 初始化群属性 groupManager.initGroupAttributes(groupID: \"groupID\", attributes: { \"attr1\":\"\" }); 设置群属性 调用 setGroupAttributes (dart) 接口可以设置群属性。如果设置的群属性不存在，会自动添加该群属性。 示例代码如下： // 设置群属性 groupManager.setGroupAttributes(groupID: \"groupID\", attributes: { \"attr1\":\"\" }); 删除群属性 调用 deleteGroupAttributes (dart) 接口可以删除指定群属性，如果 keys 字段填 null/nil ，则会清空所有的群属性。 示例代码如下： // 删除群属性 groupManager.deleteGroupAttributes(groupID: \"groupID\", keys: ['attr1','attr2']); 获取群属性 调用 getGroupAttributes (dart) 接口可以获取指定群属性，如果 keys 字段填 null/nil ，则会获取所有的群属性。 示例代码如下： // 获取群属性 V2TimValueCallback> attrs = await groupManager.getGroupAttributes(groupID: \"groupID\"); 群属性更新 如果您事先调用 addGroupListener 添加了群组事件监听器，群属性有任何的更新变化，都会通过 onGroupAttributeChanged (dart) 回调出来所有的群属性字段。 示例代码如下： TencentImSDKPlugin.v2TIMManager.addGroupListener(listener: V2TimGroupListener(onGroupAttributeChanged: (groupID, groupAttributeMap) { // 群属性变更 },)); 交流与反馈 欢迎加入 QQ 群进行技术交流和反馈问题，QQ 群：788910197。 "},"kuai-su-ji-cheng/zi-shi-xian-ui/qun-zu-xiang-guan/she-qun-guan-li.html":{"url":"kuai-su-ji-cheng/zi-shi-xian-ui/qun-zu-xiang-guan/she-qun-guan-li.html","title":"社群管理","keywords":"","body":"功能描述 社群是一个由于共同主题而让大家聚集在一起的超大群组，可以在社群下根据不同兴趣创建多个话题。 社群用来管理群成员。社群下的所有话题不仅可以共享社群成员，还可以独立收发消息而不相互干扰。 社群和话题的管理接口在核心类 TencentImSDKPlugin.v2TIMManager.getGroupManager() 中。 话题中的消息相关接口在核心类 TencentImSDKPlugin.v2TIMManager.getMessageManager() 中。 说明： Flutter sdk 4.0.0以上版本支持，需 购买旗舰版套餐包 并在 控制台>群功能配置>社群 打开开关后方可使用。 社群管理 创建社群 创建支持话题的社群分两步： 创建 V2TIMGroupInfo (dart) 对象，其中 groupType 设置为 Community，isSupportTopic 设置为 true/YES。 调用 createGroup (dart) 接口创建群组。 示例代码如下： // 创建只会社群的话题 groupManager.createGroup(groupType: \"Community\", groupName: \"社群\",isSupportTopic: true); 获取加入的社群列表 调用 getJoinedCommunityList(dart) 获取已经加入的支持话题的社群列表。 示例代码如下： // 获取加入的社群列表 V2TimValueCallback> groupList = await groupManager.getJoinedCommunityList(); 其他管理接口 其他功能跟普通群组使用方法一样，涉及的接口有： 分类 功能 接口 社群管理 加入社群 joinGroup (dart） 退出社群 quitGroup (dart） 解散社群 dismissGroup (dart） 获取社群资料 getGroupsInfo (dart） 修改社群资料 setGroupInfo (dart） 社群成员管理 获取社群成员列表 getGroupMemberList (dart） 获取社群成员资料 getGroupMembersInfo (dart） 修改社群成员资料 setGroupMemberInfo (dart） 踢出社群成员 kickGroupMember (dart） 话题管理 创建话题 创建话题分两步： 创建 V2TIMTopicInfo (dart) 对象。 调用 createTopicInCommunity (dart) 接口创建话题。 示例代码如下： // 创建话题 groupManager.createTopicInCommunity(groupID: \"groupID\", topicInfo: V2TimTopicInfo.fromJson({ \"topicName\":\"topic\" })); 删除话题 调用 deleteTopicFromCommunity(dart) 接口删除话题。 示例代码如下： // 删除话题 groupManager.deleteTopicFromCommunity(groupID: \"\",topicIDList:[\"topicID\"]); 修改话题信息 修改话题信息分两步： 创建 V2TIMTopicInfo (dart) 对象，并设置需要修改的字段 调用 setTopicInfo (dart) 接口修改话题信息 示例代码如下： // 修改话题信息 groupManager.setTopicInfo(topicInfo:V2TimTopicInfo.fromJson({ \"topicName\":\"topicName\" })); 获取话题列表 调用 getTopicInfoList (dart) 接口获取话题列表。 当 topicIDList 列表为空时，为获取该社群下的所有话题列表 当 topicIDList 填入指定的话题 ID 时，为获取填入的话题列表 示例代码如下： // 获取话题列表 groupManager.getTopicInfoList(groupID: \"\",topicIDList: ['topicID']); 监听话题回调 在 V2TIMGroupListener (dart) 中增加了话题相关的回调方法，onTopicCreated，onTopicDeleted，onTopicInfoChanged，用来监听话题事件。 示例代码如下： V2TIMGroupListener v2TIMGroupListener = new V2TIMGroupListener() { onTopicCreated(String groupID, String topicID) { // 监听话题创建通知 } onTopicDeleted(String groupID, List topicIDList) { // 监听话题删除通知 } onTopicInfoChanged(String groupID, V2TIMTopicInfo topicInfo) { // 监听话题信息更新通知 } }; V2TIMManager.getInstance().addGroupListener(v2TIMGroupListener); 话题消息 话题消息相关功能跟普通消息使用方法一样，涉及的接口有： 功能 接口 说明 发送消息 sendMessage (dart) 参数 groupID 填为话题 topicID 接收消息 V2TIMAdvancedMsgListener (dart) 中的 onRecvNewMessage 方法 消息中的 groupID 即为话题 topicID 标记消息已读 markGroupMessageAsRead (dart 参数 groupID 填为话题 topicID 获取历史消息 getGroupHistoryMessageList (dart 参数 groupID 填为话题 topicID 撤回消息 revokeMessage (dart） 参数 groupID 填为话题 topicID 交流与反馈 欢迎加入 QQ 群进行技术交流和反馈问题，QQ 群：788910197。 "},"kuai-su-ji-cheng/zi-shi-xian-ui/yong-hu-guan-li/":{"url":"kuai-su-ji-cheng/zi-shi-xian-ui/yong-hu-guan-li/","title":"用户管理","keywords":"","body":""},"kuai-su-ji-cheng/zi-shi-xian-ui/yong-hu-guan-li/yong-hu-zi-liao.html":{"url":"kuai-su-ji-cheng/zi-shi-xian-ui/yong-hu-guan-li/yong-hu-zi-liao.html","title":"用户资料","keywords":"","body":"功能描述 用户可以设置和获取个人的昵称、头像、签名等资料信息，也可以获取到陌生人的资料信息。相关方法在核心类 TencentImSDKPlugin.v2TIMManager.getFriendshipManager()中。 关系链事件监听器 您可以调用 addFriendListener (dart) 添加关系链事件监听器。 当不想再接收关系链事件时，可调用 removeFriendListener (dart) 移除关系链事件监听器。 警告： 只有预先设置好关系链事件监听器，才能正常接收到下文中的各种事件通知。 示例代码如下： // 添加关系链监听器 V2TimFriendshipListener frindshipListener = V2TimFriendshipListener( onBlackListAdd: (infoList) {}, onBlackListDeleted: (userids) {}, onFriendApplicationListAdded: (applicationlist) {}, onFriendApplicationListDeleted: (applicationlist) {}, onFriendApplicationListRead: () {}, onFriendInfoChanged: (frindInfolist) {}, onFriendListAdded: (frindInfolist) {}, onFriendListDeleted: (userd) {}); friendshipManager.addFriendListener(listener: frindshipListener); // 移除关系链监听器 friendshipManager.removeFriendListener(listener: frindshipListener); 用户资料管理 查询和修改自己的资料 您可以调用 getUsersInfo (dart) 接口查询个人资料，其中参数 userIDList 需填入自己的 UserID。 您可以调用 setSelfInfo (dart) 接口修改个人资料。 资料修改成功后，您会收到 onSelfInfoUpdated (dart) 回调。 示例代码如下： // 获取个人资料 V2TimValueCallback self = await TencentImSDKPlugin.v2TIMManager.getLoginUser(); TencentImSDKPlugin.v2TIMManager.getUsersInfo(userIDList: [self.data]); // 设置个人资料 TencentImSDKPlugin.v2TIMManager.setSelfInfo(userFullInfo: V2TimUserFullInfo(nickName: \"\",role: 0,faceUrl: \"\")); 查询非好友用户资料 您可以调用 getUsersInfo (dart) 接口查询非好友资料，其中参数 userIDList 填入非好友的 UserID 即可。 说明： 不能修改非好友的资料。 查询和修改好友资料 您可以调用 getFriendsInfo (dart) 接口查询指定的好友资料，从回调信息中通过 V2TIMFriendInfoResult 的 relation 字段可以得到该用户与自己的关系： relation 与自己的关系 V2TIM_FRIEND_RELATION_TYPE_NONE 表示不是好友。 V2TIM_FRIEND_RELATION_TYPE_BOTH_WAY 表示互为好友。 V2TIM_FRIEND_RELATION_TYPE_IN_MY_FRIEND_LIST 表示对方在我的好友列表中。 V2TIM_FRIEND_RELATION_TYPE_IN_OTHER_FRIEND_LIST 表示我在对方的好友列表中。 // 获取好友信息 V2TimValueCallback> friendsInfo = await friendshipManager.getFriendsInfo(userIDList: []); 您可以调用 setFriendInfo (dart) 接口修改好友备注等资料。 // 设置好友信息 TencentImSDKPlugin.v2TIMManager.setSelfInfo(userFullInfo: V2TimUserFullInfo(nickName: \"\",role: 0,faceUrl: \"\")); 常见问题 增强版获取用户资料为什么不是最新的？ 增强版 SDK 中用户资料的更新分好友和陌生人两种情况： 好友资料：由于好友资料更新时，后台会主动向 SDK 发送系统通知，因此好友资料可以实时更新。 陌生人资料：陌生人资料更新时，由于没有好友关系，后台无法向 SDK 发送系统通知，因此无法实时更新；为了避免每次获取用户资料都向后台发起网络请求，SDK 增加了缓存逻辑，对同一个用户主动向后台拉取资料的时间间隔为 10 分钟。 交流与反馈 欢迎加入 QQ 群进行技术交流和反馈问题，QQ 群：788910197。 "},"kuai-su-ji-cheng/zi-shi-xian-ui/yong-hu-guan-li/yong-hu-zhuang-tai.html":{"url":"kuai-su-ji-cheng/zi-shi-xian-ui/yong-hu-guan-li/yong-hu-zhuang-tai.html","title":"用户状态","keywords":"","body":""},"kuai-su-ji-cheng/zi-shi-xian-ui/yong-hu-guan-li/hao-you-guan-li.html":{"url":"kuai-su-ji-cheng/zi-shi-xian-ui/yong-hu-guan-li/hao-you-guan-li.html","title":"好友管理","keywords":"","body":"功能描述 IM SDK 支持好友的管理，用户可以主动添加、删除好友，也可以设置仅针对好友才能发送消息。 获取好友列表 IM SDK 支持好友关系链逻辑，您可以调用 getFriendList (dart) 接口获取好友列表。 示例代码如下： // 获取好友列表 V2TimValueCallback> friendsList = await friendshipManager.getFriendList(); 添加好友 您可以调用 addFriend (dart) 接口添加好友。 示例代码如下： // 添加双向好友 V2TimValueCallback addFriend = await friendshipManager.addFriend(userID: \"userID\",remark:\"加好友的备注\",addWording:\"附言\",addType:FriendTypeEnum.V2TIM_FRIEND_TYPE_BOTH); 根据对方用户资料中的加好友需要验证与否，可以分为两种处理流程： 第一种：加好友不需要对方验证 用户 A 和 B 调用 setFriendListener 设置关系链监听器。 用户 B 通过 setSelfInfo 函数里的 allowType (dart) 字段设置为加好友不需要验证（V2TIM_FRIEND_ALLOW_ANY）。 用户 A 调用 addFriend 申请添加 B 为好友即可添加成功。添加成功后，按照申请参数 V2TIMFriendAddApplication 中 addType 的设置有两种情况： 如果设置为双向好友 (V2TIM_FRIEND_TYPE_BOTH) ，则用户 A 和 B 都会收到 onFriendListAdded (dart) 回调； 如果设置为单向好友（V2TIM_FRIEND_TYPE_SINGLE），则只有用户 A 收到 onFriendListAdded 回调。 第二种：加好友需要通过对方验证 用户 A 和 B 调用 setFriendListener 设置关系链监听。 用户 B 通过 setSelfInfo 函数里的 allowType 字段设置为加好友需要验证（V2TIM_FRIEND_NEED_CONFIRM）。 用户 A 调用 addFriend 申请添加 B 为好友，接口的成功回调参数中 resultCode 返回 30539，表示需要等待用户 B 的验证。同时 A 和 B 都会收到 onFriendApplicationListAdded (dart) 的回调。 用户 B 会收到 onFriendApplicationListAdded 的回调，当参数 V2TIMFriendApplication 中的 type 为 V2TIM_FRIEND_APPLICATION_COME_IN 时，可以选择接受或者拒绝： B 调用 acceptFriendApplication (dart) 接受好友请求。如果参数接受类型为仅同意加单向好友（V2TIM_FRIEND_ACCEPT_AGREE）时: A 会收到 onFriendListAdded 回调，说明单向加好友成功。 B 会收到 onFriendApplicationListDeleted (dart) 回调，此时 B 成为 A 的好友，但 A 仍不是 B 的好友。 B 调用 acceptFriendApplication 接受好友请求，如果参数接受类型为同意加双向好友时（V2TIM_FRIEND_ACCEPT_AGREE_AND_ADD），A 和 B 都会收到 onFriendListAdded 回调，说明互相加好友成功。 B 调用 refuseFriendApplication (dart) 拒绝好友请求，双方都会收到 onFriendApplicationListDeleted 回调。 删除好友 您可以调用 deleteFromFriendList (dart) 接口删除好友关系。 示例代码如下： // 删除双向好友 V2TimValueCallback> deleteres = await friendshipManager.deleteFromFriendList(deleteType: FriendTypeEnum.V2TIM_FRIEND_TYPE_BOTH,userIDList:['user1']); 检查好友关系 您可以调用 checkFriend (dart) 接口检查好友关系。 示例代码如下： // 检测好友是否有双向（单向）好友关系。 V2TimValueCallback> checkres = await friendshipManager.checkFriend(checkType:FriendTypeEnum.V2TIM_FRIEND_TYPE_BOTH,userIDList: [] ); 设置只能给好友发消息 IM SDK 在发送单聊消息的时候，默认不检查好友关系。在客服场景中，如果用户需要先加客服为好友才能进行沟通非常不方便，因此该默认设置常用于在线客服等场景。 如需实现类似“微信”或者“QQ”中“先加好友，再发消息”的交互体验，您可以在 即时通信 IM 控制台 >【功能配置】>【登录与消息】>【好友关系检查】中开启\"发送单聊消息检查关系链\"。开启后，用户只能给好友发送消息，当用户给非好友发消息时，SDK 会报 20009 错误码。 交流与反馈 欢迎加入 QQ 群进行技术交流和反馈问题，QQ 群：788910197。 "},"kuai-su-ji-cheng/zi-shi-xian-ui/yong-hu-guan-li/hao-you-fen-zu.html":{"url":"kuai-su-ji-cheng/zi-shi-xian-ui/yong-hu-guan-li/hao-you-fen-zu.html","title":"好友分组","keywords":"","body":"功能描述 在某些场景下，您可能需要对好友进行分组，例如分为 \"大学同学\"、\"公司同事\" 等，您可以调用以下接口实现。 好友分组 新建好友分组 您可以调用 createFriendGroup (dart) 接口新建好友分组。 示例代码如下： // 创建好友分组，并添加好友进分组 V2TimValueCallback> friendgroups = await friendshipManager.createFriendGroup(groupName: \"分组1\",userIDList: ['user1']); 删除好友分组 您可以调用 deleteFriendGroup (dart) 接口删除好友分组。 示例代码如下： // 删除好友分组 V2TimCallback deleteFriendsgroup = await friendshipManager.deleteFriendGroup(groupNameList: ['分组1']); 重命名好友分组 您可以调用 renameFriendGroup (dart) 接口重命名好友分组。 示例代码如下： // 修改好友分组名字 V2TimCallback rename = await friendshipManager.renameFriendGroup(newName: \"新分组1\",oldName: '分组1'); 获取好友分组 您可以调用 getFriendGroupList (dart) 接口获取好友分组列表。 示例代码如下： // 按分组名字获取好友分组信息 V2TimValueCallback> friendGrous = await friendshipManager.getFriendGroups(groupNameList: ['分组1']); 添加好友到一个分组 您可以调用 addFriendsToFriendGroup (dart) 接口添加好友到一个分组。 示例代码如下： // 将用户添加到分组中 V2TimValueCallback> addToFrindgroups = await friendshipManager.addFriendsToFriendGroup(groupName: \"分组1\",userIDList: ['user1']); 从分组中删除某好友 您可以调用 deleteFriendsFromFriendGroup (dart) 从分组中删除某好友。 示例代码如下： // 将要有从分组中删除 V2TimValueCallback> deletefromFriendsGrousps = await friendshipManager.deleteFriendsFromFriendGroup(groupName: \"分组1\", userIDList: ['user1']); 交流与反馈 欢迎加入 QQ 群进行技术交流和反馈问题，QQ 群：788910197。 "},"kuai-su-ji-cheng/zi-shi-xian-ui/yong-hu-guan-li/hei-ming-dan.html":{"url":"kuai-su-ji-cheng/zi-shi-xian-ui/yong-hu-guan-li/hei-ming-dan.html","title":"黑名单","keywords":"","body":"功能描述 如果您需屏蔽某人的消息，可以把该用户拉入黑名单。 黑名单 拉黑某人 您可以调用 addToBlackList (dart) 接口把该用户加入黑名单，即拉黑该用户。 被拉黑的用户默认不会感知到 “被拉黑” 的状态，消息发送后不会返回已被对方拉黑的错误码。 如果希望被拉黑的用户在发消息时返回已被对方拉黑的错误提醒，请在 即时通信 IM 控制台 >【功能配置】>【登录与消息】>【黑名单检查】中关闭 ”发送消息后展示发送成功“。关闭后，被拉黑的用户在发送消息时，SDK 会报 20007 错误码。 // 将用户添加到黑名单 V2TimValueCallback> addBlackList = await friendshipManager.addToBlackList(userIDList: ['user1']); 解除拉黑 从黑名单中移除对方后可再次接收对方的消息，可调用 deleteFromBlackList (dart)。 // 将用户从黑名单中移除 V2TimValueCallback> deleteBlackList = await friendshipManager.deleteFromBlackList(userIDList: ['user1']); 获取黑名单列表 您可以通过 getBlackList (dart) 查看已拉黑多少用户，并对黑名单人员进行管理。 // 获取黑名单列表 V2TimValueCallback> blacklist = await friendshipManager.getBlackList(); 交流与反馈 欢迎加入 QQ 群进行技术交流和反馈问题，QQ 群：788910197。 "},"kuai-su-ji-cheng/zi-shi-xian-ui/li-xian-tui-song.html":{"url":"kuai-su-ji-cheng/zi-shi-xian-ui/li-xian-tui-song.html","title":"离线推送","keywords":"","body":"概述 腾讯云即时通信 IM 的终端用户需要随时都能够得知最新的消息，而由于移动端设备的性能与电量有限，当 App 处于后台时，为了避免维持长连接而导致的过多资源消耗，腾讯云即时通信 IM 推荐您使用各厂商提供的系统级推送通道来进行消息通知，系统级的推送通道相比第三方推送拥有更稳定的系统级长连接，可以做到随时接受推送消息，且资源消耗大幅降低。 说明： 在没有主动退出登录的情况下，应用退后台、手机锁屏、或者应用进程被用户主动杀掉三种场景下，如果想继续接收到 IM 消息提醒，可以接入即时通信 IM 离线推送。 如果应用主动调用 logout 退出登录，或者多端登录被踢下线，即使接入了 IM 离线推送，也收不到离线推送消息。 使用腾讯云IM厂商推送Flutter集成插件的离线推送能力，可快速接入主流厂商（苹果iOS/Google FCM/OPPO/VIVO/华为/小米/魅族）的离线推送。 本教程含接入腾讯云即时通信 IM 离线推送全流程。插件已封装上述厂商的 SDK，使用时仅需简单改造调用即可。 如果您的应用不需要离线推送，或场景不满足离线推送的需求，请直接看本文最后一节 “在线推送-在本地创建新消息通知” 在线推送部分。 如果您的应用已经自行完成厂商离线推送，仅需查看本教程 第一步 和 第五步，在控制台内录入厂商信息，并在应用登录后，上报证书 ID 即可。 插件API概览 说明： 以下API若无特殊说明，均可自动兼容Android/iOS平台及支持厂商，插件内部进行平台及厂商判断，您直接调用即可。 API 说明 构造函数（TimUiKitPushPlugin） 实例化一个Push插件对象，并确定是否使用Google Service FCM init 初始化插件，绑定点击通知回调事件及传入厂商渠道信息 uploadToken 自动获取设备Token及证书ID，自动上传至腾讯云IM服务端 requireNotificationPermission 申请推送权限 setBadgeNum 设置未读数角标 【仅支持部分Android设备，可参见API代码参数说明】 clearAllNotification 清除通知栏内，当前应用，所有的通知 getDevicePushConfig 获取当前厂商的推送相关信息，含机型/证书ID/Token getDevicePushToken 获取当前厂商的推送Token getOtherPushType 获取厂商信息 getBuzId 获取当前厂商对应的腾讯云控制台上注册的证书ID createNotificationChannel 为Android机型创建通知Channel渠道 clearAllNotification 清除通知栏内，当前应用，所有的通知，详见Google官方文档 displayNotification 在客户端本地，手动创建一条消息通知 displayDefaultNotificationForMessage 在客户端本地，按照默认的规则，自动为一个 V2TimMessage 创建一个消息通知 接入准备（注册厂商） 需要完成厂商开发者账号申请（一般需要企业认证），创建应用，申请 PUSH 权限，拿到 key 信息。 Apple iOS 请根据该教程，完成 Apple 推送证书申请。 分别将申请到的生产环境和开发环境证书托管至即时通信 IM 控制台。 打开 IM 控制台-基础配置 右侧，添加 iOS 证书。 Android Google FCM 前往 Google Firebase控制台 创建一个项目，无需启用 Google Analysis。 单击您的应用卡片，进入应用配置页面。 单击 Project Overview 右侧的 ，选择项目设置>服务帐号，单击生成新的私钥下载私钥文件。 将该私钥文件托管至即时通信 IM 控制台。在 IM 控制台-基础配置 右侧，添加 Android 证书。选择 Google 后，请选择上传证书。 OPPO 开通服务 请参见 OPPO PUSH 服务开启指南 注册开发者账号，创建应用，并开通 PUSH 服务。 在 OPPO 推送平台 >配置管理>应用配置页面，您可以查看详细的应用信息。记录 AppId、AppKey、AppSecret 和 MasterSecret 信息。 创建消息通道 按照 OPPO 官网要求，在 OPPO Android 8.0 及以上系统版本必须配置 ChannelID，否则推送消息无法展示。您需要先在 App 中创建对应的 ChannelID（例如 tuikit）。 请在配置管理-新建通道内，创建一个新通道。通道ID即为Channel ID。 说明： OPPO 对于公信通道有每日上限，对于通讯类型消息，建议参见 OPPO 官方文档 申请私信通道。 上传证书至控制台 在 IM 控制台-基础配置 右侧，添加 Android 证书。选择 OPPO 后，请填写相关信息。 ChannelID 请填写此前在 OPPO 控制台为通讯能力申请的专用通道，最好是私信，以免到达每日推送上限。 打开方式请选择打开应用内指定页面 > activity，填写com.tencent.flutter.tim_ui_kit_push_plugin.pushActivity.OPPOMessageActivity。 小米 开通服务 打开 小米开放平台官网 进行注册并通过开发者认证。 说明： 认证过程大约需要2天左右，请务必提前阅读 小米推送服务启用指南，以免影响您的接入进度。 在小米开放平台创建应用，并选择应用服务>PUSH服务，创建推送服务应用。 小米推送服务应用创建完成后，在应用详情中，您可以查看详细的应用信息。 记录主包名、AppID、AppSecret 信息。 上传证书至控制台 在 IM 控制台-基础配置 右侧，添加 Android 证书。选择小米后，请填写相关信息，行为请选择打开应用。 vivo 开通服务 打开 vivo 开放平台官网 进行注册并通过开发者认证。 说明： 认证过程大约需要3天左右，请务必提前阅读 vivo 推送服务说明，以免影响您的接入进度。 登录 vivo 开放平台的管理中心，选择消息推送>创建>测试推送，创建 vivo 推送服务应用。 vivo 推送服务应用创建完成后，在应用详情中，您可以查看详细的应用信息。记录 APP ID、APP key 和 App secret信息。 说明： vivo 要求应用在上架后，才能使用正式推送服务。如果您需要在开发中调试 vivo 机器，请参见本文最后一节 vivo 调试 内容，开启测试模式。 上传证书至控制台 在 IM 控制台-基础配置 右侧，添加 Android 证书。选择 vivo 后，请填写相关信息。 单击后续动作请选择为：打开应用内指定页面。 应用内页面 配置为：tencent_im_push://${替换成您的包名}/message?#Intent;scheme=tencent_im_push;launchFlags=0x4000000;end 华为 获取密钥 进入 华为开放平台，注册和登录开发者账号，详情参见 账号注册认证（如果您是新注册账号，需进行实名认证）。 在华为推送平台中新建应用，详情参见 创建应用。记录AppID、AppSecret 信息。 说明： 若在应用信息>我的应用中无法找到 SecretKey，可前往项目设置>常规中查看 Client Secret。 配置 SHA256 证书指纹 获取 SHA256 证书指纹，并在华为推送平台中配置证书指纹，单击 保存。证书指纹获取可参见 生成签名证书指纹。 ?如果您的应用需要经过流水线编译发布，每次编译在不同的构建机上进行，可在本地创建keystore.jks密钥文件，得到该 keystore 的 SHA256 值，填入华为推送平台中。 在流水线的构建脚本中，对完成构建后的产物进行归档对齐，及使用刚才的 keystore 签名。此时该最终产物签名 SHA256 值即可保持一致。代码如下： zipalign -v -p 4 构建生成的apk.apk 打包生成的apk_aligned.apk apksigner sign --ks keystore.jks --ks-pass pass:您创建的keystore密码 --out 最终签名 完成的apk.apk 打包生成的apk_aligned.apk 获取华为推送配置文件 登录华为开放平台，进入我的项目> 选择项目 > 项目设置，下载华为应用最新配置文件 agconnect-services.json。放置于android/app目录下。 打开推送服务开关 在华为推送平台，单击全部服务>推送服务，进入推送服务页面。 在推送服务页面，单击立即开通，详情请参见 打开推送服务开关。 上传证书至控制台 在 IM 控制台-基础配置 右侧，添加 Android 证书。 选择华为后，请填写相关信息。 角标参数请填写Android应用入口 Activity 类，如我们DEMO的 com.tencent.flutter.tuikit，否则华为通道下发通知的角标设置将不生效。 点击后续动作请选择打开应用。 魅族 开通服务 打开 魅族开放平台官网 进行注册并通过开发者认证。 说明： 认证过程大约需要3天左右，请务必提前阅读 魅族 Flyme 推送接入文档，以免影响您的接入进度。 登录魅族开放平台的管理控制台，选择服务>集成推送服务>推送后台，创建魅族推送服务应用。 魅族推送服务应用创建完成后，在应用详情中，您可以查看详细的应用信息。记录应用包名、App ID、App Secret信息。 上传证书至控制台 在 IM 控制台-基础配置 右侧，添加 Android 证书。 选择华为后，请填写相关信息。单击后续动作请选择：打开应用。 使用插件跑通离线推送（全览 + Android） 在您的项目中安装 IM Flutter 离线推送插件： flutter pub add tim_ui_kit_push_plugin 并根据该指南，在插件市场，启用推送插件。 步骤1: 汇总常量类 完成 接入准备（注册厂商）的配置后，可在即时通信 IM 的控制台首页右侧，查看我们后台为您的厂商渠道 App 信息分配的证书 ID。 请将这些信息，配上厂商渠道的账号信息，实例化一个静态的PushAppInfo类，汇总起来。后续步骤需要传入此对象。 该类支持配置所有您需要接入厂商推送机型的信息。无需完整填写构造函数字段。若需要使用某个厂商平台，请完整填写该平台相关字段。 import 'package:tim_ui_kit_push_plugin/model/appInfo.dart'; static final PushAppInfo appInfo = PushAppInfo( hw_buz_id: , // 华为证书ID mi_app_id: , // 小米APPID mi_app_key: , // 小米APPKey mi_buz_id: , // 小米证书ID mz_app_id: , // 魅族APPID mz_app_key: , // 魅族APPKey mz_buz_id: , // 魅族证书ID vivo_buz_id: , // vivo证书ID oppo_app_key: , // OPPO APPKey oppo_app_secret: , // OPPO APP Secret oppo_buz_id: , // OPPO证书ID oppo_app_id: , // OPPO APPID google_buz_id: , // Google FCM证书ID apple_buz_id: , // Apple证书ID ); 说明： 可参见我们DEMO lib/utils/push/push_constant.dart文件 中的做法。 步骤2: 代码中添加厂商工程配置 Google FCM 兼容 Android 模拟器调试 如果需要使用 Firebase Emulator Suite，请打开 android/app/src/main/AndroidManifest.xml 文件，在 application 中新增usesCleartextTraffic字段。 集成 Google Firebase Flutter 能力 请打开 pubspec.yaml 文件，添加对firebase_core的依赖，使用1.12.0版本。 说明： 由于最新版 Google Firebase Flutter 插件最低支持的Dart版本为2.16.0，此处限制为2022年3月发布的1.12.0版本。 > dependencies: firebase_core: 1.12.0 执行flutter pub get完成安装。 在控制台内，执行以下命令，结合操作提示，完成配置 Google Firebase Flutter 项目。 详见 Google FlutterFire 官方文档。 ```shell // 安装Firebase CLI npm install -g firebase-tools curl -sL https://firebase.tools | bash dart pub global activate flutterfire_cli // 生成配置文件 flutterfire configure 4. 执行该步骤后，会将此项目与您在 Google Firebase 创建的项目关联起来，执行结果可以参见下图： ![](https://qcloudimg.tencent-cloud.cn/raw/21aa8a7fc710746e7fafd28178f1e047.png) `main()`方法中初始化 FirebaseAPP。 ```Dart WidgetsFlutterBinding.ensureInitialized(); await Firebase.initializeApp( options: DefaultFirebaseOptions.currentPlatform, ); 不选装 Google FCM 推送 由于国内大部分机型不支持 Google Service，开发者可无需执行此配置。 后续引入插件时，将isUseGoogleFCM字段设为 false 即可。 华为 打开文件 android/build.gradle 。 buildscript>repositories & dependencies下分别添加华为仓库地址和 HMS gradle 插件依赖： buildscript { repositories { google() jcenter() maven {url 'https://developer.huawei.com/repo/'} // 添加华为 maven 仓库地址 } dependencies { // 其他classpath配置 classpath 'com.huawei.agconnect:agcp:1.3.1.300' // 添加华为推送 gradle 插件依赖 } // Set release signing and passwords in the same build configuration file signingConfigs { release { storeFile file('') storePassword '' keyAlias '' keyPassword '' } } buildTypes { // debug模式也要使用证书编译，否则华为指纹验证不通过 debug { signingConfig signingConfigs.release } release { signingConfig signingConfigs.release } } } 打开 android/build.gradle 文件，在allprojects>repositories下添加华为依赖仓库地址： allprojects { repositories { google() jcenter() maven {url 'https://developer.huawei.com/repo/'} // 添加华为 maven 仓库地址 } } 登录华为开放平台，进入我的项目> 选择项目 > 项目设置，下载华为应用最新配置文件 agconnect-services.json。放置于android/app目录下。 应用层引入 HMS SDK gradle 插件 打开 android/app/build.gradle 文件，添加以下配置： // app 其他 gradle 插件 apply plugin: 'com.huawei.agconnect' // HMS SDK gradle 插件 android { // app 配置内容 } 华为/新荣耀推送角标权限 打开 android/app/src/main/AndroidManifest.xml 文件，如下添加 uses-permission 。 vivo 配置 APPID 及 APPKey 打开 android/app/build.gradle 文件，如下配置 vivo 的 APPID 和 App_Key。 android: { defaultConfig { manifestPlaceholders = [ .... vivo_APPID: \"vivo的APPID\" vivo_APPKEY:\"vivo的APP_Key\", ..... ] } } 打开 android/app/src/main/AndroidManifest.xml 文件，在 中，如下添加meta-data。 VIVO角标权限 打开 android/app/src/main/AndroidManifest.xml 文件，如下添加 uses-permission 。 小米/OPPO/魅族 打开 android/app/build.gradle 文件，在 defaultConfig 中加入包名。defaultConfig { applicationId \"${替换成您的包名}\" ... } 打开 android/app/src/main/AndroidManifest.xml 文件，配置各厂商权限列表。 步骤3: 应用启动时初始化 调用插件init方法。该步骤会完成初始化各厂商通道。 该步骤建议在应用启动后就执行调用。 说明： 由于国内大部分 Android 设备不支持 Google Service, 因此提供一个开关isUseGoogleFCM供开发者根据主要用户群体判断，是否启用 Google Firebase Cloud Messaging 推送服务。 import 'package:tim_ui_kit_push_plugin/tim_ui_kit_push_plugin.dart'; final TimUiKitPushPlugin cPush = TimUiKitPushPlugin( isUseGoogleFCM: bool, // 是否启用Google Firebase Cloud Messaging，默认true启用 ); cPush.init( pushClickAction: pushClickAction, // 单击通知后的事件回调，会在STEP6讲解 appInfo: PushConfig.appInfo, // 传入STEP1做的appInfo ); 初始化结束后，需要为部分厂商创建消息通道，如OPPO和小米均需此配置。调用createNotificationChannel方法即可。 说明： 如果向厂商申请的 channel ID 一致，同一个 channel ID 调用一次即可。 cPush.createNotificationChannel( channelId: \"new_message\", channelName: \"消息推送\", channelDescription: \"推送新聊天消息\"); 部分厂商（如 OPPO）默认不提供推送权限，需要开发者手动申请。调用requireNotificationPermission方法即可。 说明： 申请权限的时机可由您自行决定，您可以在用户登录成功后再调用。 cPush.requireNotificationPermission(); 步骤4: 上报 Token 及证书 ID 需要将当前设备对应厂商的证书 ID 及 Device Token 上报至腾讯云即时通信后台，服务端才可正常使用厂商通道下行通知。 插件支持自动在appInfo内找到当前厂商的证书ID，并自动完成Token上报。 说明： 根据个保法内隐私相关规定，请在用户Login后再调用该方法上报。 Device Token 在同一设备保持一致，仅需在登录时上报一次即可，无需每次启动都上报。 import 'package:tim_ui_kit_push_plugin/tim_ui_kit_push_plugin.dart'; final TimUiKitPushPlugin cPush = TimUiKitPushPlugin( isUseGoogleFCM: false, ); final bool isUploadSuccess = await cPush.uploadToken(PushConfig.appInfo); 步骤5: 前后台切换监听 需要在每次切换前后台时，通过 IM SDK 上报 IM 后端当前状态。 若为前台在线状态，则收到新消息不触发 notification 推送，反之则会进行推送。 具体请查看 Flutter 官方监听前后台切换方案。 建议：在应用切换到 inactive/paused 状态前，使用插件中setBadgeNum( int badgeNum )方法，将最新未读数同步至桌面角标。iOS 角标由 IM SDK 自动管理，此处本插件支持配置 XIAOMI（MIUI6 - MIUI 11机型）, HUAWEI, HONOR, vivo 及 OPPO 设备角标。 说明： OPPO 角标属于 OPPO 侧高级权益，不默认开放。如需使用，请自行联系 OPPO 应用推送权益对接人。 /// App @override void didChangeAppLifecycleState(AppLifecycleState state) async { print(\"--\" + state.toString()); int? unreadCount = await _getTotalUnreadCount(); switch (state) { case AppLifecycleState.inactive: TencentImSDKPlugin.v2TIMManager .getOfflinePushManager() .doBackground(unreadCount: unreadCount ?? 0); if(unreadCount != null){ cPush.setBadgeNum(unreadCount); } break; case AppLifecycleState.resumed: TencentImSDKPlugin.v2TIMManager .getOfflinePushManager() .doForeground(); break; case AppLifecycleState.paused: TencentImSDKPlugin.v2TIMManager .getOfflinePushManager() .doBackground(unreadCount: unreadCount ?? 0); if(unreadCount != null){ cPush.setBadgeNum(unreadCount); } break; } } 步骤6: 发消息配置及单击通知跳转 发送消息 直接通过 SDK 发送 如您自行接入腾讯云 IM SDK，请在发消息时配置OfflinePushInfo offlinePushInfo字段。 OfflinePushInfo({ this.title = '', // 推送通知标题。留空字符串时，按照优先级，IM后台自动替换成 sender的昵称 => sender ID。因此，如无特殊需求，该字段建议留空，可达到和微信一致的效果 this.desc = '', // 推送第二行小字部分 this.disablePush = false, this.ext = '', // 推送内额外信息，对方可于单击通知跳转时拿到。建议传含Conversation信息的JSON，用于收件方跳转至对应Chat。可参见下方TUIKit的实例代码。 this.androidOPPOChannelID = '', // OPPO的channel ID }); 接入TUIKit 如果您使用我们的 Flutter TUIKit 组件库，可直接在TIMUIKitChat组件TIMUIKitChatConfig中，使用notificationTitle/notificationOPPOChannelID/notificationBody/notificationExt/notificationIOSSound定义自定义推送。详情如下： TIMUIKitChat( config: TIMUIKitChatConfig( notificationTitle: \"\",// 推送通知标题。留空字符串时，按照优先级，IM后台自动替换成sender的昵称 => sender ID。因此，如无特殊需求，该字段建议留空，可达到和微信一致的效果 notificationOPPOChannelID: \"\", // 用于推送消息的OPPO配置Channel ID notificationBody: (V2TimMessage message, String convID, ConvType convType) { return \"您根据给出的参数自定义的第二行通知\"; }, notificationExt: (V2TimMessage message, String convID, ConvType convType) { // 您根据给出的参数自定义的EXT字段：此处建议传conversation id，JSON格式，即如下所示 String createJSON(String convID){ return \"{\\\"conversationID\\\": \\\"$convID\\\"}\"; } String ext = (convType == ConvType.c2c ? createJSON(\"c2c_${message.sender}\") : createJSON(\"group_$convID\")); return ext; } ) ) 处理单击回调 此时填上 步骤3 初始化时，为 pushClickAction 埋的坑。 初始化时，注册该回调方法，可拿到含推送本体及 ext 信息在内的 Map。 如果上一步创建 OfflinePushInfo 时，在 ext 内传入了含 conversationID 的 JSON，此时即可直接跳转到对应 Chat。 说明： 在后台跳转情况下，此时 Flutter 首页可能已经 unmounted，无法为跳转提供 context，因此建议启动时缓存一个 context，保证跳转成功。 建议在跳转成功后，及时清除通知栏中其他本应用的通知，避免太多 IM 消息堆积其中。调用插件中clearAllNotification()方法即可。 BuildContext? _cachedContext; final TimUiKitPushPlugin cPush = TimUiKitPushPlugin( isUseGoogleFCM: false, ); @override void initState() { super.initState(); _cachedContext = context; } void handleClickNotification(Map msg) async { String ext = msg['ext'] ?? \"\"; Map extMsp = jsonDecode(ext); String convId = extMsp[\"conversationID\"] ?? \"\"; // 此处建议判断当前打开的页面是否是将要跳转的Conversation。 // 如果是，建议阻止跳转，以避免进入多个相同页面。 final targetConversationRes = await TencentImSDKPlugin.v2TIMManager .getConversationManager() .getConversation(conversationID: convId); V2TimConversation? targetConversation = targetConversationRes.data; if(targetConversation != null){ cPush.clearAllNotification(); Navigator.push( _cachedContext ?? context, MaterialPageRoute( builder: (context) => Chat( selectedConversation: targetConversation, ), )); } } 步骤7: 使用 TRTC 打单聊语音/视频通话，发送离线推送 一般情况下，发起 TRTC 通话使用信令消息通知对方。您可在信令消息中，按照 步骤6，加入offlinePushInfo字段。 Flutter 通话插件接入 如果您使用到我们的 tim_ui_kit_calling_plugin 插件，请将其升级至0.2.0版本以上，即可使用离线推送能力。 参见如下示例，直接在call方法第三个参数中，传入offlinePush对象即可。 final user = await sdkInstance.getLoginUser(); final myId = user.data; OfflinePushInfo offlinePush = OfflinePushInfo( title: \"\", desc: \"邀请您语音通话\", ext: \"{\\\"conversationID\\\": \\\"c2c_$myId\\\"}\", disablePush: false, ignoreIOSBadge: false, androidOPPOChannelID: PushConfig.OPPOChannelID ); _calling?.call(widget.selectedConversation.userID!, CallingScenes.Audio, offlinePush); 说明： 通话群邀请暂不支持离线推送。 使用插件跑通离线推送（iOS 增补） 本部分在使用插件跑通离线推送（Android）完成的基础上，补充对应步骤 iOS 端需要做的事情。 该部分没有提到过的步骤，和 Android 端一致。 步骤2: 代码中添加 iOS 工程配置 使用 Xcode 打开您的项目，在 Runner>Target 中，配置支持 Push 的 Signing Profile。 并在左上角新增Push Notification的 Capability。 执行flutter pub get安装好插件后进入 iOS 目录，执行：pod install安装依赖库。 将以下代码添加到 iOS 工程下ios/Runner/AppDelegate.swift文件didFinishLaunchingWithOptions方法中。 Objective-C：if (@available(iOS 10.0, *)) { [UNUserNotificationCenter currentNotificationCenter].delegate = (id) self; } Swift：if #available(iOS 10.0, *) { UNUserNotificationCenter.current().delegate = self as? UNUserNotificationCenterDelegate } 如果不使用 Google Firebase 套件，需要在info.plist加入如下字段。flutter_apns.disable_firebase_core 步骤3: 应用启动时初始化 调用插件init方法。该步骤会完成初始化各厂商通道，并申请厂商通知权限。该步骤建议在应用启动后就执行调用。 import 'package:tim_ui_kit_push_plugin/tim_ui_kit_push_plugin.dart'; final TimUiKitPushPlugin cPush = TimUiKitPushPlugin(); cPush.init( pushClickAction: pushClickAction, // 单击通知后的事件回调，会在STEP6讲解 appInfo: PushConfig.appInfo, // 传入STEP1做的appInfo ); 步骤6: 发消息配置及单击通知跳转 发送消息 直接通过 SDK 发送 如您自行接入腾讯云 IM SDK，请在发消息时配置OfflinePushInfo offlinePushInfo字段。 OfflinePushInfo({ // ..其他配置 this.iOSSound = \"\", // iOS离线推送声音设置， 当 iOSSound = kIOSOfflinePushNoSound，表示接收时不会播放声音。 当 iOSSound = kIOSOfflinePushDefaultSound，表示接收时播放系统声音。 如果要自定义 iOSSound，需要先把语音文件链接进 Xcode 工程，然后把语音文件名（带后缀）设置给 iOSSound。 this.ignoreIOSBadge = false, }); 接入TUIKit 如果您使用我们的 Flutter TUIKit 组件库，可直接在TIMUIKitChat组件TIMUIKitChatConfig中，使用notificationTitle/notificationOPPOChannelID/notificationBody/notificationExt/notificationIOSSound定义自定义推送。详情如下： TIMUIKitChat( config: TIMUIKitChatConfig( // ..其他配置 notificationIOSSound: \"\", // iOS离线推送声音设置， 当 iOSSound = kIOSOfflinePushNoSound，表示接收时不会播放声音。 当 iOSSound = kIOSOfflinePushDefaultSound，表示接收时播放系统声音。 如果要自定义 iOSSound，需要先把语音文件链接进 Xcode 工程，然后把语音文件名（带后缀）设置给 iOSSound。 ) ) 调试 离线推送自查 您可使用 离线推送自查 工具，检测终端状态/证书上报及发送测试消息。 vivo 调试 由于 vivo 官方限制，应用在 vivo 应用市场上架前，不允许使用正式 PUSH 能力，详见此文档。 开发过程中，需要调试，请参见本步骤： 获取测试设备（vivo 真机）的 regId（我们称做 Device Token）。 在 vivo 控制台内，添加该设备为测试设备。 此时可推送测试消息至测试设备。可参见 vivo 单播推送文档。 由于腾讯云 IM 控制台的测试推送，和直接使用 IM SDK 发送聊天消息的推送，均不能修改推送模式为测试。因此请使用我们提供的，可触发测试消息的 JS 脚本，单击此处下载。 下载后，请根据顶部五行注释，填入vivo相关参数。默认ext为conversationID，如果在处理单击回调跳转（可参见 步骤6）时需要其他字段，请自行修改 JS 代码。 执行脚本。npm install axios npm install js-md5 后node testvivo。推送结果会显示在 log 最后一行。 此时测试终端可收到测试消息推送，单击消息后，可触发 Dart 层回调。 厂商推送限制 1、国内厂商都有消息分类机制，不同类型也会有不同的推送策略。如果想要推送及时可靠，需要按照厂商规则设置自己应用的推送类型为高优先级的系统消息类型或者重要消息类型。反之离线推送消息会受厂商推送消息分类影响，与预期会有差异。 2、另外，一些厂商对于应用每天的推送数量也是有限制的，可以在厂商控制台查看应用每日限制的推送数量。 如果离线推送消息出现推送不及时或者偶尔收不到情况，需要考虑下这里： 华为：将推送消息分为服务与通讯类和资讯营销类，推送效果和策略不同。另外，消息分类还和自分类权益有关： 无自分类权益，推送消息厂商还会进行二次智能分类 。 有申请自分类权益，消息分类会按照自定义的分类进行推送。 具体请参见 厂商描述。 vivo：将推送消息分为系统消息类和运营消息类，推送效果和策略不同。系统消息类型还会进行厂商的智能分类二次修正，若智能分类识别出不是系统消息，会自动修正为运营消息，如果误判可邮件申请反馈。另外，消息推送也受日推总数量限制，日推送量由应用在厂商订阅数统计决定。 具体请参见 厂商描述1 或 厂商描述2。 OPPO：将推送消息分为私信消息类和公信消息类，推送效果和策略不同。其中私信消息是针对用户有一定关注度，且希望能及时接收的信息，私信通道权益需要邮件申请。公信通道推送数量有限制。 具体请参见 厂商描述1 或 厂商描述2。 小米：将推送消息分为重要消息类和普通消息类，推送效果和策略不同。其中重要消息类型仅允许即时通讯消息、个人关注动态提醒、个人事项提醒、个人订单状态变化、个人财务提醒、个人状态变化、个人资源变化、个人设备提醒这8类消息推送，可以在厂商控制台申请开通。普通消息类型推送数量有限制。 具体请参见 厂商描述1 或 厂商描述2。 魅族：推送消息数量有限制，具体可参见 魅族平台合约。 FCM：推送上行消息频率有限制。 具体请参见 厂商描述。 收不到离线推送怎么排查？ 1、OPPO 手机 OPPO 手机收不到推送一般有以下几种情况： 按照 OPPO 推送官网要求，在 Android 8.0 及以上系统版本的 OPPO 手机上必须配置 ChannelID，否则推送消息无法展示。配置方法可以参见 OPPO 推送配置。 在消息中 透传的离线推送的自定义内容 不是 JSON 格式，会导致 OPPO 手机收不到推送。 OPPO 安装应用通知栏显示默认关闭，需要确认下开关状态。 2、发送消息为自定义消息 自定义消息的离线推送和普通消息不太一样，自定义消息的内容我们无法解析，不能确定推送的内容，所以默认不推送，如果您有推送需求，需要您在sendMessage的时候设置offlinePushInfo的desc字段，推送的时候会默认展示 desc 信息。 3、设备通知栏设置影响 离线推送的直观表现就是通知栏提示，所以同其他通知一样受设备通知相关设置的影响，以华为为例： “手机设置-通知-锁屏通知-隐藏或者不显示通知”，会影响锁屏状态下离线推送通知显示。 “手机设置-通知-更多通知设置-状态栏显示通知图标”，会影响状态栏下离线推送通知的图标显示。 “手机设置-通知-应用的通知管理-允许通知”，打开关闭会直接影响离线推送通知显示。 “手机设置-通知-应用的通知管理-通知铃声” 和 “手机设置-通知-应用的通知管理-静默通知”，会影响离线推送通知铃音的效果。 4、按照流程接入完成，还是收不到离线推送 首先在 IM 控制台通过 离线测试工具 自测下是否可以正常推送。 推送异常情况，设备状态异常，需要检查下 IM 控制台配置各项参数是否正确，再者需要检查下代码初始化注册逻辑，包括厂商推送服务注册和 IM 设置离线推送配置相关逻辑是否正确设置。 推送异常情况，设备状态正常，需要看下是否需要正确填写 channel ID 或者后台服务是否正常。 离线推送依赖厂商能力，一些简单的字符可能会被厂商过滤不能透传推送。如 OPPO 则对 ext 字段限制为 JSON 格式。 如果离线推送消息出现推送不及时或者偶尔收不到情况，需要看下厂商的推送限制。 在线推送-在本地创建新消息通知 本文以上部分介绍了，如何使用本插件，结合腾讯云IM后端的推送服务，实现通过厂商通道的离线推送。 但是，在某些情况下，厂商离线推送并不适用。如，您的目标客户端机型非我们兼容的厂商，使用华强北定制的Android设备等。 此时，您只得通过在线监听收到新消息回调，在客户端上，手动触发创建通知。这仅适用于，应用未被kill掉，还处于前后台状态，能正常与IM服务端通信。 为此种情况，本插件在0.3版本中，新增两个本地创建消息的方法，displayNotification 自定义通知，及 displayDefaultNotificationForMessage 根据消息生成默认通知，您可按需使用。 接入前准备 在您的项目中安装IM Flutter 推送插件： flutter pub add tim_ui_kit_push_plugin 并根据该指南，在插件市场，启用推送插件。 Android 确保 @mipmap/ic_launcher 存在且为您的应用 Icon。完整路径：android/app/src/main/res/mipmap/ic_launcher.png 如果不存在，可手动将您的应用Icon复制进去，或通过Android Studio自动创建不同分辨率版本（mipmap 目录右键，New => Image Asset）。 打开 android/app/src/main/AndroidManifest.xml 文件，在您应用的主 activity 中，添加如下代码。 iOS 如果您已经配置iOS端离线推送，可忽略本部分。若无，请在 ios/Runner/AppDelegate.swift 或 ios/Runner/AppDelegate.m文件中， didFinishLaunchingWithOptions 函数内，添加如下代码。可参考我们的DEMO。 Objective-C: if (@available(iOS 10.0, *)) { [UNUserNotificationCenter currentNotificationCenter].delegate = (id) self; } Swift: if #available(iOS 10.0, *) { UNUserNotificationCenter.current().delegate = self as? UNUserNotificationCenterDelegate } 初始化插件 请在IM SDK 初始化完成后，初始化本 Push 插件。实例化一个 cPush 插件类，供后续调用。 final TimUiKitPushPlugin cPush = TimUiKitPushPlugin(); cPush.init( // 此处绑定点击通知的跳转函数，下文会介绍 pushClickAction: onClickNotification, ); 监听新消息回调触发通知 监听 V2TimAdvancedMsgListener 如果您已经挂载监听 V2TimAdvancedMsgListener ，可忽略本部分；若无，请在IM login后，挂载监听。 代码如下： final advancedMsgListener = V2TimAdvancedMsgListener( onRecvNewMessage: (V2TimMessage newMsg) { // 这里完成监听回调触发事件 // 请在这里调用下一步提及的触发本地消息通知API }, }); TencentImSDKPlugin.v2TIMManager .getMessageManager() .addAdvancedMsgListener(listener: advancedMsgListener); 触发本地消息通知 请从我们提供的两个API中，displayNotification 自定义通知，及 displayDefaultNotificationForMessage 根据消息生成默认通知，选一个合适的API。 对于Android端，这两个API均需传入 channelID 及 channelName。若还未创建 Android Push Channel ，请使用插件 createNotificationChannel API创建。 cPush.createNotificationChannel( channelId: \"new_message\", channelName: \"消息推送\", channelDescription: \"推送新聊天消息\"); displayNotification 本API需要您提供 title, body, 及 ext 用于点击跳转信息，三个参数。您可以根据需要自行解析收到的 V2TimMessage，生成这三个字段。 为便于跳转，此处ext的生成规则可查看 displayDefaultNotificationForMessage 的代码。 cPush.displayNotification( channelID: \"new_message\", channelName: \"消息推送\", title: \"\", body: \"\", ext: \"\" ); displayDefaultNotificationForMessage 为了方便，推荐您使用此API，自动根据 V2TimMessage，生成通知。 您只需传入一个 V2TimMessage 即可。 cPush.displayDefaultNotificationForMessage( message: message, channelID: \"new_message\", channelName: \"消息推送\"); 点击通知跳转 本步骤与 上文离线推送的步骤6 点击回调一致，均为在 ext 中，读取需要跳转的 conversation，并导航过去。 如果您在上一步使用 displayDefaultNotificationForMessage，或在 displayNotification 中使用与default相同的ext生成函数，此时的ext结构为：\"conversationID\": \"对应的conversation\"。 此时，填上初始化时，为 pushClickAction 埋的坑。 初始化时，注册该回调方法，可拿到含推送本体及 ext 信息在内的 Map。 说明： 在后台跳转情况下，此时 Flutter 首页可能已经 unmounted，无法为跳转提供 context，因此建议启动时缓存一个 context，保证跳转成功。 说明： 建议跳转成功后，清除通知栏中其他通知消息，避免太多IM消息堆积在通知栏中。调用插件中clearAllNotification()方法即可。 BuildContext? _cachedContext; final TimUiKitPushPlugin cPush = TimUiKitPushPlugin( isUseGoogleFCM: false, ); @override void initState() { super.initState(); _cachedContext = context; } void onClickNotification(Map msg) async { String ext = msg['ext'] ?? \"\"; Map extMsp = jsonDecode(ext); String convId = extMsp[\"conversationID\"] ?? \"\"; // 若当前的会话与要跳转至的会话一致，则不跳转 // 此处建议您自行判断下，用户当前打开的页面 final targetConversationRes = await TencentImSDKPlugin.v2TIMManager .getConversationManager() .getConversation(conversationID: convId); V2TimConversation? targetConversation = targetConversationRes.data; if(targetConversation != null){ cPush.clearAllNotification(); Navigator.push( _cachedContext ?? context, MaterialPageRoute( builder: (context) => Chat( selectedConversation: targetConversation, ), )); } } 如果您自定义了 ext 结构，则需自实现点击跳转函数。 此时，您已完成在线推送的接入。测试通过后，你可以在 onRecvNewMessage 内定义，触发推送通知的时机及场景。 联系我们 如果您在接入使用过程中有任何疑问，请加入QQ群：788910197 咨询。 "},"kuai-su-ji-cheng/zi-shi-xian-ui/ben-di-sou-suo/":{"url":"kuai-su-ji-cheng/zi-shi-xian-ui/ben-di-sou-suo/","title":"本地搜索","keywords":"","body":""},"kuai-su-ji-cheng/zi-shi-xian-ui/ben-di-sou-suo/sou-suo-xiao-xi.html":{"url":"kuai-su-ji-cheng/zi-shi-xian-ui/ben-di-sou-suo/sou-suo-xiao-xi.html","title":"搜索消息","keywords":"","body":"功能描述 本地消息搜索，提升 App 使用体验必备功能，可以帮助用户从纷繁复杂的信息中直接找到预期内容，快捷方便；也可作为运营工具，增加相关内容的引导，简洁高效。 说明： 消息搜索只能搜索本地存储的消息，例如接收到的消息、调用拉取历史消息接口得到的消息等。 消息搜索功能仅 Flutter 3.8.0以上版本支持。 本地消息搜索为 IM 旗舰版功能，购买 旗舰版套餐包 后可使用，详见 价格说明。 消息搜索类介绍 消息搜索参数类 消息搜索参数类为 V2TimMessageSearchParam(dart)。搜索消息时，SDK 会按照该对象的设置，执行不同的搜索逻辑。 V2TIMMessageSearchParam 的参数说明如下： 参数 含义 说明 keywordList 关键字列表 最多支持 5 个。当消息发送者以及消息类型均未指定时，必须设置关键字列表；否则，关键字列表可以为空。 keywordListMatchType 指定关键字列表匹配类型 可设置为 “或” 关系搜索，或 “与” 关系搜索。取值分别为 V2TIM_KEYWORD_LIST_MATCH_TYPE_OR 和 V2TIM_KEYWORD_LIST_MATCH_TYPE_AND。默认为 “或” 关系搜索。 senderUserIDList 指定 userID 发送的消息 最多支持 5 个。 messageTypeList 指定搜索的消息类型集合 传空表示搜索支持的全部类型消息（V2TIMFaceElem 和 V2TIMGroupTipsElem 不支持搜索）。其他类型取值参考 V2TIMElemType(dart)。 conversationID 搜索 “全部会话” 还是搜索 “指定的会话” conversationID 为空，搜索全部会话；conversationID 不为空，搜索指定会话。 searchTimePosition 搜索的起始时间点 默认为 0（从现在开始搜索）。UTC 时间戳，单位：秒。 searchTimePeriod 从起始时间点开始的过去时间范围 默认为 0（不限制时间范围）。24x60x60 代表过去一天。单位：秒。 pageIndex 分页的页号 用于分页展示查找结果，0 表示首页。 pageSize 每页结果数量 用于分页展示查找结果，如不希望分页可将其设置成 0。但如果结果数量太多，一次性拉取可能会引发性能问题。 消息搜索结果类 消息搜索结果类为 V2TIMMessageSearchResult(dart)。参数说明如下： 参数 含义 说明 totalCount 搜索结果总数 如果搜索指定会话，返回满足搜索条件的消息总数；如果搜索全部会话，返回满足搜索条件的消息所在的所有会话总数量。 messageSearchResultItems 指定关键字列表匹配类型 如果搜索指定会话，返回结果列表只包含该会话结果；如果搜索全部会话，会对满足搜索条件的消息根据会话 ID 分组，分页返回分组结果。 其中 messageSearchResultItems 是个列表，内含 V2TIMMessageSearchResultItem(dart) 对象，参数说明如下： 参数 含义 说明 conversationID 会话 ID —— messageCount 消息数量 当前会话一共搜索到了多少条符合要求的消息。 messageList 满足搜索条件的消息列表 如果搜索指定会话，messageList 中装载的是本会话中所有满足搜索条件的消息列表。如果搜索全部会话，messageList 中装载的消息条数会有如下两种可能： 如果某个会话中匹配到的消息条数 > 1，则 messageList 为空，您可以在 UI 上显示 “{messageCount} 条相关记录”。 如果某个会话中匹配到的消息条数 = 1，则 messageList 为匹配到的那条消息，您可以在 UI 上显示之，并高亮匹配关键词。 搜索全部会话的消息 当用户在搜索框输入关键字搜索消息时，您可以调用 searchLocalMessages (dart) 搜索 IM SDK 本地存储的消息。 如果您希望在全部会话范围内搜索，只需要将 V2TIMMessageSearchParam 中的 conversationID 设置为空（null/nil) 或者不设置即可。 示例代码如下： // 通过关键词搜索本地消息 V2TimValueCallback searchMessage = await messageManager.searchLocalMessages(searchParam: V2TimMessageSearchParam(keywordList: ['关键词1'],pageIndex: 0,pageSize: 10,type: 1)); 搜索指定会话的消息 当用户在搜索框输入关键字搜索消息时，您可以调用 searchLocalMessages (dart) 搜索 IM SDK 本地存储的消息。 示例代码如下： // 通过执行会话id和关键词搜索本地消息 V2TimValueCallback searchMessage = await messageManager.searchLocalMessages(searchParam: V2TimMessageSearchParam(keywordList: ['关键词1'],pageIndex: 0,pageSize: 10,type: 1,conversationID:'conversationID')); 搜索典型场景示例 普通的 IM 聊天软件，搜索界面的展示通常分这几种场景： 图 1：搜索聊天记录 图 2：搜索更多聊天记录 图 3：搜索指定会话的消息 下文我们将依次向您展示如何利用 IM SDK 的搜索 API 实现上图的典型场景。 展示最近几个活跃的会话 如图 1 所示，最下方是搜索到的消息所属的最近 3 个会话列表，实现方式如下： 设置搜索参数 V2TIMMessageSearchParam conversationID 设置为 null，表示搜索所有会话的消息。 pageIndex 设置为 0，表示搜索到的消息所属的会话的首页数据。 pageSize 设置为 3，表示返回最近的会话数量，UI 上一般显示 3 条。 处理搜索回调结果 V2TIMMessageSearchResult totalCount 表示匹配到的消息所属的所有会话数量。 messageSearchResultItems 列表为最近 3（即入参 pageSize) 个会话信息。其中元素 V2TIMMessageSearchResultItem 的 messageCount 表示当前会话搜索到的消息总数量； 搜索到的消息条数 > 1，则 messageList 为空，您可以在 UI 上显示 “4 条相关聊天记录”，其中的 4 为 messageCount。 搜索到的消息条数 = 1，则 messageList 为匹配到的那条消息，您可以在 UI 上显示消息内容并高亮搜索关键词，例如图中的 “test”。 示例代码如下： // 通过指定messageTypeList上搜索指定类型消息 V2TimValueCallback searchMessage = await messageManager.searchLocalMessages(searchParam: V2TimMessageSearchParam(keywordList: ['关键词1'],pageIndex: 0,pageSize: 10,type: 1,conversationID: \"\",messageTypeList: [MessageElemType.V2TIM_ELEM_TYPE_TEXT])); 搜索自定义消息 通常情况下，如果您使用接口 createCustomMessage(data)(dart)创建自定义消息，该消息无法被搜到，因为 SDK 将该自定义消息保存为二进制数据流。 如果您希望自定义消息可以被搜到，需要使用接口 createCustomMessage(data, description, extension) dart 来创建并发送自定义消息，把需要搜索的文本放到 description 参数中。 如果您配置了离线推送功能，设置参数 description 后，自定义消息也会有离线推送且通知栏展示该参数内容。 如果不需要离线推送可以用发消息接口 sendMessage (dart) 的参数 V2TIMOfflinePushInfo 中的 disablePush 来控制。 如果推送的通知栏内容不想展示为被搜索的文本，可以用参数 V2TIMOfflinePushInfo 中的 desc 来另外设置推送内容。 搜索富媒体消息 富媒体消息包含文件、图片、语音、视频消息。 对于文件消息，界面通常显示文件名。如果调用 createFileMessage 创建文件消息时传入 fileName 参数，fileName 会作为文件消息被搜索的内容，与搜索关键词进行匹配。如果未设置 fileName，SDK 则会自动从 filePath 提取文件名作为搜索内容。 fileName 和 filePath 信息会保存到本地和服务器，换设备拉取相关信息后均可搜索。 对于图片、语音、视频消息，并没有类似 fileName 这种名称，界面通常显示缩略图或时长，此时指定 keywordList 搜索无效。 如果您希望搜索出此类消息，可以指定 messageTypeList 为 V2TIM_ELEM_TYPE_IMAGE/V2TIM_ELEM_TYPE_SOUND/V2TIM_ELEM_TYPE_VIDEO 做分类搜索，此时会搜索出所有指定类型的消息。 交流与反馈 欢迎加入 QQ 群进行技术交流和反馈问题，QQ 群：788910197。 "},"kuai-su-ji-cheng/zi-shi-xian-ui/ben-di-sou-suo/sou-suo-hao-you.html":{"url":"kuai-su-ji-cheng/zi-shi-xian-ui/ben-di-sou-suo/sou-suo-hao-you.html","title":"搜索好友","keywords":"","body":"功能描述 用户搜索只能搜索本地存储过的用户，例如拉取过的好友列表，拉取过的用户资料等。 说明： flutter sdk 3.8.0支持 搜索本地用户资料 调用接口 searchFriends (dart) 可以搜索本地用户资料。 您可以设置搜索关键字 keywordList，并指定搜索的范围，即是否搜索用户的 userID、nickName、remark 字段。 示例代码如下： // 通过关键词搜索好友 V2TimValueCallback> serchFriend= await friendshipManager.searchFriends(searchParam: V2TimFriendSearchParam(isSearchNickName: true,isSearchRemark: true,isSearchUserID: true,keywordList: ['关键词'])); 交流与反馈 欢迎加入 QQ 群进行技术交流和反馈问题，QQ 群：788910197。 "},"kuai-su-ji-cheng/zi-shi-xian-ui/ben-di-sou-suo/sou-suo-qun-zu.html":{"url":"kuai-su-ji-cheng/zi-shi-xian-ui/ben-di-sou-suo/sou-suo-qun-zu.html","title":"搜索群组","keywords":"","body":"功能描述 群组搜索只能搜索本地存储过的群组，例如已加入的群组列表，拉取过的群组资料等。 说明： flutter sdk 3.8.0支持 搜索本地群组 您可以调用接口 searchGroups (dart) 搜索本地群组。 您可以设置搜索关键字 keywordList，并指定搜索的范围，即是否搜索群组的 userID、groupName 字段。 示例代码如下： // 通过关键搜索群组 V2TimValueCallback> searchGroup = await groupManager.searchGroups(searchParam: V2TimGroupSearchParam(keywordList: ['关键词'],isSearchGroupID: true,isSearchGroupName: true)); 交流与反馈 欢迎加入 QQ 群进行技术交流和反馈问题，QQ 群：788910197。 "},"kuai-su-ji-cheng/zi-shi-xian-ui/ben-di-sou-suo/sou-suo-qun-cheng-yuan.html":{"url":"kuai-su-ji-cheng/zi-shi-xian-ui/ben-di-sou-suo/sou-suo-qun-cheng-yuan.html","title":"搜索群成员","keywords":"","body":"功能描述 群成员搜索只能搜索本地存储过的群成员，例如拉取过的群成员列表、拉取过的群成员资料等。 说明： flutter sdk 3.8.0支持 搜索本地群组 您可以调用接口 searchGroupMembers (dart) 搜索本地群成员。 您可以设置搜索关键字 keywordList，并指定搜索的范围，即是否搜索群成员的 memberUserID、memberNickName、memberRemark、memberNameCard 字段。 根据 searchGroupMembers 入参 V2TIMGroupMemberSearchParam (dart) 中的 groupIDList 是否为空（null/nil），分为两种情况： 如果设置 groupIDList 为空，代表搜索全部群中的群成员，返回的结果会按照 groupID 进行分类； 如果设置 groupIDList 不为空，代表搜索指定群中的群成员。 示例代码如下： // 通过关键字、群id搜索群成员 V2TimValueCallback searchGroupMem = await groupManager.searchGroupMembers(param: V2TimGroupMemberSearchParam(groupIDList: ['可指定群ID'],keywordList: ['关键字'],isSearchMemberNameCard: true,isSearchMemberNickName: true,isSearchMemberRemark: true,isSearchMemberUserID: true,)); 交流与反馈 欢迎加入 QQ 群进行技术交流和反馈问题，QQ 群：788910197。 "},"kuai-su-ji-cheng/zi-shi-xian-ui/xin-ling-xiang-guan/":{"url":"kuai-su-ji-cheng/zi-shi-xian-ui/xin-ling-xiang-guan/","title":"信令相关","keywords":"","body":""},"kuai-su-ji-cheng/zi-shi-xian-ui/xin-ling-xiang-guan/xin-ling-guan-li.html":{"url":"kuai-su-ji-cheng/zi-shi-xian-ui/xin-ling-xiang-guan/xin-ling-guan-li.html","title":"信令管理","keywords":"","body":"概述 信令接口是基于 IM 消息提供的一套邀请流程控制的接口，可以实现多种实时场景，例如： 直播聊天室中进行上麦、下麦管理。 聊天场景中实现类似微信中的音视频通话功能。 教育场景中老师邀请同学们举手、发言的流程控制。 功能 信令接口支持以下功能： 单聊邀请 在使用 简单收发消息接口 或 富媒体消息接口 进行单聊的同时，可以使用 invite 信令接口进行点对点呼叫，对方收到邀请通知 onReceiveNewInvitation 后可以选择接受、拒绝或等待超时。 群聊邀请 首先需通过 建群、加群、退群、解散群以及群资料 和 群成员 相关接口完成对群组的管理，并监听群内的相关事件回调 V2TimGroupListener。然后群成员可以在群内发起群呼叫邀请 inviteInGroup，被邀请的群成员会收到邀请通知 onReceiveNewInvitation 后可以选择接受、拒绝或等待超时。 取消邀请 邀请者可以在超时前且被邀请者未处理前取消邀请 cancel。被邀请者会收到取消通知 onInvitationCancelled，该邀请流程结束。 接受邀请 被邀请者收到邀请通知 onReceiveNewInvitation 后可以在超时前且邀请者取消前接受邀请 accept，邀请者会收到接受邀请通知 onInviteeAccepted，所有被邀请者处理完后（包括接受、拒绝、超时）该邀请流程结束。 拒绝邀请 被邀请者收到邀请通知 onReceiveNewInvitation后可以在超时前且邀请者取消前拒绝邀请 reject，邀请者会收到拒绝邀请通知 onInviteeRejected，所有被邀请者处理完后（包括接受、拒绝、超时）该邀请流程结束。 邀请超时 若邀请接口的超时时间大于0，且被邀请者未在超时时间之内响应则邀请超时，邀请者和被邀请者都会收到超时通知 onInvitationTimeout，所有被邀请者处理完后（包括接受、拒绝、超时）该邀请流程结束。若邀请接口的超时时间等于0，则不会有超时通知。 应用场景案例 音视频通话 在开源项目 TRTCFlutterScenesDemo 中，我们基于 TRTC 组件 并对其稍作修改提供了一个适合聊天场景的 1v1 和多人音视频通话的方案，您可以直接基于我们提供的 Demo 进行修改适配。我们以 1v1 视频通话为例介绍下信令接口跟 TRTC SDK 的结合使用。 1v1 视频通话的流程： 邀请者根据业务层生成的 roomID 进入该 TRTC 房间，同时调用信令邀请接口 invite 发起音视频通话请求，并把 roomID 放到邀请接口的自定义字段中。 被邀请者收到信令邀请通知 onReceiveNewInvitation，并通过自定义数据拿到 roomID，界面开始响铃。 被邀请者处理邀请通知： 接受邀请需调用信令 accept 接口，并根据 roomID 进入到 TRTC 房间，并同时调用 openCamera() 函数打开自己本地的摄像头，双方收到 TRTC SDK 的 onRemoteUserEnterRoom 回调后记录本次通话的开始时间。 拒绝邀请需调用信令 reject 接口结束本次通话。 如果被邀请者正在跟其他人通话，则调用信令 reject 接口拒绝本次邀请，并在自定义数据中告诉对方是由于本地线路忙而拒绝。 接听并当双方的音视频通道建立完成后，通话的双方都会接收到 TRTC SDK 的 onUserVideoAvailable 的事件通知，表示对方的视频画面已经拿到。此时双方用户均可以调用 TRTC SDK 接口 startRemoteView 展示远端的视频画面。远端的声音默认是自动播放的。 通话结束即某一方挂断电话，该用户退出 TRTC 房间。对方收到 TRTC SDK 的 onRemoteUserLeaveRoom 回调后计算通话总时长并再次发起一次邀请，此邀请的自定义数据中标明是结束通话并附带通话时长，方便 UI 界面做展示。 时序图 教育场景中老师邀请学生举手发言 该场景为老师先让同学们举手，再从举手的同学中选一个同学进行发言。详细流程如下： 老师调用 inviteInGroup 接口邀请同学们举手，自定义 data 中填入“举手操作”，同学们收到 onReceiveNewInvitation 回调。 同学们根据 onReceiveNewInvitation 中的 inviteeList 和 data 字段判断被邀请者里有自己且是举手操作，那么调用 accept 接口举手。 如果有学生举手，所有人都可以收到 onInviteeAccepted 回调，判断 data 中的字段为“举手操作”，展示举手学生列表。 老师从举手成员列表中邀请某个同学进行发言，调用 inviteInGroup 接口，此时自定义 data 中填入“发言操作”，学生们都收到 onReceiveNewInvitation 回调。 学生根据 onReceiveNewInvitation 回调中的 inviteeList 和 data 字段判断被邀请者里有自己且是发言操作，则调用 accept 接口发言。 如果有学生发言，所有人都可以收到 onInviteeAccepted 回调，判断 data 中的字段为“发言操作”，展示发言成员列表。 "},"uikit-sdk-api/TIMUIKitAddFriend.html":{"url":"uikit-sdk-api/TIMUIKitAddFriend.html","title":"TIMUIKitAddFriend","keywords":"","body":""},"uikit-sdk-api/TIMUIKitAddGroup.html":{"url":"uikit-sdk-api/TIMUIKitAddGroup.html","title":"TIMUIKitAddGroup","keywords":"","body":""},"uikit-sdk-api/TIMUIKitBlackList.html":{"url":"uikit-sdk-api/TIMUIKitBlackList.html","title":"TIMUIKitBlackList","keywords":"","body":""},"uikit-sdk-api/TIMUIKitChat.html":{"url":"uikit-sdk-api/TIMUIKitChat.html","title":"TIMUIKitChat","keywords":"","body":""},"uikit-sdk-api/TIMUIKitContact.html":{"url":"uikit-sdk-api/TIMUIKitContact.html","title":"TIMUIKitContact","keywords":"","body":""},"uikit-sdk-api/TIMUIKitConversation.html":{"url":"uikit-sdk-api/TIMUIKitConversation.html","title":"TIMUIKitConversation","keywords":"","body":""},"uikit-sdk-api/TIMUIKitGroup.html":{"url":"uikit-sdk-api/TIMUIKitGroup.html","title":"TIMUIKitGroup","keywords":"","body":""},"uikit-sdk-api/TIMUIKitGroupProfile.html":{"url":"uikit-sdk-api/TIMUIKitGroupProfile.html","title":"TIMUIKitGroupProfile","keywords":"","body":""},"uikit-sdk-api/TIMUIKitNewContact.html":{"url":"uikit-sdk-api/TIMUIKitNewContact.html","title":"TIMUIKitNewContact","keywords":"","body":""},"uikit-sdk-api/TIMUIKitProfile/":{"url":"uikit-sdk-api/TIMUIKitProfile/","title":"TIMUIKitProfile","summary":"用户信息组件","keywords":"","body":"TIMUIKitProfile 组件介绍及使用场景 组件介绍：用户信息组件。 使用场景：展示用户信息时使用。 参数列表 参数 说明 类型 是否必填 userID 需要展示用户信息的用户id String 是 controller 关于用户信息操作的控制器(不可自定义) TIMUIKitProfileController 否 profileWidgetBuilder 用于自定义构建用户信息页面不同部分的构造器 ProfileWidgetBuilder 否 profileWidgetsOrder 用于自定义构建用户信息页面不同部分的排序设置 ListProfileWidgetEnum > 否 builder 用于自定义构建整个用户信息页面的构造器（若使用此属性则profileWidgetBuilder与profileWidgetsOrder失效） ProfileBuilder 否 lifeCycle 用户信息操作时的钩子函数 OnSelProfileLifeCycle 否 代码示例与效果展示 profileWidgetBuilder与profileWidgetsOrder profileWidgetsOrder决定了profileWidgetBuilder中组件在页面的排列顺序。 例如，当profileWidgetsOrder为[ProfileWidgetEnum.userInfoCard,ProfileWidgetEnum.portraitBar]时，userInfoCard组件会在portraitBar组件的上方。 profileWidgetBuilder决定了在TIMUIKitProfile中不同名称的组件的渲染结果。 profileWidgetBuilder中除了searchBar与customBuilder(One-Five)，其余均有默认组件。 代码示例为自定义searchBar与customBuilderOne的示例，如用户需要自定义其余组件，在传入TIMUIKitProfile的profileWidgetBuilder属性中添加组件名即可。 代码示例 _buildBottomOperationList( BuildContext context, V2TimConversation conversation, theme) { final operationList = [ { \"label\": imt(\"发送消息\"), \"id\": \"sendMsg\", }, { \"label\": imt(\"语音通话\"), \"id\": \"audioCall\", }, { \"label\": imt(\"视频通话\"), \"id\": \"videoCall\", }, ]; return operationList.map((e) { return InkWell( onTap: () {}, child: Container( alignment: Alignment.center, padding: const EdgeInsets.symmetric(vertical: 15), decoration: BoxDecoration( color: Colors.white, border: Border(bottom: BorderSide(color: theme.weakDividerColor))), child: Text( e[\"label\"] ?? \"\", style: TextStyle( color: e[\"id\"] != \"deleteFriend\" ? theme.primaryColor : theme.cautionColor, fontSize: 17), ), ), ); }).toList(); } @override Widget build(BuildContext context) { final theme = Provider.of(context).theme; return Scaffold( appBar: AppBar( shadowColor: Colors.white, title: Text( imt(\"详细资料\"), style: const TextStyle(color: Colors.white, fontSize: 17), ), flexibleSpace: Container( decoration: BoxDecoration( gradient: LinearGradient(colors: [ theme.lightPrimaryColor ?? CommonColor.lightPrimaryColor, theme.primaryColor ?? CommonColor.primaryColor ]), ), ), iconTheme: const IconThemeData( color: Colors.white, ), leading: IconButton( padding: const EdgeInsets.only(left: 16), icon: Image.asset( 'images/arrow_back.png', package: 'tim_ui_kit', height: 34, width: 34, ), onPressed: () { Navigator.pop(context, newUserMARK); }, ), ), body: Container( color: theme.weakBackgroundColor, child: TIMUIKitProfile( userID: widget.userID, profileWidgetBuilder: ProfileWidgetBuilder( searchBar: (conversation) => TIMUIKitProfileWidget.searchBar( context, conversation, handleTap: () { Navigator.push( context, MaterialPageRoute( builder: (context) => Search( conversation: conversation, onTapConversation: (V2TimConversation conversation, [V2TimMessage? targetMsg]) { Navigator.push( context, MaterialPageRoute( builder: (context) => Chat( selectedConversation: conversation, initFindingMsg: targetMsg, ), )); }), )); }), customBuilderOne: (bool isFriend, V2TimFriendInfo friendInfo, V2TimConversation conversation) { if (!isFriend) { return Container(); } return Column( children: _buildBottomOperationList( context, conversation, theme)); }), controller: _timuiKitProfileController, profileWidgetsOrder: const [ ProfileWidgetEnum.userInfoCard,//用户信息卡片 ProfileWidgetEnum.portraitBar,//用户头像栏 ProfileWidgetEnum.nicknameBar,//用户昵称栏 ProfileWidgetEnum.userAccountBar,//用户账号栏 ProfileWidgetEnum.signatureBar,//用户签名栏 ProfileWidgetEnum.operationDivider,//分割线 ProfileWidgetEnum.remarkBar,//用户备注 ProfileWidgetEnum.genderBar,//用户性别 ProfileWidgetEnum.birthdayBar,//用户生日 ProfileWidgetEnum.operationDivider,//分割线 ProfileWidgetEnum.searchBar,//搜索组件（自定义） ProfileWidgetEnum.operationDivider,//分割线 ProfileWidgetEnum.addToBlockListBar,//添加黑名单功能 ProfileWidgetEnum.pinConversationBar,//会话置顶功能 ProfileWidgetEnum.messageMute,//禁言用户功能 ProfileWidgetEnum.operationDivider,//分割线 ProfileWidgetEnum.customBuilderOne,//自定义区域一（自定义） ProfileWidgetEnum.addAndDeleteArea//添加或删除功能 ], ), ), ); } 效果展示 builder 代码示例 builder为用于自定义构建整个用户信息页面的构造器 若使用此属性则profileWidgetBuilder与profileWidgetsOrder失效 代码示例为使用自定义builder只展示用户信息卡片、用户性别、用户生日的案例 @override Widget build(BuildContext context) { final theme = Provider.of(context).theme; return Scaffold( appBar: AppBar( shadowColor: Colors.white, title: Text( imt(\"详细资料\"), style: const TextStyle(color: Colors.white, fontSize: 17), ), flexibleSpace: Container( decoration: BoxDecoration( gradient: LinearGradient(colors: [ theme.lightPrimaryColor ?? CommonColor.lightPrimaryColor, theme.primaryColor ?? CommonColor.primaryColor ]), ), ), iconTheme: const IconThemeData( color: Colors.white, ), leading: IconButton( padding: const EdgeInsets.only(left: 16), icon: Image.asset( 'images/arrow_back.png', package: 'tim_ui_kit', height: 34, width: 34, ), onPressed: () { Navigator.pop(context, newUserMARK); }, ), ), body: Container( color: theme.weakBackgroundColor, child: TIMUIKitProfile( builder: (context, friendInfo, conversation, friendType, isMute) { return Column( children: [ TIMUIKitProfileUserInfoCard(userInfo: friendInfo.userProfile), TIMUIKitProfileWidget.genderBar( friendInfo.userProfile?.gender ?? 0), TIMUIKitProfileWidget.birthdayBar( friendInfo.userProfile?.birthday) ], ); }, userID: widget.userID, controller: _timuiKitProfileController, ), ), ); } 效果展示 lifeCycle 代码示例 lifeCycle为用户信息操作时的钩子函数 代码示例为使用shouldAddFriend做到添加好友前跳出弹窗的案例。 @override Widget build(BuildContext context) { final theme = Provider.of(context).theme; ProfileLifeCycle lifeCycle = ProfileLifeCycle( shouldAddToBlockList: (String userID) async { //用户被添加入黑名单前的逻辑 return true; }, shouldAddFriend: (String userID) async { //发送好友请求前的逻辑 // 弹出对话框 Future showShouldAddToBlockListDialog() { return showDialog( context: context, builder: (context) { return AlertDialog( title: const Text(\"提示\"), content: const Text(\"您确定要添加此好友吗?\"), actions: [ TextButton( child: const Text(\"取消\"), onPressed: () => Navigator.of(context).pop(), // 关闭对话框 ), TextButton( child: const Text(\"确定\"), onPressed: () { //关闭对话框并返回true Navigator.of(context).pop(true); }, ), ], ); }, ); } bool? isAdd = await showShouldAddToBlockListDialog(); return isAdd ?? false; }, shouldDeleteFriend: (String userID) async { //删除好友前的逻辑 return true; }, didGetFriendInfo: (V2TimFriendInfo? friendInfo) async { //获取好友信息前的逻辑 return friendInfo; }, ); return Scaffold( appBar: AppBar( shadowColor: Colors.white, title: Text( imt(\"详细资料\"), style: const TextStyle(color: Colors.white, fontSize: 17), ), flexibleSpace: Container( decoration: BoxDecoration( gradient: LinearGradient(colors: [ theme.lightPrimaryColor ?? CommonColor.lightPrimaryColor, theme.primaryColor ?? CommonColor.primaryColor ]), ), ), iconTheme: const IconThemeData( color: Colors.white, ), leading: IconButton( padding: const EdgeInsets.only(left: 16), icon: Image.asset( 'images/arrow_back.png', package: 'tim_ui_kit', height: 34, width: 34, ), onPressed: () { Navigator.pop(context, newUserMARK); }, ), ), body: Container( color: theme.weakBackgroundColor, child: TIMUIKitProfile( lifeCycle: lifeCycle, userID: widget.userID, profileWidgetBuilder: ProfileWidgetBuilder( searchBar: (conversation) => TIMUIKitProfileWidget.searchBar( context, conversation, handleTap: () { Navigator.push( context, MaterialPageRoute( builder: (context) => Search( conversation: conversation, onTapConversation: (V2TimConversation conversation, [V2TimMessage? targetMsg]) { Navigator.push( context, MaterialPageRoute( builder: (context) => Chat( selectedConversation: conversation, initFindingMsg: targetMsg, ), )); }), )); }), customBuilderOne: (bool isFriend, V2TimFriendInfo friendInfo, V2TimConversation conversation) { if (!isFriend) { return Container(); } return Column( children: _buildBottomOperationList( context, conversation, theme)); }), controller: _timuiKitProfileController, profileWidgetsOrder: const [ ProfileWidgetEnum.userInfoCard, ProfileWidgetEnum.operationDivider, ProfileWidgetEnum.remarkBar, ProfileWidgetEnum.genderBar, ProfileWidgetEnum.birthdayBar, ProfileWidgetEnum.operationDivider, ProfileWidgetEnum.searchBar, ProfileWidgetEnum.operationDivider, ProfileWidgetEnum.addToBlockListBar, ProfileWidgetEnum.pinConversationBar, ProfileWidgetEnum.messageMute, ProfileWidgetEnum.operationDivider, ProfileWidgetEnum.customBuilderOne, ProfileWidgetEnum.addAndDeleteArea ], ), ), ); } 效果展示 img{ display: inline-block; width:250px; height:400px; } "},"uikit-sdk-api/TIMUIKitProfile/TIMUIKitProfileController.html":{"url":"uikit-sdk-api/TIMUIKitProfile/TIMUIKitProfileController.html","title":"TIMUIKitProfileController","summary":"关于用户信息操作的控制器","keywords":"","body":"TIMUIKitProfileController 关键类描述 关于用户信息操作的控制器 参数 deleteFriend 参数类型 : FutureV2TimFriendOperationResult? > Function(String userID) 参数描述 : 删除好友操作 pinedConversation 参数类型 : FutureV2TimCallback > Function(bool isPined, String convID) 参数描述 : 会话置顶操作 addUserToBlackList 参数类型 : FutureV2TimFriendOperationResult >? > Function(bool shouldAdd, String userID) 参数描述 : 将用户添加到黑名单操作 changeFriendVerificationMethod 参数类型 : FutureV2TimCallback > Function(int allowType) 参数描述 : 修改好友验证方式操作 updateRemarks 参数类型 : FutureV2TimCallback > Function(String userID, String remark) 参数描述 : 更新备注操作 setMessageDisturb 参数类型 : FutureV2TimCallback > Function(String userID, bool isDisturb) 参数描述 : 设置是否接收用户消息 showTextInputBottomSheet 参数类型 : void Function(BuildContext context, String title, String tips, void Function(String) onSubmitted) 参数描述 : 展示下方文本输入框操作 loadData 参数类型 : void Function(String userID) 参数描述 : 加载好友信息操作 dispose 参数类型 : void Function() 参数描述 : model销毁操作 addFriend 参数类型 : FutureV2TimFriendOperationResult? > Function(String userID) 参数描述 : 添加好友操作 "},"uikit-sdk-api/TIMUIKitProfile/ProfileWidgetBuilder.html":{"url":"uikit-sdk-api/TIMUIKitProfile/ProfileWidgetBuilder.html","title":"ProfileWidgetBuilder","summary":"用于自定义构建用户信息页面不同部分的构造器","keywords":"","body":"ProfileWidgetBuilder 关键类描述 用于自定义构建用户信息页面不同部分的构造器 参数 operationDivider 参数类型 : Widget Function() 参数描述 : 分割线组件 remarkBar 参数类型 : Widget Function(String remark, Function()? handleTap) 参数描述 : 用户备注 addToBlockListBar 参数类型 : Widget Function(bool isAsBlocked, Function(bool value)? onChange) 参数描述 : 添加黑名单功能 pinConversationBar 参数类型 : Widget Function(bool isPinned, Function(bool value)? onChange) 参数描述 : 会话置顶功能 messageMute 参数类型 : Widget Function(bool isMute, Function(bool value)? onChange) 参数描述 : 禁言用户功能 operationItem 参数类型 : Widget Function({ required String operationName, required String type, bool? operationValue, String? operationText, void Function(bool newValue)? onSwitchChange, }) 参数描述 : 用于重构默认操作栏样式 searchBar 参数类型 : Widget Function(V2TimConversation conversation) 参数描述 : 搜索组件（自定义） portraitBar 参数类型 : Widget Function(V2TimUserFullInfo? userInfo) 参数描述 : 用户头像栏 nicknameBar 参数类型 : Widget Function(String nickName) 参数描述 : 用户昵称栏 userAccountBar 参数类型 : Widget Function(String userAccount) 参数描述 : 用户账号栏 signatureBar 参数类型 : Widget Function(String signature) 参数描述 : 用户签名栏 genderBar 参数类型 : Widget Function(int gender) 参数描述 : 用户性别 birthdayBar 参数类型 : Widget Function(int? birthday) 参数描述 : 用户生日 userInfoCard 参数类型 : Widget Function(V2TimUserFullInfo? userInfo) 参数描述 : 用户信息卡片 addAndDeleteArea 参数类型 : Widget Function(V2TimFriendInfo friendInfo, V2TimConversation conversation, int friendType, bool isDisturb) 参数描述 : 添加或删除功能 customBuilderOne 参数类型 : Widget Function(bool isFriend, V2TimFriendInfo friendInfo, V2TimConversation conversation) 参数描述 : 自定义区域一（自定义） customBuilderTwo 参数类型 : Widget Function(bool isFriend, V2TimFriendInfo friendInfo, V2TimConversation conversation) 参数描述 : 自定义区域二（自定义） customBuilderThree 参数类型 : Widget Function(bool isFriend, V2TimFriendInfo friendInfo, V2TimConversation conversation) 参数描述 : 自定义区域三（自定义） customBuilderFour 参数类型 : Widget Function(bool isFriend, V2TimFriendInfo friendInfo, V2TimConversation conversation) 参数描述 : 自定义区域四（自定义） customBuilderFive 参数类型 : Widget Function(bool isFriend, V2TimFriendInfo friendInfo, V2TimConversation conversation) 参数描述 : 自定义区域五（自定义） "},"uikit-sdk-api/TIMUIKitProfile/ProfileWidgetEnum.html":{"url":"uikit-sdk-api/TIMUIKitProfile/ProfileWidgetEnum.html","title":"ProfileWidgetEnum","summary":"用于自定义构建用户信息页面不同部分的排序设置","keywords":"","body":"ProfileWidgetEnum 枚举类型介绍 用于自定义构建用户信息页面不同部分的排序设置 枚举值列表 枚举值名称 枚举类型描述 枚举值 userInfoCard 用户信息卡片 0 addToBlockListBar 加入黑名单功能 1 pinConversationBar 置顶会话功能 2 messageMute 禁言功能 3 searchBar 搜索跳转组件 4 portraitBar 用户头像组件 5 nicknameBar 用户昵称 6 userAccountBar 用户账号组件 7 signatureBar 用户签名 8 genderBar 用户性别 9 birthdayBar 用户生日 10 addAndDeleteArea 添加或删除用户的区域 11 operationDivider 功能模块分割线 12 remarkBar 用户备注组件 13 customBuilderOne 自定义功能组一 14 customBuilderTwo 自定义功能组二 15 customBuilderThree 自定义功能组三 16 customBuilderFour 自定义功能组四 17 customBuilderFive 自定义功能组五 18 "},"uikit-sdk-api/TIMUIKitProfile/ProfileBuilder.html":{"url":"uikit-sdk-api/TIMUIKitProfile/ProfileBuilder.html","title":"ProfileBuilder","summary":"用于自定义构建整个用户信息页面的构造器","keywords":"","body":"ProfileBuilder 功能介绍 用于自定义构建整个用户信息页面的构造器 若使用此属性则profileWidgetBuilder与profileWidgetsOrder失效 参数详解 参数名称 参数类型 是否必填 描述 context BuildContext 是 构造器上下文 friendInfo V2TimFriendInfo 是 用户信息 conversation V2TimConversation 是 会话信息 friendType int 是 好友类型 isMute bool 是 是否禁言 返回值 Widget 返回值详解 此属性返回一个Widget 代码示例 代码示例可见TIMUIKitProfile "},"uikit-sdk-api/TIMUIKitProfile/OnSelProfileLifeCycle.html":{"url":"uikit-sdk-api/TIMUIKitProfile/OnSelProfileLifeCycle.html","title":"OnSelProfileLifeCycle","summary":"用户信息操作时的钩子函数","keywords":"","body":"OnSelProfileLifeCycle 关键类描述 用户信息操作时的钩子函数 参数 shouldAddToBlockList 参数类型 : Future Function(String userID) 参数描述 : 在将用户拉入黑名单前的钩子函数 shouldDeleteFriend 参数类型 : Future Function(String userID) 参数描述 : 在将用户删除前的钩子函数 shouldAddFriend 参数类型 : Future Function(String userID) 参数描述 : 在添加用户前的钩子函数 didGetFriendInfo 参数类型 : FutureV2TimFriendInfo? > Function( V2TimFriendInfo? friendInfo) 参数描述 : 在获取用户信息前的钩子函数 "},"uikit-sdk-api/TIMUIKitSearch.html":{"url":"uikit-sdk-api/TIMUIKitSearch.html","title":"TIMUIKitSearch","keywords":"","body":""},"api/v2timmanager/":{"url":"api/v2timmanager/","title":"V2TIMManager","summary":"IM SDK 主核心类，负责 IM SDK 的初始化、登录、消息收发，建群退群等功能。","keywords":"","body":"V2TIMManager V2TIMManager功能介绍 IM SDK 主核心类，负责 IM SDK 的初始化、登录、消息收发，建群退群等功能。 API目录 API 描述 initSDK 初始化 SDK unInitSDK 反初始化 SDK getVersion 获取版本号 getServerTime 获取服务器当前时间 login 用户登录 logout 用户登出 getLoginUser 获取当前登录用户的 UserID getLoginStatus 获取登录状态 addGroupListener 添加群组监听器 setGroupListener 设置群组监听器 removeGroupListener 移除群组监听器 joinGroup 加入群组 quitGroup 退出群组 dismissGroup 解散群组 getUsersInfo 获取用户资料 getUserStatus 获取用户在线状态 setSelfInfo 修改个人资料 setSelfStatus 设置当前登录用户在线状态 subscribeUserStatus 订阅用户状态 unsubscribeUserStatus 取消订阅用户状态 getConversationManager 会话功能入口 getFriendshipManager 关系链功能入口 getGroupManager 高级群组功能入口 getMessageManager 高级消息功能入口 getOfflinePushManager 离线推送功能入口 getSignalingManager 信令入口 setAPNSListener 设置苹果系统离线推送专用监听器 "},"api/v2timmanager/initsdk.html":{"url":"api/v2timmanager/initsdk.html","title":"initSDK","summary":"初始化 SDK√","keywords":"","body":"initSDK 功能介绍 初始化 SDK 初始化 SDK 需要操作以下步骤： 准备 SDKAppID。 设置 LogLevelEnum。 设置 V2TimSDKListener。 调用 initSDK 初始化 SDK。 在 Android 平台上，IM SDK 的日志在 4.8.50 版本之前默认存储于 /sdcard/tencenet/imsdklogs/应用包名 目录下，4.8.50 及之后的版本存储于 /sdcard/Android/data/包名/files/log/tencent/imsdk 目录下。 参数详解 参数名称 参数类型 是否必填 描述 sdkAppID int 是 应用ID，可在控制台中获取 loglevel LogLevelEnum 是 配置信息 listener V2TimSDKListener 是 SDK监听器 返回值 V2TimValueCallback { code : int desc : String data : bool } 返回值详解 名称 数值类型 描述 code int 请求结果错误码 desc String 请求结果描述 data bool 初始化结果 代码示例 // 1. 从即时通信 IM 控制台获取应用 SDKAppID。 int sdkAppID = 0; // 2. 添加 V2TimSDKListener 的事件监听器，sdkListener 是 V2TimSDKListener 的实现类 V2TimSDKListener sdkListener = V2TimSDKListener( onConnectFailed: (int code, String error) { // 连接失败的回调函数 // code 错误码 // error 错误信息 }, onConnectSuccess: () { // SDK 已经成功连接到腾讯云服务器 }, onConnecting: () { // SDK 正在连接到腾讯云服务器 }, onKickedOffline: () { // 当前用户被踢下线，此时可以 UI 提示用户，并再次调用 V2TIMManager 的 login() 函数重新登录。 }, onSelfInfoUpdated: (V2TimUserFullInfo info) { // 登录用户的资料发生了更新 // info登录用户的资料 }, onUserSigExpired: () { // 在线时票据过期：此时您需要生成新的 userSig 并再次调用 V2TIMManager 的 login() 函数重新登录。 }, onUserStatusChanged: (List userStatusList) { //用户状态变更通知 //userStatusList 用户状态变化的用户列表 //收到通知的情况：订阅过的用户发生了状态变更（包括在线状态和自定义状态），会触发该回调 //在 IM 控制台打开了好友状态通知开关，即使未主动订阅，当好友状态发生变更时，也会触发该回调 //同一个账号多设备登录，当其中一台设备修改了自定义状态，所有设备都会收到该回调 }, ); // 3.初始化SDK V2TimValueCallback initSDKRes = await TencentImSDKPlugin.v2TIMManager.initSDK( sdkAppID: sdkAppID, // SDKAppID loglevel: LogLevelEnum.V2TIM_LOG_ALL, // 日志登记等级 listener: sdkListener, // 事件监听器 ); if (initSDKRes.code == 0) { //初始化成功 } "},"api/v2timmanager/uninitsdk.html":{"url":"api/v2timmanager/uninitsdk.html","title":"unInitSDK","summary":"反初始化 SDK√","keywords":"","body":"unInitSDK 功能介绍 反初始化 SDK 普通情况下，如果您的应用生命周期跟 IM SDK 生命周期一致，退出应用前可以不进行反初始化。 但有些特殊场景，例如您只在进入特定界面后才初始化 IM SDK，退出界面后不再使用，可以对 IM SDK 进行反初始化。 参数详解 此API无参数 返回值 V2TimValueCallback { code : int desc : String } 返回值详解 名称 数值类型 描述 code int 请求结果错误码 desc String 请求结果描述 代码示例 // 从即时通信 IM 控制台获取应用 SDKAppID。 int sdkAppID = 0; // 添加 V2TimSDKListener 的事件监听器，sdkListener 是 V2TimSDKListener 的实现类 V2TimSDKListener sdkListener = V2TimSDKListener( onConnectFailed: (code, error) {}, // 连接失败的回调函数 onConnectSuccess: () {}, // 连接成功的回调函数 onConnecting: () {}, // 正在连接的回调函数 onKickedOffline: () {}, // 被踢下线的回调函数 onSelfInfoUpdated: (V2TimUserFullInfo info) {}, // 用户信息更新 onUserSigExpired: () {}, // userSig过期，相当于踢下线 ); // 初始化 V2TimValueCallback initSDKRes = await TencentImSDKPlugin.v2TIMManager.initSDK( sdkAppID: sdkAppID, // SDKAppID loglevel: LogLevelEnum.V2TIM_LOG_ALL, // 日志登记等级 listener: sdkListener, // 事件监听器 ); // 在初始化SDK成功之后可调用 // 调用unInitSDK反初始化SDK if (initSDKRes.code == 0) {} V2TimCallback unInitSDKRes = await TencentImSDKPlugin.v2TIMManager.unInitSDK(); if (unInitSDKRes.code == 0) { // 反初始化SDK成功的逻辑 } "},"api/v2timmanager/getversion.html":{"url":"api/v2timmanager/getversion.html","title":"getVersion","summary":"获取版本号√","keywords":"","body":"getVersion 功能介绍 获取版本号 参数详解 此API无参数 返回值 V2TimValueCallback { code : int desc : String data : String//版本号 } 返回值详解 名称 数值类型 描述 code int 请求结果错误码 desc String 请求结果描述 data String 版本号 代码示例 //获取版本号 V2TimValueCallback getVersionRes = await TencentImSDKPlugin.v2TIMManager.getVersion(); if (getVersionRes.code == 0) { //获取成功 getVersionRes.data; //版本号 } "},"api/v2timmanager/getservertime.html":{"url":"api/v2timmanager/getservertime.html","title":"getServerTime","summary":"获取服务器当前时间√","keywords":"","body":"getServerTime 功能介绍 获取服务器当前时间 注意： web不支持该接口 参数详解 此API无参数 返回值 V2TimValueCallback { code : int desc : String data : int//服务器当前时间 } 返回值详解 名称 数值类型 描述 code int 请求结果错误码 desc String 请求结果描述 data int 服务器当前时间 代码示例 //获取服务器当前时间 V2TimValueCallback getServerTimeRes = await TencentImSDKPlugin.v2TIMManager.getServerTime(); if (getServerTimeRes.code == 0) { //获取成功 getServerTimeRes.data;//服务器当前时间 } "},"api/v2timmanager/login.html":{"url":"api/v2timmanager/login.html","title":"login","summary":"用户登录√","keywords":"","body":"login 功能介绍 用户登录 首次登录一个 IM 帐号时，不需要先注册这个帐号。在登录成功后，IM 自动完成这个帐号的注册。 您需要在以下场景调用 login 接口： App 启动后首次使用 IM SDK 的功能。 登录时票据过期：login 接口的回调会返回 ERR_USER_SIG_EXPIRED（6206） 或 ERR_SVR_ACCOUNT_USERSIG_EXPIRED（70001） 错误码，此时请您生成新的 userSig 重新登录。 在线时票据过期：用户在线期间也可能收到 onUserSigExpired 回调，此时需要您生成新的 userSig 并重新登录。 在线时被踢下线：用户在线情况下被踢，IM SDK 会通过 onKickedOffline 回调通知给您，此时可以在 UI 提示用户，并调用 login 重新登录。 以下场景无需调用 login 接口： 用户的网络断开并重新连接后，不需要调用 login 函数，IM SDK 会自动上线。 当一个登录过程在进行时，不需要进行重复登录。 注意： 1. 调用 IM SDK 接口成功登录后，将会开始计算 DAU，请根据业务场景合理调用登录接口，避免出现 DAU 过高的情况。 2. 在一个 App 中，IM SDK 不支持多个帐号同时在线，如果同时登录多个帐号，只有最后登录的帐号在线。 参数详解 参数名称 参数类型 是否必填 描述 userID String 是 登录用户唯一标识 userSig String 是 登录票据，计算方法请参考 UserSig 后台 API。 返回值 V2TimCallback { code : int desc : String } 返回值详解 名称 数值类型 描述 code int 请求结果错误码 desc String 请求结果描述 代码示例 String userID = \"your user id\"; // 用户设置的userID String userSig = \"userSig from your server\"; // 用户计算出的userSig V2TimCallback loginRes = await TencentImSDKPlugin.v2TIMManager .login(userID: userID, userSig: userSig); if (loginRes.code == 0) { // 登录成功逻辑 } else { // 登录失败逻辑 } "},"api/v2timmanager/logout.html":{"url":"api/v2timmanager/logout.html","title":"logout","summary":"登出√","keywords":"","body":"logout 功能介绍 登出 退出登录，如果切换账号，需要 logout 回调成功或者失败后才能再次 login，否则login可能会失败。 普通情况下，如果您的应用生命周期跟 IM SDK 生命周期一致，退出应用前可以不登出，直接退出即可。 但有些特殊场景，例如您只在进入特定界面后才使用 IM SDK，退出界面后不再使用，此时可以调用logout 接口登出 SDK。登出成功后，不会再收到其他人发送的新消息。注意这种情况下，登出成功后还需要调 unInitSDK 对 SDK 进行反初始化。 如果您希望在应用中实现帐号切换的需求，只需要每次切换帐号时调用 login 即可。 参数详解 此API无参数 返回值 V2TimCallback { code : int desc : String } 返回值详解 名称 数值类型 描述 code int 请求结果错误码 desc String 请求结果描述 代码示例 // 在用户登陆成功之后可调用 // 调用logout登出当前用户账号 V2TimCallback logoutRes = await TencentImSDKPlugin.v2TIMManager.logout(); if (logoutRes.code == 0) { // 登出成功的逻辑 } "},"api/v2timmanager/getloginuser.html":{"url":"api/v2timmanager/getloginuser.html","title":"getLoginUser","summary":"获取登录用户的UserID√","keywords":"","body":"getLoginUser 功能介绍 获取登录用户的UserID 在登录成功后，通过调用getLoginUser获取登录用户的UserID。 如果登录失败，获取的登录用户 UserID 为空。 参数详解 此API无参数 返回值 V2TimValueCallback { code : int desc : String data : String } 返回值详解 名称 数值类型 描述 code int 请求结果错误码 desc String 请求结果描述 data String 登录用户的UserID 代码示例 // 在用户登陆成功之后可调用 // 调用getLoginUser获取登录成功的用户 UserID V2TimValueCallback getLoginUserRes = await TencentImSDKPlugin.v2TIMManager.getLoginUser(); if (getLoginUserRes.code == 0) { //获取成功 getLoginUserRes.data; // getLoginUserRes.data为查询到的登录用户的UserID } "},"api/v2timmanager/getloginstatus.html":{"url":"api/v2timmanager/getloginstatus.html","title":"getLoginStatus","summary":"获取登录状态√","keywords":"","body":"getLoginStatus 功能介绍 获取登录状态 如果用户已经处于已登录和登录中状态，请勿再频繁调用登录接口登录。 参数详解 此API无参数 返回值 V2TimValueCallback { code : int desc : String data : int// 用户的登录状态 1:已登录 2:登录中 3:无登录 } 返回值详解 名称 数值类型 描述 code int 请求结果错误码 desc String 请求结果描述 data int 用户的登录状态 代码示例 // 在用户登陆成功之后可调用 // 调用getLoginStatus获取登录成功的用户的状态 V2TimValueCallback getLoginStatusRes = await TencentImSDKPlugin.v2TIMManager.getLoginStatus(); if (getLoginStatusRes.code == 0) { int? status = getLoginStatusRes.data; // getLoginStatusRes.data为用户登录状态值 if (status == 1) { // 已登录 } else if (status == 2) { // 登录中 } else if (status == 3) { // 未登录 } } "},"api/v2timmanager/addgrouplistener.html":{"url":"api/v2timmanager/addgrouplistener.html","title":"addGroupListener","summary":"添加群组监听器√","keywords":"","body":"addGroupListener 功能介绍 添加群组监听器 注意： 会议群（Meeting）和直播群（AVChatRoom）默认无onMemberInfoChanged回调，如需回调请提交工单配置 在web端时，不支持此API 使用addFriendListener会在所有的群组监听器列表中新增一个群组监听器。 参数详解 参数名称 参数类型 是否必填 描述 listener V2TimGroupListener 是 群组监听器 返回值 void 返回值详解 此方法无返回值 代码示例 //设置群组监听器 V2TimGroupListener listener = V2TimGroupListener( onApplicationProcessed: (String groupID, V2TimGroupMemberInfo opUser, bool isAgreeJoin, String opReason) async { //加群请求已经被群主或管理员处理了（只有申请人能够收到） //groupID 群 ID //opUser 处理人 //isAgreeJoin 是否同意加群 //opReason 处理原因 }, onGrantAdministrator: (String groupID, V2TimGroupMemberInfo opUser, List memberList) async { //指定管理员身份 //groupID 群 ID //opUser 处理人 //memberList 被处理的群成员 }, onGroupAttributeChanged: (String groupID, Map groupAttributeMap) async { //收到群属性更新的回调 //groupID 群 ID //groupAttributeMap 群的所有属性 }, onGroupCreated: (String groupID) async { //创建群（主要用于多端同步） //groupID 群 ID }, onGroupDismissed: (String groupID, V2TimGroupMemberInfo opUser) async { //群被解散了（全员能收到） //groupID 群 ID //opUser 处理人 }, onGroupInfoChanged: (String groupID, List changeInfos) async { //群信息被修改（全员能收到） //groupID 群 ID //changeInfos 修改的群信息 }, onGroupRecycled: (String groupID, V2TimGroupMemberInfo opUser) async { //群被回收（全员能收到） //groupID 群 ID //opUser 处理人 }, onMemberEnter: (String groupID, List memberList) async { //有用户加入群（全员能够收到） //groupID 群 ID //memberList 加入的成员 }, onMemberInfoChanged: (String groupID, List v2TIMGroupMemberChangeInfoList) async { //群成员信息被修改，仅支持禁言通知（全员能收到）。 //groupID 群 ID //v2TIMGroupMemberChangeInfoList 被修改的群成员信息 }, onMemberInvited: (String groupID, V2TimGroupMemberInfo opUser, List memberList) async { //某些人被拉入某群（全员能够收到） //groupID 群 ID //opUser 处理人 //memberList 被拉进群成员 }, onMemberKicked: (String groupID, V2TimGroupMemberInfo opUser, List memberList) async { //某些人被踢出某群（全员能够收到） //groupID 群 ID //opUser 处理人 //memberList 被踢成员 }, onMemberLeave: (String groupID, V2TimGroupMemberInfo member) async { //有用户离开群（全员能够收到） //groupID 群 ID //member 离开的成员 }, onQuitFromGroup: (String groupID) async { //主动退出群组（主要用于多端同步，直播群（AVChatRoom）不支持） //groupID 群 ID }, onReceiveJoinApplication: (String groupID, V2TimGroupMemberInfo member, String opReason) async { //有新的加群请求（只有群主或管理员会收到） //groupID 群 ID //member 申请人 //opReason 申请原因 }, onReceiveRESTCustomData: (String groupID, String customData) async { //收到 RESTAPI 下发的自定义系统消息 //groupID 群 ID //customData 自定义数据 }, onRevokeAdministrator: (String groupID, V2TimGroupMemberInfo opUser, List memberList) async { //取消管理员身份 //groupID 群 ID //opUser 处理人 //memberList 被处理的群成员 }, ); //添加群组监听器 TencentImSDKPlugin.v2TIMManager.addGroupListener(listener: listener); "},"api/v2timmanager/setgrouplistener.html":{"url":"api/v2timmanager/setgrouplistener.html","title":"setGroupListener","summary":"设置群组监听器√","keywords":"","body":"setGroupListener 功能介绍 设置群组监听器 注意： 会议群（Meeting）和直播群（AVChatRoom）默认无onMemberInfoChanged()回调，如需回调请提交工单配置 在web端时，不支持onQuitFromGroup回调 使用setGroupListener会覆盖群组监听器列表中最新设置的监听器。 参数详解 参数名称 参数类型 是否必填 描述 listener V2TimGroupListener 是 需要设置群组监听器 返回值 void 返回值详解 此方法无返回值 代码示例 //设置群组监听器属性 V2TimGroupListener listener = V2TimGroupListener( onApplicationProcessed: (String groupID, V2TimGroupMemberInfo opUser, bool isAgreeJoin, String opReason) async { //加群请求已经被群主或管理员处理了（只有申请人能够收到） //groupID 群 ID //opUser 处理人 //isAgreeJoin 是否同意加群 //opReason 处理原因 }, onGrantAdministrator: (String groupID, V2TimGroupMemberInfo opUser, List memberList) async { //指定管理员身份 //groupID 群 ID //opUser 处理人 //memberList 被处理的群成员 }, onGroupAttributeChanged: (String groupID, Map groupAttributeMap) async { //收到群属性更新的回调 //groupID 群 ID //groupAttributeMap 群的所有属性 }, onGroupCreated: (String groupID) async { //创建群（主要用于多端同步） //groupID 群 ID }, onGroupDismissed: (String groupID, V2TimGroupMemberInfo opUser) async { //群被解散了（全员能收到） //groupID 群 ID //opUser 处理人/ }, onGroupInfoChanged: (String groupID, List changeInfos) async { //群信息被修改（全员能收到） //groupID 群 ID //changeInfos 修改的群信息 }, onGroupRecycled: (String groupID, V2TimGroupMemberInfo opUser) async { //群被回收（全员能收到） //groupID 群 ID //opUser 处理人 }, onMemberEnter: (String groupID, List memberList) async { //有用户加入群（全员能够收到） //groupID 群 ID //memberList 加入的成员 }, onMemberInfoChanged: (String groupID, List v2TIMGroupMemberChangeInfoList) async { //群成员信息被修改，仅支持禁言通知（全员能收到）。 //groupID 群 ID //v2TIMGroupMemberChangeInfoList 被修改的群成员信息 }, onMemberInvited: (String groupID, V2TimGroupMemberInfo opUser, List memberList) async { //某些人被拉入某群（全员能够收到） //groupID 群 ID //opUser 处理人 //memberList 被拉进群成员 }, onMemberKicked: (String groupID, V2TimGroupMemberInfo opUser, List memberList) async { //某些人被踢出某群（全员能够收到） //groupID 群 ID //opUser 处理人 //memberList 被踢成员 }, onMemberLeave: (String groupID, V2TimGroupMemberInfo member) async { //有用户离开群（全员能够收到） //groupID 群 ID //member 离开的成员 }, onQuitFromGroup: (String groupID) async { //主动退出群组（主要用于多端同步，直播群（AVChatRoom）不支持） //groupID 群 ID }, onReceiveJoinApplication: (String groupID, V2TimGroupMemberInfo member, String opReason) async { //有新的加群请求（只有群主或管理员会收到） //groupID 群 ID //member 申请人 //opReason 申请原因 }, onReceiveRESTCustomData: (String groupID, String customData) async { //收到 RESTAPI 下发的自定义系统消息 //groupID 群 ID //customData 自定义数据 }, onRevokeAdministrator: (String groupID, V2TimGroupMemberInfo opUser, List memberList) async { //取消管理员身份 //groupID 群 ID //opUser 处理人 //memberList 被处理的群成员 }, ); //设置群组监听器 TencentImSDKPlugin.v2TIMManager.setGroupListener(listener: listener); "},"api/v2timmanager/removegrouplistener.html":{"url":"api/v2timmanager/removegrouplistener.html","title":"removeGroupListener","summary":"移除群组监听器√","keywords":"","body":"removeGroupListener 功能介绍 移除群组监听器 注意： 若listener为null则删除所有群组监听器 参数详解 参数名称 参数类型 是否必填 描述 listener V2TimGroupListener 是 需要移除的群组监听器 返回值 void 返回值详解 此方法无返回值 代码示例 //设置群组监听器 V2TimGroupListener listener = V2TimGroupListener( onApplicationProcessed: (String groupID, V2TimGroupMemberInfo opUser, bool isAgreeJoin, String opReason) async { //加群请求已经被群主或管理员处理了（只有申请人能够收到） //groupID 群 ID //opUser 处理人 //isAgreeJoin 是否同意加群 //opReason 处理原因 }, onGrantAdministrator: (String groupID, V2TimGroupMemberInfo opUser, List memberList) async { //指定管理员身份 //groupID 群 ID //opUser 处理人 //memberList 被处理的群成员 }, onGroupAttributeChanged: (String groupID, Map groupAttributeMap) async { //收到群属性更新的回调 //groupID 群 ID //groupAttributeMap 群的所有属性 }, onGroupCreated: (String groupID) async { //创建群（主要用于多端同步） //groupID 群 ID }, onGroupDismissed: (String groupID, V2TimGroupMemberInfo opUser) async { //群被解散了（全员能收到） //groupID 群 ID //opUser 处理人/ }, onGroupInfoChanged: (String groupID, List changeInfos) async { //群信息被修改（全员能收到） //groupID 群 ID //changeInfos 修改的群信息 }, onGroupRecycled: (String groupID, V2TimGroupMemberInfo opUser) async { //群被回收（全员能收到） //groupID 群 ID //opUser 处理人 }, onMemberEnter: (String groupID, List memberList) async { //有用户加入群（全员能够收到） //groupID 群 ID //memberList 加入的成员 }, onMemberInfoChanged: (String groupID, List v2TIMGroupMemberChangeInfoList) async { //群成员信息被修改，仅支持禁言通知（全员能收到）。 //groupID 群 ID //v2TIMGroupMemberChangeInfoList 被修改的群成员信息 }, onMemberInvited: (String groupID, V2TimGroupMemberInfo opUser, List memberList) async { //某些人被拉入某群（全员能够收到） //groupID 群 ID //opUser 处理人 //memberList 被拉进群成员 }, onMemberKicked: (String groupID, V2TimGroupMemberInfo opUser, List memberList) async { //某些人被踢出某群（全员能够收到） //groupID 群 ID //opUser 处理人 //memberList 被踢成员 }, onMemberLeave: (String groupID, V2TimGroupMemberInfo member) async { //有用户离开群（全员能够收到） //groupID 群 ID //member 离开的成员 }, onQuitFromGroup: (String groupID) async { //主动退出群组（主要用于多端同步，直播群（AVChatRoom）不支持） //groupID 群 ID }, onReceiveJoinApplication: (String groupID, V2TimGroupMemberInfo member, String opReason) async { //有新的加群请求（只有群主或管理员会收到） //groupID 群 ID //member 申请人 //opReason 申请原因 }, onReceiveRESTCustomData: (String groupID, String customData) async { //收到 RESTAPI 下发的自定义系统消息 //groupID 群 ID //customData 自定义数据 }, onRevokeAdministrator: (String groupID, V2TimGroupMemberInfo opUser, List memberList) async { //取消管理员身份 //groupID 群 ID //opUser 处理人 //memberList 被处理的群成员 }, ); //添加群组监听器 TencentImSDKPlugin.v2TIMManager.addGroupListener(listener: listener); //添加成功之后可移除群组监听器 TencentImSDKPlugin.v2TIMManager.removeGroupListener(listener: listener);//需要移除的群组监听器 "},"api/v2timmanager/joingroup.html":{"url":"api/v2timmanager/joingroup.html","title":"joinGroup","summary":"加入群组√","keywords":"","body":"joinGroup 功能介绍 加入群组 工作群（Work）：不能主动入群，只能通过群成员调用 V2TIMManager.getGroupManager().inviteUserToGroup()接口邀请入群。 公开群（Public）：申请入群后，根据群组的groupAddOpt确定是否需要审批。如果需要，管理员在收到 V2TIMGroupListener 的 onReceiveJoinApplication 回调后调用 V2TIMManager.getGroupManager().getGroupApplicationList()接口处理加群请求。 其他群：可以直接入群。 注意： 当在web端时，加入直播群时groupType字段必填 参数详解 参数名称 参数类型 是否必填 描述 groupID String 是 需要加入群组 ID message String 是 加群申请信息 groupType GroupType 否 群类型 返回值 V2TimCallback { code : int desc : String } 返回值详解 名称 数值类型 描述 code int 请求结果错误码 desc String 请求结果描述 代码示例 // 加入群组 V2TimCallback joinGroupRes = await TencentImSDKPlugin.v2TIMManager .joinGroup( groupID: \"groupID\",// 需要加入群组 ID message: \"hello\", // 加群申请信息 groupType: \"Public\");// 群类型 if (joinGroupRes.code == 0) { // 加入成功 } "},"api/v2timmanager/quitgroup.html":{"url":"api/v2timmanager/quitgroup.html","title":"quitGroup","summary":"退出群组√","keywords":"","body":"quitGroup 功能介绍 退出群组 退群者会收到 onQuitFromGroup 回调。 群组内其他成员会收到 onMemberLeave 回调。 注意： 对于陌生人社交群（Public）、临时会议群（Meeting）、社群（Community）和直播群（AVChatRoom），群主不可以退群，只能 解散群组。 参数详解 参数名称 参数类型 是否必填 描述 groupID String 是 需要退出的群组 ID 返回值 V2TimCallback { code : int desc : String } 返回值详解 名称 数值类型 描述 code int 请求结果错误码 desc String 请求结果描述 代码示例 // 加入群组 V2TimCallback quitGroupRes = await TencentImSDKPlugin.v2TIMManager.quitGroup( groupID: \"groupID\", ); // 需要退出的群组 ID if (quitGroupRes.code == 0) { // 退出成功 } "},"api/v2timmanager/dismissgroup.html":{"url":"api/v2timmanager/dismissgroup.html","title":"dismissGroup","summary":"解散群组√","keywords":"","body":"dismissGroup 功能介绍 解散群组 您可以调用 dismissGroup 解散群组，全员会收到 onGroupDismissed回调。 如果您在服务器端设置了允许自动解散不活跃的群，当群被服务器端自动解散后，SDK 会收到 onGroupRecycled回调。 注意： Work：只有app管理员可以解散群组。 其他群：群主可以解散群组。 参数详解 参数名称 参数类型 是否必填 描述 groupID String 是 需要加入群组 ID 返回值 V2TimCallback { code : int desc : String } 返回值详解 名称 数值类型 描述 code int 请求结果错误码 desc String 请求结果描述 代码示例 // 解散群组 V2TimCallback dismissGroupRes = await TencentImSDKPlugin.v2TIMManager .dismissGroup(groupID: \"groupID\"); // 需要解散的群组id if (dismissGroupRes.code == 0) { //解散成功 } "},"api/v2timmanager/getusersinfo.html":{"url":"api/v2timmanager/getusersinfo.html","title":"getUsersInfo","summary":"获取用户资料√","keywords":"","body":"getUsersInfo 功能介绍 获取用户资料 获取自己的资料，传入自己的 ID 即可。 注意： userIDList 建议一次最大 100 个，因为数量过多可能会导致数据包太大被后台拒绝，后台限制数据包最大为 1M。 参数详解 参数名称 参数类型 是否必填 描述 userIDList List 是 需要查询的用户id列表 返回值 V2TimValueCallback> { code : int desc : String data : List//查询到的用户资料列表 } 返回值详解 名称 数值类型 描述 code int 请求结果错误码 desc String 请求结果描述 data ListV2TimUserFullInfo > 查询到的用户资料列表 代码示例 //获取用户资料 V2TimValueCallback> getUsersInfoRes = await TencentImSDKPlugin.v2TIMManager.getUsersInfo(userIDList: []);//需要查询的用户id列表 if (getUsersInfoRes.code == 0) { // 查询成功 getUsersInfoRes.data?.forEach((element) { element.allowType;//用户的好友验证方式 0:允许所有人加我好友 1:不允许所有人加我好友 2:加我好友需我确认 element.birthday;//用户生日 element.customInfo;//用户的自定义状态 旗舰版支持修改此属性 element.faceUrl;//用户头像 url element.gender;//用户的性别 1:男 2:女 element.level;//用户的等级 element.nickName;//用户昵称 element.role;//用户的角色 element.selfSignature;//用户的签名 element.userID;//用户 ID }); } "},"api/v2timmanager/getuserstatus.html":{"url":"api/v2timmanager/getuserstatus.html","title":"getUserStatus","summary":"获取用户在线状态√","keywords":"","body":"getUserStatus 功能介绍 获取用户在线状态 注意： 4.0.3版本开始支持 web不支持 参数详解 参数名称 参数类型 是否必填 描述 userIDList List 是 需要查询用户在线状态的用户id列表 返回值 V2TimValueCallback> { code : int desc : String data : List//查询到的用户在线状态列表 } 返回值详解 名称 数值类型 描述 code int 请求结果错误码 desc String 请求结果描述 data ListV2TimUserStatus > 查询到的用户在线状态列表 代码示例 //获取用户在线状态 V2TimValueCallback> getUserStatusRes = await TencentImSDKPlugin.v2TIMManager.getUserStatus(userIDList: []);// 需要查询用户在线状态的用户id列表 if (getUserStatusRes.code == 0) { //查询成功 getUserStatusRes.data?.forEach((element) { element.customStatus;//此条为此API查询的用户在线状态字段 element.statusType;//用户在线状态类型 1:在线状态 2:离线状态 3:未登录（如主动调用 logout 接口，或者账号注册后还未登录） element.userID;//用户id }); } "},"api/v2timmanager/setselfinfo.html":{"url":"api/v2timmanager/setselfinfo.html","title":"setSelfInfo","summary":"修改个人资料√","keywords":"","body":"setSelfInfo 功能介绍 修改个人资料 资料修改成功后，您会收到 onSelfInfoUpdated 回调。 参数详解 参数名称 参数类型 是否必填 描述 userFullInfo V2TimUserFullInfo 是 需要修改的用户的信息 返回值 V2TimCallback { code : int desc : String } 返回值详解 名称 数值类型 描述 code int 请求结果错误码 desc String 请求结果描述 代码示例 //用户资料设置信息 V2TimUserFullInfo userFullInfo = V2TimUserFullInfo( allowType: 0,//用户的好友验证方式 0:允许所有人加我好友 1:不允许所有人加我好友 2:加我好友需我确认 birthday: 0,//用户生日 customInfo: {\"custom\":\"custom\"},//用户的自定义状态 旗舰版支持修改此属性 faceUrl: \"\",//用户头像 url gender: 1,//用户的性别 1:男 2:女 level: 0,//用户的等级 role: 0,//用户的角色 selfSignature: \"\",//用户的签名 userID: \"\",//用户 ID ); V2TimCallback setSelfInfoRes = await TencentImSDKPlugin.v2TIMManager.setSelfInfo(userFullInfo: userFullInfo);//用户资料设置信息 if (setSelfInfoRes.code == 0) { // 修改成功 } "},"api/v2timmanager/setselfstatus.html":{"url":"api/v2timmanager/setselfstatus.html","title":"setSelfStatus","summary":"设置当前登录用户在线状态√","keywords":"","body":"setSelfStatus 功能介绍 设置当前登录用户在线状态 注意： 4.0.3版本开始支持 web不支持 参数详解 参数名称 参数类型 是否必填 描述 status String 是 用户在线状态描述 返回值 V2TimCallback { code : int desc : String } 返回值详解 名称 数值类型 描述 code int 请求结果错误码 desc String 请求结果描述 代码示例 //设置当前登录用户在线状态 V2TimCallback setSelfStatusRes = await TencentImSDKPlugin.v2TIMManager.setSelfStatus(status: \"\");// 用户在线状态描述 if (setSelfStatusRes.code == 0) { //设置成功 } "},"api/v2timmanager/subscribeuserstatus.html":{"url":"api/v2timmanager/subscribeuserstatus.html","title":"subscribeUserStatus","summary":"订阅用户状态√","keywords":"","body":"subscribeUserStatus 功能介绍 订阅用户状态 当成功订阅用户状态后，当对方的状态（包含在线状态、自定义状态）发生变更后，您可以监听 onUserStatusChanged 回调来感知 如果您需要订阅好友列表的状态，您只需要在控制台上打开开关即可，无需调用该接口 该接口不支持订阅自己，您可以通过监听 onUserStatusChanged 回调来感知自身的自定义状态的变更 订阅列表有个数限制，超过限制后，会自动淘汰最先订阅的用户 该功能为 IM 旗舰版功能，购买旗舰版套餐包后可使用，详见价格说明。 注意： 4.0.8版本开始支持 web不支持 参数详解 参数名称 参数类型 是否必填 描述 userIDList List 是 订阅的用户id列表 返回值 V2TimCallback { code : int desc : String } 返回值详解 名称 数值类型 描述 code int 请求结果错误码 desc String 请求结果描述 代码示例 //订阅用户状态 V2TimCallback subscribeUserStatusRes = await TencentImSDKPlugin.v2TIMManager .subscribeUserStatus(userIDList: []);// 订阅的用户id列表 if (subscribeUserStatusRes.code == 0) { // 订阅成功 } "},"api/v2timmanager/unsubscribeuserstatus.html":{"url":"api/v2timmanager/unsubscribeuserstatus.html","title":"unsubscribeUserStatus","summary":"取消订阅用户状态√","keywords":"","body":"unsubscribeUserStatus 功能介绍 取消订阅用户状态 当 userIDList 为空或者 null 时，取消当前所有的订阅。 该功能为 IM 旗舰版功能，购买旗舰版套餐包后可使用，详见价格说明。 注意： 4.0.8版本开始支持 web不支持 参数详解 参数名称 参数类型 是否必填 描述 userIDList List 是 取消订阅的用户id列表 返回值 V2TimCallback { code : int desc : String } 返回值详解 名称 数值类型 描述 code int 请求结果错误码 desc String 请求结果描述 代码示例 //取消订阅用户状态 V2TimCallback unsubscribeUserStatusRes = await TencentImSDKPlugin.v2TIMManager .unsubscribeUserStatus(userIDList: []);// 取消订阅的用户id列表 if (unsubscribeUserStatusRes.code == 0) { // 取消订阅成功 } "},"api/v2timmanager/getconversationmanager.html":{"url":"api/v2timmanager/getconversationmanager.html","title":"getConversationManager","summary":"会话功能入口√","keywords":"","body":"getConversationManager 功能介绍 会话功能入口 会话功能方法在核心类 TencentImSDKPlugin.v2TIMManager.getConversationManager()中。 参数详解 此API无参数 返回值 V2TIMConversationManager 返回值详解 名称 数值类型 描述 V2TIMConversationManager V2TIMConversationManager 会话功能入口 代码示例 // 使用getConversationManager获取指定会话的案例 //获取指定会话 V2TimValueCallback getConversationtRes = await TencentImSDKPlugin.v2TIMManager .getConversationManager() .getConversation(conversationID: \"\");//会话唯一 ID，如果是 C2C 单聊，组成方式为 c2c_userID，如果是群聊，组成方式为 group_groupID if (getConversationtRes.code == 0) { //拉取成功 getConversationtRes.data?.conversationID;//会话唯一 ID，如果是单聊，组成方式为 c2c_userID；如果是群聊，组成方式为 group_groupID。 getConversationtRes.data?.draftText;//草稿信息 getConversationtRes.data?.draftTimestamp;//草稿编辑时间，草稿设置的时候自动生成。 getConversationtRes.data?.faceUrl;//会话展示头像，群聊头像：群头像；单聊头像：对方头像。 getConversationtRes.data?.groupAtInfoList;//群会话 @ 信息列表，通常用于展示 “有人@我” 或 “@所有人” 这两种提醒状态。 getConversationtRes.data?.groupID;//当前群聊 ID，如果会话类型为群聊，groupID 会存储当前群的群 ID，否则为 null。 getConversationtRes.data?.groupType;//当前群聊类型，如果会话类型为群聊，groupType 为当前群类型，否则为 null。 getConversationtRes.data?.isPinned;//会话是否置顶 getConversationtRes.data?.lastMessage;//会话最后一条消息 getConversationtRes.data?.orderkey;//会话排序字段 getConversationtRes.data?.recvOpt;//消息接收选项 getConversationtRes.data?.showName;//会话展示名称，群聊会话名称优先级：群名称 > 群 ID；单聊会话名称优先级：对方好友备注 > 对方昵称 > 对方的 userID。 getConversationtRes.data?.type;//会话类型，分为 C2C（单聊）和 Group（群聊）。 getConversationtRes.data?.unreadCount;//会话未读消息数，直播群（AVChatRoom）不支持未读计数，默认为 0。 getConversationtRes.data?.userID;//对方用户 ID，如果会话类型为单聊，userID 会存储对方的用户 ID，否则为 null。 } "},"api/v2timmanager/getfriendshipmanager.html":{"url":"api/v2timmanager/getfriendshipmanager.html","title":"getFriendshipManager","summary":"关系链功能入口√","keywords":"","body":"getFriendshipManager 功能介绍 关系链功能入口 关系链功能方法在核心类 TencentImSDKPlugin.v2TIMManager.getFriendshipManager()中。 参数详解 此API无参数 返回值 V2TIMFriendshipManager 返回值详解 名称 数值类型 描述 V2TIMFriendshipManager V2TIMFriendshipManager 关系链功能入口 代码示例 // 使用getFriendshipManager添加好友的案例 //添加好友 V2TimValueCallback addFriendRes = await TencentImSDKPlugin.v2TIMManager .getFriendshipManager() .addFriend( userID: \"userID\",//需要添加的用户id remark: \"\",//添加的好友的好友备注 friendGroup: \"\",//添加好友所在分组 addWording: \"\",//添加好友附带信息 addSource: \"\",//添加来源描述 addType: FriendTypeEnum.V2TIM_FRIEND_TYPE_BOTH,//设置加好友类型，默认双向 ); if (addFriendRes.code == 0) { // 添加请求发送成功 } "},"api/v2timmanager/getgroupmanager.html":{"url":"api/v2timmanager/getgroupmanager.html","title":"getGroupManager","summary":"高级群组功能入口√","keywords":"","body":"getGroupManager 功能介绍 高级群组功能入口 高级群组功能方法在核心类 TencentImSDKPlugin.v2TIMManager.getGroupManager()中。 参数详解 此API无参数 返回值 V2TIMGroupManager 返回值详解 名称 数值类型 描述 V2TIMGroupManager V2TIMGroupManager 高级群组功能入口 代码示例 // 使用getGroupManager创建群组的案例 // 创建群组 V2TimValueCallback createGroupRes = await TencentImSDKPlugin.v2TIMManager.getGroupManager().createGroup( groupType: \"Publich\",// 群类型 groupName: \"groupName\",// 群名称，不能为 null。 notification: \"\",// 群公告 introduction: \"\",// 群介绍 faceUrl: \"\",// 群头像Url isAllMuted: false,// 是否全体禁言 isSupportTopic: false,// 是否支持话题 addOpt: GroupAddOptTypeEnum.V2TIM_GROUP_ADD_AUTH,// 添加群设置 memberList: [],// 初始成员列表 ); if (createGroupRes.code == 0) { // 创建成功 var groupId = createGroupRes.data;// 创建的群号 } "},"api/v2timmanager/getmessagemanager.html":{"url":"api/v2timmanager/getmessagemanager.html","title":"getMessageManager","summary":"高级消息功能入口√","keywords":"","body":"getMessageManager 功能介绍 高级消息功能入口 发送消息方法在核心类 TencentImSDKPlugin.v2TIMManager.getMessageManager()中。 参数详解 此API无参数 返回值 V2TIMMessageManager 返回值详解 名称 数值类型 描述 V2TIMMessageManager V2TIMMessageManager 高级消息功能入口 代码示例 // 使用getMessageManager创建消息的案例 // 创建文本消息 V2TimValueCallback createTextMessageRes = await TencentImSDKPlugin.v2TIMManager .getMessageManager() .createTextMessage( text: \"test\", // 文本信息 ); if (createTextMessageRes.code == 0) { // 文本信息创建成功 String? id = createTextMessageRes.data?.id; // 发送文本消息 // 在sendMessage时，若只填写receiver则发个人用户单聊消息 // 若只填写groupID则发群组消息 // 若填写了receiver与groupID则发群内的个人用户，消息在群聊中显示，只有指定receiver能看见 V2TimValueCallback sendMessageRes = await TencentImSDKPlugin .v2TIMManager .getMessageManager() .sendMessage(id: id!, receiver: \"userID\", groupID: \"groupID\"); if (sendMessageRes.code == 0) { // 发送成功 } } "},"api/v2timmanager/getofflinepushmanager.html":{"url":"api/v2timmanager/getofflinepushmanager.html","title":"getOfflinePushManager","summary":"离线推送功能入√","keywords":"","body":"getOfflinePushManager 功能介绍 离线推送功能入 离线推送功能方法在核心类 TencentImSDKPlugin.v2TIMManager.getOfflinePushManager()中。 参数详解 此API无参数 返回值 V2TIMOfflinePushManager 返回值详解 名称 数值类型 描述 V2TIMOfflinePushManager V2TIMOfflinePushManager 离线推送功能入口 代码示例 // 使用getOfflinePushManager设置离线推送配置信息的案例 //设置离线推送配置信息 V2TimCallback setOfflinePushConfigRes = await TencentImSDKPlugin .v2TIMManager .getOfflinePushManager() .setOfflinePushConfig( businessID: 0,//businessID 为对应厂商的证书 ID token: \"\",//应合规要求，在用户同意隐私协议登录成功后，分别初始化注册各个厂商推送服务，并在注册结果回调处保存注册成功后的 token isTPNSToken: false); if (setOfflinePushConfigRes.code == 0) { // 设置成功 } "},"api/v2timmanager/getsignalingmanager.html":{"url":"api/v2timmanager/getsignalingmanager.html","title":"getSignalingManager","summary":"信令入口√","keywords":"","body":"getSignalingManager 功能介绍 信令入口 信令功能方法在核心类 TencentImSDKPlugin.v2TIMManager.getSignalingManager()中。 参数详解 此API无参数 返回值 V2TIMSignalingManager 返回值详解 名称 数值类型 描述 V2TIMSignalingManager V2TIMSignalingManager 信令入口 代码示例 // 使用getSignalingManager设置信令监听器与创建邀请的案例 //设置信令监听器 V2TimSignalingListener listener = V2TimSignalingListener( onInvitationCancelled: (String inviteID, String inviter, String data) async {}, onInvitationTimeout: (String inviteID, List inviteeList) async { //邀请超时的回调 //inviteID 邀请消息信令id //inviteeList 被邀请人的列表 }, onInviteeAccepted: (String inviteID, String invitee, String data) async { //邀请被接受的回调 //inviteID 邀请消息信令id //inviter 被邀请人id //data 接受邀请时的自定义data }, onInviteeRejected: (String inviteID, String invitee, String data) async { //邀请被拒绝的回调 //inviteID 邀请消息信令id //inviter 被邀请人id //data 拒绝邀请时的自定义data }, onReceiveNewInvitation: (String inviteID, String inviter, String groupID, List inviteeList, String data) async { //获取新的邀请的回调 //inviteID 邀请消息信令id //inviter 邀请人id //groupID 发出邀请的群组id //inviteeList 被邀请人的列表 //data 邀请时的自定义data }, ); TencentImSDKPlugin.v2TIMManager .getSignalingManager() .addSignalingListener(listener: listener); //添加信令监听器 V2TimValueCallback inviteRes = await TencentImSDKPlugin.v2TIMManager .getSignalingManager() .invite( invitee: \"\",//被邀请人id data: \"data\",//邀请时附带的定义消息 timeout: 30,//邀请超时时间 onlineUserOnly: false,//是否只发给在线用户 offlinePushInfo: OfflinePushInfo());//离线推送设置 if (inviteRes.code == 0) { //创建邀请成功 String? inviteId = inviteRes.data;//创建的邀请id } "},"api/v2timmanager/setapnslistener.html":{"url":"api/v2timmanager/setapnslistener.html","title":"setAPNSListener","summary":"设置苹果系统离线推送专用监听器√","keywords":"","body":"setAPNSListener 功能介绍 设置苹果系统离线推送专用监听器 为兼容苹果系统设置的离线推送专用监听器 先调用setAPNSListener()，再调用doBackground() 参数详解 此API无参数 返回值 void 返回值详解 此API无返回值 代码示例 //首先设置苹果系统离线推送专用监听器 TencentImSDKPlugin.v2TIMManager.setAPNSListener(); //APP 检测到应用退后台时可以调用此接口 V2TimCallback doBackgroundRes = await TencentImSDKPlugin.v2TIMManager .getOfflinePushManager() .doBackground(unreadCount: 0); if (doBackgroundRes.code == 0) { //调用成功后的逻辑 } "},"api/v2timmessagemanager/":{"url":"api/v2timmessagemanager/","title":"V2TIMMessageManager","summary":"提供高级消息处理相关接口","keywords":"","body":"V2TIMMessageManager V2TIMMessageManager功能介绍 提供高级消息处理相关接口 API目录 API 描述 addAdvancedMsgListener 添加高级消息的事件监听器 removeAdvancedMsgListener 移除高级消息监听器 createTextMessage 创建文本消息 createTextAtMessage 创建文本消息，并且可以附带 @ 提醒功能（最大支持 8KB） 提醒消息仅适用于在群组中发送的消息 createCustomMessage 创建定制化消息 createImageMessage 创建图片消息（图片文件最大支持 28 MB） createSoundMessage 创建音频消息 createVideoMessage 创建视频文件 createFileMessage 创建文件消息 createLocationMessage 创建位置信息 createFaceMessage 创建表情消息 createMergerMessage 创建合并消息 downloadMergerMessage 获取合并消息的子消息列表（下载被合并的消息列表） createForwardMessage 创建转发消息 createTargetedGroupMessage 创建一条定向群消息，定向群消息只有指定群成员才能收到。 sendMessage 发送消息 setC2CReceiveMessageOpt 设置用户消息接收选项 getC2CReceiveMessageOpt 查询某个用户的 C2C 消息接收选项 setGroupReceiveMessageOpt 修改群消息接收选项 getC2CHistoryMessageList 获取单聊历史消息 getGroupHistoryMessageList 获取群组历史消息 getHistoryMessageList 获取历史消息高级接口 appendMessage 添加多Element消息 reSendMessage 消息重发 sendReplyMessage 发送回复消息 revokeMessage 撤回消息 modifyMessage 消息变更 4.0.1及以后版本支持 markC2CMessageAsRead 设置单聊消息已读 markGroupMessageAsRead 设置群组消息已读 markAllMessageAsRead 标记所有消息为已读 deleteMessageFromLocalStorage 删除本地消息 deleteMessages 删除本地及漫游消息 clearC2CHistoryMessage 清空单聊本地及云端的消息（不删除会话） clearGroupHistoryMessage 清空群聊本地及云端的消息（不删除会话） insertC2CMessageToLocalStorage 向C2C消息列表中添加一条消息 insertGroupMessageToLocalStorage 向群组消息列表中添加一条消息 searchLocalMessages 搜索本地消息 sendMessageReadReceipts 发送消息已读回执 getMessageReadReceipts 获取消息已读回执 getGroupMessageReadMemberList 获取群消息已读群成员列表 setLocalCustomData 设置消息自定义数据（本地保存，不会发送到对端，程序卸载重装后失效） setLocalCustomInt 设置消息自定义数据，可以用来标记语音、视频消息是否已经播放（本地保存，不会发送到对端，程序卸载重装后失效） "},"api/v2timmessagemanager/addadvancedmsglistener.html":{"url":"api/v2timmessagemanager/addadvancedmsglistener.html","title":"addAdvancedMsgListener","summary":"添加高级消息的事件监听器√","keywords":"","body":"addAdvancedMsgListener 功能介绍 添加高级消息的事件监听器 通过 addAdvancedMsgListener 监听接收所有类型消息（文本、自定义、富媒体消息），相关回调在 V2TimAdvancedMsgListener 中定义。 注意： 使用addAdvancedMsgListener会在所有的高级消息监听器列表中新增一个高级消息监听器。 参数详解 参数名称 参数类型 是否必填 描述 listener V2TimAdvancedMsgListener 是 高级消息监听器 返回值 Future 返回值详解 此方法无返回值 代码示例 // 创建消息监听器 V2TimAdvancedMsgListener listener = V2TimAdvancedMsgListener( onRecvC2CReadReceipt: (List receiptList) { //单聊已读回调 }, onRecvMessageModified: (V2TimMessage message) { // msg 为被修改之后的消息对象 }, onRecvMessageReadReceipts: (List receiptList) { //群聊已读回调 receiptList.forEach((element) { element.groupID; // 群id element.msgID; // 已读回执消息 ID element.readCount; // 群消息最新已读数 element.unreadCount; // 群消息最新未读数 element.userID; // C2C 消息对方 ID }); }, onRecvMessageRevoked: (String messageid) { // 在本地维护的消息中处理被对方撤回的消息 }, onRecvNewMessage: (V2TimMessage message) async { // 处理文本消息 if (message.elemType == MessageElemType.V2TIM_ELEM_TYPE_TEXT) { message.textElem?.text; } // 使用自定义消息 if (message.elemType == MessageElemType.V2TIM_ELEM_TYPE_CUSTOM) { message.customElem?.data; message.customElem?.desc; message.customElem?.extension; } // 使用图片消息 if (message.elemType == MessageElemType.V2TIM_ELEM_TYPE_IMAGE) { message.imageElem ?.path; // 图片上传时的路径，消息发送者才会有这个字段，消息发送者可用这个字段将图片预先上屏，优化上屏体验。 message.imageElem?.imageList?.forEach((element) { // 遍历大图、原图、缩略图 // 解析图片属性 element?.height; element?.localUrl; element?.size; element?.type; // 大图 缩略图 原图 element?.url; element?.uuid; element?.width; }); } // 处理视频消息 if (message.elemType == MessageElemType.V2TIM_ELEM_TYPE_VIDEO) { // 解析视频消息属性，封面、播放地址、宽高、大小等。 message.videoElem?.UUID; message.videoElem?.duration; message.videoElem?.localSnapshotUrl; message.videoElem?.localVideoUrl; message.videoElem?.snapshotHeight; message.videoElem?.snapshotPath; // ... } // 处理音频消息 if (message.elemType == MessageElemType.V2TIM_ELEM_TYPE_SOUND) { // 解析语音消息 播放地址，本地地址，大小，时长等。 message.soundElem?.UUID; message.soundElem?.dataSize; message.soundElem?.duration; message.soundElem?.localUrl; message.soundElem?.url; // ... } // 处理文件消息 if (message.elemType == MessageElemType.V2TIM_ELEM_TYPE_FILE) { // 解析文件消息 文件名、文件大小、url等 message.fileElem?.UUID; message.fileElem?.fileName; message.fileElem?.fileSize; message.fileElem?.localUrl; message.fileElem?.path; message.fileElem?.url; } // 处理位置消息 if (message.elemType == MessageElemType.V2TIM_ELEM_TYPE_LOCATION) { // 解析地理位置消息，经纬度、描述等 message.locationElem?.desc; message.locationElem?.latitude; message.locationElem?.longitude; } // 处理表情消息 if (message.elemType == MessageElemType.V2TIM_ELEM_TYPE_FACE) { message.faceElem?.data; message.faceElem?.index; } // 处理群组tips文本消息 if (message.elemType == MessageElemType.V2TIM_ELEM_TYPE_GROUP_TIPS) { message.groupTipsElem?.groupID; // 所属群组 message.groupTipsElem?.type; // 群Tips类型 message.groupTipsElem?.opMember; // 操作人资料 message.groupTipsElem?.memberList; // 被操作人资料 message.groupTipsElem?.groupChangeInfoList; // 群信息变更详情 message.groupTipsElem?.memberChangeInfoList; // 群成员变更信息 message.groupTipsElem?.memberCount; // 当前群在线人数 } // 处理合并消息消息 if (message.elemType == MessageElemType.V2TIM_ELEM_TYPE_MERGER) { message.mergerElem?.abstractList; message.mergerElem?.isLayersOverLimit; message.mergerElem?.title; V2TimValueCallback> download = await TencentImSDKPlugin.v2TIMManager .getMessageManager() .downloadMergerMessage( msgID: message.msgID!, ); if (download.code == 0) { List? messageList = download.data; } } if (message.textElem?.nextElem != null) { //通过第一个 Elem 对象的 nextElem 方法获取下一个 Elem 对象，如果下一个 Elem 对象存在，会返回 Elem 对象实例，如果不存在，会返回 null。 } }, onSendMessageProgress: (V2TimMessage message, int progress) { //文件上传进度回调 }, ); // 添加高级消息的事件监听器 TencentImSDKPlugin.v2TIMManager .getMessageManager() .addAdvancedMsgListener(listener: listener); "},"api/v2timmessagemanager/removeadvancedmsglistener.html":{"url":"api/v2timmessagemanager/removeadvancedmsglistener.html","title":"removeAdvancedMsgListener","summary":"移除高级消息监听器√","keywords":"","body":"removeAdvancedMsgListener 功能介绍 移除高级消息监听器 注意： 若listener为null则删除所有的高级消息监听器 参数详解 参数名称 参数类型 是否必填 描述 listener V2TimAdvancedMsgListener 是 需要移除的高级消息监听器 返回值 void 返回值详解 此API无返回值 代码示例 // 创建消息监听器 V2TimAdvancedMsgListener listener = V2TimAdvancedMsgListener( onRecvC2CReadReceipt: (List receiptList) { //单聊已读回调 }, onRecvMessageModified: (V2TimMessage message) { // msg 为被修改之后的消息对象 }, onRecvMessageReadReceipts: (List receiptList) { //群聊已读回调 receiptList.forEach((element) { element.groupID; // 群id element.msgID; // 已读回执消息 ID element.readCount; // 群消息最新已读数 element.unreadCount; // 群消息最新未读数 element.userID; // C2C 消息对方 ID }); }, onRecvMessageRevoked: (String messageid) { // 在本地维护的消息中处理被对方撤回的消息 }, onRecvNewMessage: (V2TimMessage message) async { // 处理文本消息 if (message.elemType == MessageElemType.V2TIM_ELEM_TYPE_TEXT) { message.textElem?.text; } // 使用自定义消息 if (message.elemType == MessageElemType.V2TIM_ELEM_TYPE_CUSTOM) { message.customElem?.data; message.customElem?.desc; message.customElem?.extension; } // 使用图片消息 if (message.elemType == MessageElemType.V2TIM_ELEM_TYPE_IMAGE) { message.imageElem ?.path; // 图片上传时的路径，消息发送者才会有这个字段，消息发送者可用这个字段将图片预先上屏，优化上屏体验。 message.imageElem?.imageList?.forEach((element) { // 遍历大图、原图、缩略图 // 解析图片属性 element?.height; element?.localUrl; element?.size; element?.type; // 大图 缩略图 原图 element?.url; element?.uuid; element?.width; }); } // 处理视频消息 if (message.elemType == MessageElemType.V2TIM_ELEM_TYPE_VIDEO) { // 解析视频消息属性，封面、播放地址、宽高、大小等。 message.videoElem?.UUID; message.videoElem?.duration; message.videoElem?.localSnapshotUrl; message.videoElem?.localVideoUrl; message.videoElem?.snapshotHeight; message.videoElem?.snapshotPath; // ... } // 处理音频消息 if (message.elemType == MessageElemType.V2TIM_ELEM_TYPE_SOUND) { // 解析语音消息 播放地址，本地地址，大小，时长等。 message.soundElem?.UUID; message.soundElem?.dataSize; message.soundElem?.duration; message.soundElem?.localUrl; message.soundElem?.url; // ... } // 处理文件消息 if (message.elemType == MessageElemType.V2TIM_ELEM_TYPE_FILE) { // 解析文件消息 文件名、文件大小、url等 message.fileElem?.UUID; message.fileElem?.fileName; message.fileElem?.fileSize; message.fileElem?.localUrl; message.fileElem?.path; message.fileElem?.url; } // 处理位置消息 if (message.elemType == MessageElemType.V2TIM_ELEM_TYPE_LOCATION) { // 解析地理位置消息，经纬度、描述等 message.locationElem?.desc; message.locationElem?.latitude; message.locationElem?.longitude; } // 处理表情消息 if (message.elemType == MessageElemType.V2TIM_ELEM_TYPE_FACE) { message.faceElem?.data; message.faceElem?.index; } // 处理群组tips文本消息 if (message.elemType == MessageElemType.V2TIM_ELEM_TYPE_GROUP_TIPS) { message.groupTipsElem?.groupID; // 所属群组 message.groupTipsElem?.type; // 群Tips类型 message.groupTipsElem?.opMember; // 操作人资料 message.groupTipsElem?.memberList; // 被操作人资料 message.groupTipsElem?.groupChangeInfoList; // 群信息变更详情 message.groupTipsElem?.memberChangeInfoList; // 群成员变更信息 message.groupTipsElem?.memberCount; // 当前群在线人数 } // 处理合并消息消息 if (message.elemType == MessageElemType.V2TIM_ELEM_TYPE_MERGER) { message.mergerElem?.abstractList; message.mergerElem?.isLayersOverLimit; message.mergerElem?.title; V2TimValueCallback> download = await TencentImSDKPlugin.v2TIMManager .getMessageManager() .downloadMergerMessage( msgID: message.msgID!, ); if (download.code == 0) { List? messageList = download.data; } } if (message.textElem?.nextElem != null) { //通过第一个 Elem 对象的 nextElem 方法获取下一个 Elem 对象，如果下一个 Elem 对象存在，会返回 Elem 对象实例，如果不存在，会返回 null。 } }, onSendMessageProgress: (V2TimMessage message, int progress) { //文件上传进度回调 }, ); // 添加高级消息的事件监听器 TencentImSDKPlugin.v2TIMManager .getMessageManager() .addAdvancedMsgListener(listener: listener); // 之后可移除高级消息的事件监听器 TencentImSDKPlugin.v2TIMManager .getMessageManager() .removeAdvancedMsgListener(listener: listener); "},"api/v2timmessagemanager/createtextmessage.html":{"url":"api/v2timmessagemanager/createtextmessage.html","title":"createTextMessage","summary":"创建文本消息√","keywords":"","body":"createTextMessage 功能介绍 创建文本消息 参数详解 参数名称 参数类型 是否必填 描述 text String 是 消息文本 返回值 V2TimValueCallback { code : int desc : String data : { id : String messageInfo : V2TimMessage } } 返回值详解 名称 数值类型 描述 code int 请求结果错误码 desc String 请求结果描述 data V2TimMsgCreateInfoResult 创建后的Text信息 代码示例 // 创建文本消息 V2TimValueCallback createTextMessageRes = await TencentImSDKPlugin.v2TIMManager .getMessageManager() .createTextMessage( text: \"test\", // 文本信息 ); if (createTextMessageRes.code == 0) { // 文本信息创建成功 String? id = createTextMessageRes.data?.id; // 发送文本消息 // 在sendMessage时，若只填写receiver则发个人用户单聊消息 // 若只填写groupID则发群组消息 // 若填写了receiver与groupID则发群内的个人用户，消息在群聊中显示，只有指定receiver能看见 V2TimValueCallback sendMessageRes = await TencentImSDKPlugin .v2TIMManager .getMessageManager() .sendMessage(id: id!, receiver: \"userID\", groupID: \"groupID\"); if (sendMessageRes.code == 0) { // 发送成功 } } "},"api/v2timmessagemanager/createtextatmessage.html":{"url":"api/v2timmessagemanager/createtextatmessage.html","title":"createTextAtMessage","summary":"创建文本消息，并且可以附带 @ 提醒功能","keywords":"","body":"createTextAtMessage 功能介绍 创建文本消息，并且可以附带 @ 提醒功能(直播群不支持) 参数详解 参数名称 参数类型 是否必填 描述 text String 是 消息文本 atUserList List 是 @用户ID列表，如果需要 @ALL，请传入 kImSDK_MesssageAtALL 常量字符串。 返回值 V2TimValueCallback { code : int desc : String data : { id : String messageInfo : V2TimMessage } } 返回值详解 名称 数值类型 描述 code int 请求结果错误码 desc String 请求结果描述 data V2TimMsgCreateInfoResult 创建后的@Text信息 代码示例 // 创建文本消息 V2TimValueCallback createTextAtMessageRes = await TencentImSDKPlugin.v2TIMManager .getMessageManager() .createTextAtMessage( text: \"test\", // 文本信息 atUserList: [], // @用户ID列表 ); if (createTextAtMessageRes.code == 0) { // 文本信息创建成功 String? id = createTextAtMessageRes.data?.id; // 发送@文本消息 // 在sendMessage时，必须填写groupID，receiver必须为空，否则无法发送消息 V2TimValueCallback sendMessageRes = await TencentImSDKPlugin .v2TIMManager .getMessageManager() .sendMessage(id: id!, receiver: \"\", groupID: \"groupID\"); if (sendMessageRes.code == 0) { // 发送成功 } } "},"api/v2timmessagemanager/createcustommessage.html":{"url":"api/v2timmessagemanager/createcustommessage.html","title":"createCustomMessage","summary":"创建定制化消息√","keywords":"","body":"createCustomMessage 功能介绍 创建定制化消息 参数详解 参数名称 参数类型 是否必填 描述 data String 是 自定义data desc String 否 自定义desc extension String 否 自定义extension 返回值 V2TimValueCallback { code : int desc : String data : { id : String messageInfo : V2TimMessage } } 返回值详解 名称 数值类型 描述 code int 请求结果错误码 desc String 请求结果描述 data V2TimMsgCreateInfoResult 创建后的自定义消息信息 代码示例 // 创建自定义消息 V2TimValueCallback createCustomMessageRes = await TencentImSDKPlugin.v2TIMManager .getMessageManager() .createCustomMessage( data: '自定义data', desc: '自定义desc', extension: '自定义extension', ); if (createCustomMessageRes.code == 0) { String? id = createCustomMessageRes.data?.id; // 发送自定义消息 // 在sendMessage时，若只填写receiver则发个人用户单聊消息 // 若只填写groupID则发群组消息 // 若填写了receiver与groupID则发群内的个人用户，消息在群聊中显示，只有指定receiver能看见 V2TimValueCallback sendMessageRes = await TencentImSDKPlugin .v2TIMManager .getMessageManager() .sendMessage(id: id!, receiver: \"userID\", groupID: \"groupID\"); if (sendMessageRes.code == 0) { // 发送成功 sendMessageRes.data?.customElem?.data; //自定义data sendMessageRes.data?.customElem?.desc; //自定义desc sendMessageRes.data?.customElem?.extension; //自定义extension } } "},"api/v2timmessagemanager/createimagemessage.html":{"url":"api/v2timmessagemanager/createimagemessage.html","title":"createImageMessage","summary":"创建图片消息（图片文件最大支持 28 MB）√","keywords":"","body":"createImageMessage 功能介绍 创建图片消息 图片文件最大支持 28 MB 创建图片消息需要先获取到本地图片路径。 创建图片路径不能使用网络Url。 发送消息过程中，会先将图片文件上传至服务器，同时回调上传进度。上传成功后再发送消息。 参数详解 参数名称 参数类型 是否必填 描述 imagePath String 是 图片本地路径 fileContent String 否 （web 必填） 字节数组 fileName String 否 （web 必填） 图片名 返回值 V2TimValueCallback { code : int desc : String data : { id : String messageInfo : V2TimMessage } } 返回值详解 名称 数值类型 描述 code int 请求结果错误码 desc String 请求结果描述 data V2TimMsgCreateInfoResult 创建后的图片信息 代码示例 // 创建图片消息 V2TimValueCallback createImageMessageRes = await TencentImSDKPlugin.v2TIMManager .getMessageManager() .createImageMessage( imagePath: \"本地图片绝对路径\", // 不能使用网络Url ); if (createImageMessageRes.code == 0) { String id = createImageMessageRes.data.id; // 发送图片消息 // 若创建图片路径使用网络Url会报20001错误。 // 在sendMessage时，若只填写receiver则发个人用户单聊消息 // 若只填写groupID则发群组消息 // 若填写了receiver与groupID则发群内的个人用户，消息在群聊中显示，只有指定receiver能看见 V2TimValueCallback sendMessageRes = await TencentImSDKPlugin .v2TIMManager .getMessageManager() .sendMessage(id: id, receiver: \"userID\", groupID: \"groupID\"); if (sendMessageRes.code == 0) { // 发送成功 } } "},"api/v2timmessagemanager/createsoundmessage.html":{"url":"api/v2timmessagemanager/createsoundmessage.html","title":"createSoundMessage","summary":"创建音频消息","keywords":"","body":"createSoundMessage 功能介绍 创建音频消息 创建语音消息需要先获取到本地语音文件路径和语音时长，其中语音时长可用于接收端 UI 显示。 发送消息过程中，会先将语音文件上传至服务器，同时回调上传进度。上传成功后再发送消息。 参数详解 参数名称 参数类型 是否必填 描述 soundPath String 是 音频文件地址 duration int 是 音频文件时长 返回值 V2TimValueCallback { code : int desc : String data : { id : String messageInfo : V2TimMessage } } 返回值详解 名称 数值类型 描述 code int 请求结果错误码 desc String 请求结果描述 data V2TimMsgCreateInfoResult 创建后的音频信息 代码示例 // 创建音频消息 V2TimValueCallback createSoundMessageRes = await TencentImSDKPlugin.v2TIMManager .getMessageManager() .createSoundMessage( soundPath: \"本地录音文件绝对路径\", // 不能使用网络Url duration: 10, // 录音时长，需要用户自己读取 ); if (createSoundMessageRes.code == 0) { String? id = createSoundMessageRes.data?.id; // 发送音频消息 // 在sendMessage时，若只填写receiver则发个人用户单聊消息 // 若只填写groupID则发群组消息 // 若填写了receiver与groupID则发群内的个人用户，消息在群聊中显示，只有指定receiver能看见 V2TimValueCallback sendMessageRes = await TencentImSDKPlugin .v2TIMManager .getMessageManager() .sendMessage(id: id!, receiver: \"userID\", groupID: \"groupID\"); if (sendMessageRes.code == 0) { // 发送成功 } } "},"api/v2timmessagemanager/createvideomessage.html":{"url":"api/v2timmessagemanager/createvideomessage.html","title":"createVideoMessage","summary":"创建视频文件√","keywords":"","body":"createVideoMessage 功能介绍 创建视频文件 参数详解 参数名称 参数类型 是否必填 描述 videoFilePath String 是 视频文件本地路径 type String 是 视频类型 duration int 是 视频时长，单位 s snapshotPath String 是 视频封面图片路径 fileName String 否（web端必填） 文件名 fileContent Uint8List 否（web端必填） 字节数组 返回值 V2TimValueCallback { code : int desc : String data : { id : String messageInfo : V2TimMessage } } 返回值详解 名称 数值类型 描述 code int 请求结果错误码 desc String 请求结果描述 data V2TimMsgCreateInfoResult 创建后的视频信息 代码示例 // 创建视频消息 V2TimValueCallback createVideoMessageRes = await TencentImSDKPlugin.v2TIMManager .getMessageManager() .createVideoMessage( videoFilePath: \"本地视频文件绝对路径\", // 不能使用网络Url type: \"mp4\", // 视频类型 会在接收的消息属性里显示，一般用于回显文件类型 duration: 10, // 视频时长 会在接收的消息属性里显示，一般用于回显文件属性 snapshotPath: \"本地视频封面文件绝对路径\", // 不能使用网络Url ); if (createVideoMessageRes.code == 0) { String? id = createVideoMessageRes.data?.id; // 发送视频消息 // 在sendMessage时，若只填写receiver则发个人用户单聊消息 // 若只填写groupID则发群组消息 // 若填写了receiver与groupID则发群内的个人用户，消息在群聊中显示，只有指定receiver能看见 V2TimValueCallback sendMessageRes = await TencentImSDKPlugin .v2TIMManager .getMessageManager() .sendMessage(id: id!, receiver: \"userID\", groupID: \"groupID\"); if (sendMessageRes.code == 0) { // 发送成功 } } "},"api/v2timmessagemanager/createfilemessage.html":{"url":"api/v2timmessagemanager/createfilemessage.html","title":"createFileMessage","summary":"创建文件消息√","keywords":"","body":"createFileMessage 功能介绍 创建文件消息 创建文件消息需要先获取到本地文件路径。 发送消息过程中，会先将文件上传至服务器，同时回调上传进度。上传成功后再发送消息。 参数详解 参数名称 参数类型 是否必填 描述 filePath String 是 视频文件本地路径 fileName String 是 文件名 fileContent Uint8List 否（web端必填） 字节数组 返回值 V2TimValueCallback { code : int desc : String data : { id : String messageInfo : V2TimMessage } } 返回值详解 名称 数值类型 描述 code int 请求结果错误码 desc String 请求结果描述 data V2TimMsgCreateInfoResult 创建后的文件信息 代码示例 // 创建文件消息 V2TimValueCallback createFileMessageRes = await TencentImSDKPlugin.v2TIMManager .getMessageManager() .createFileMessage( filePath: \"本地文件绝对路径\",// 不能使用网络Url fileName: \"文件名\", ); if (createFileMessageRes.code == 0) { String id = createFileMessageRes.data.id; // 发送文件消息 // 在sendMessage时，若只填写receiver则发个人用户单聊消息 // 若只填写groupID则发群组消息 // 若填写了receiver与groupID则发群内的个人用户，消息在群聊中显示，只有指定receiver能看见 V2TimValueCallback sendMessageRes = await TencentImSDKPlugin .v2TIMManager .getMessageManager() .sendMessage(id: id, receiver: \"userID\", groupID: \"groupID\"); if (sendMessageRes.code == 0) { // 发送成功 } } "},"api/v2timmessagemanager/createlocationmessage.html":{"url":"api/v2timmessagemanager/createlocationmessage.html","title":"createLocationMessage","summary":"创建位置信息√","keywords":"","body":"createLocationMessage 功能介绍 创建位置信息 定位消息会直接发送经纬度，一般需要配合地图控件显示。 参数详解 参数名称 参数类型 是否必填 描述 desc String 是 地理位置描述信息 longitude double 是 经度 latitude double 是 纬度 返回值 V2TimValueCallback { code : int desc : String data : { id : String messageInfo : V2TimMessage } } 返回值详解 名称 数值类型 描述 code int 请求结果错误码 desc String 请求结果描述 data V2TimMsgCreateInfoResult 创建后的位置信息 代码示例 // 创建位置消息 V2TimValueCallback createLocationMessage = await TencentImSDKPlugin.v2TIMManager .getMessageManager() .createLocationMessage( desc: \"深圳市南山区深南大道\", //位置信息摘要 longitude: 34, // 经度 latitude: 20, // 纬度 ); if (createLocationMessage.code == 0) { String? id = createLocationMessage.data?.id; // 发送位置消息 // 在sendMessage时，若只填写receiver则发个人用户单聊消息 // 若只填写groupID则发群组消息 // 若填写了receiver与groupID则发群内的个人用户，消息在群聊中显示，只有指定receiver能看见 V2TimValueCallback sendMessageRes = await TencentImSDKPlugin .v2TIMManager .getMessageManager() .sendMessage(id: id!, receiver: \"userID\", groupID: \"groupID\"); if (sendMessageRes.code == 0) { // 发送成功 } } "},"api/v2timmessagemanager/createfacemessage.html":{"url":"api/v2timmessagemanager/createfacemessage.html","title":"createFaceMessage","summary":"创建表情消息√","keywords":"","body":"createFaceMessage 功能介绍 创建表情消息 定位消息会直接发送表情编码，通常接收端需要将其转换成对应的表情 icon。 SDK 并不提供表情包，如果开发者有表情包，可使用 index 存储表情在表情包中的索引，或者使用 data 存储表情映射的字符串 key，这些都由用户自定义，SDK 内部只做透传。 参数详解 参数名称 参数类型 是否必填 描述 index int 是 表情索引 data String 是 自定义数据 返回值 V2TimValueCallback { code : int desc : String data : { id : String messageInfo : V2TimMessage } } 返回值详解 名称 数值类型 描述 code int 请求结果错误码 desc String 请求结果描述 data V2TimMsgCreateInfoResult 创建后的表情信息 代码示例 // 创建表情消息 V2TimValueCallback createFaceMessageRes = await TencentImSDKPlugin.v2TIMManager .getMessageManager() .createFaceMessage( index: 0,// 表情索引 data: \"自定义消息\", ); if (createFaceMessageRes.code == 0) { String? id = createFaceMessageRes.data?.id; // 发送表情消息 // 在sendMessage时，若只填写receiver则发个人用户单聊消息 // 若只填写groupID则发群组消息 // 若填写了receiver与groupID则发群内的个人用户，消息在群聊中显示，只有指定receiver能看见 V2TimValueCallback sendMessageRes = await TencentImSDKPlugin .v2TIMManager .getMessageManager() .sendMessage(id: id!, receiver: \"userID\", groupID: \"groupID\"); if (sendMessageRes.code == 0) { // 发送成功 } } "},"api/v2timmessagemanager/createmergermessage.html":{"url":"api/v2timmessagemanager/createmergermessage.html","title":"createMergerMessage","summary":"创建合并消息√","keywords":"","body":"createMergerMessage 功能介绍 创建合并消息 如果您想实现类似于微信的合并转发功能，需要进行以下步骤： 根据原始消息列表创建一条合并消息。 把合并消息发送到对端。 对端收到合并消息后解析出原始消息列表。 我们在创建一条合并消息的时候不仅要设置合并消息列表，还要设置标题和摘要信息。 参数详解 参数名称 参数类型 是否必填 描述 msgIDList String 是 原始消息ID列表 title String 是 标题 abstractList List 是 摘要列表 compatibleText String 是 兼容文本信息，低版本 SDK 如果不支持合并消息，默认会收到一条文本消息，文本消息的内容为 compatibleText webMessageInstanceList List 否 web端消息列表 返回值 V2TimValueCallback { code : int desc : String data : { id : String messageInfo : V2TimMessage } } 返回值详解 名称 数值类型 描述 code int 请求结果错误码 desc String 请求结果描述 data V2TimMsgCreateInfoResult 创建的合并消息 代码示例 // 创建合并消息 V2TimValueCallback createMergerMessageResult = await TencentImSDKPlugin.v2TIMManager .getMessageManager() .createMergerMessage( // 需要合并的消息id列表，需要被转发的消息列表，消息列表里可以包含合并消息，不能包含群 Tips 消息 messageId为消息发送后服务端创建的messageid，不是创建消息时的消息id msgIDList: [\"msgid1\", \"msgid2\"], title: \"user1与user2的聊天\", // 合并消息标题 abstractList: [\"user1:hello\", \"user2:你好\"], // 合并消息摘要列表 compatibleText: \"当前版本不支持该消息\", // 合并消息兼容文本，低版本 SDK 如果不支持合并消息，默认会收到一条文本消息，文本消息的内容为 compatibleText ); if (createMergerMessageResult.code == 0) { // 发送合并消息 // 在sendMessage时，若只填写receiver则发个人用户单聊消息 // 若只填写groupID则发群组消息 // 若填写了receiver与groupID则发群内的个人用户，消息在群聊中显示，只有指定receiver能看见 TencentImSDKPlugin.v2TIMManager.getMessageManager().sendMessage( id: createMergerMessageResult.data!.id!, receiver: \"receiver\", groupID: \"groupID\", ); } "},"api/v2timmessagemanager/downloadmergermessage.html":{"url":"api/v2timmessagemanager/downloadmergermessage.html","title":"downloadMergerMessage","summary":"获取合并消息的子消息列表","keywords":"","body":"downloadMergerMessage 功能介绍 获取合并消息的子消息列表(web不支持) 参数详解 参数名称 参数类型 是否必填 描述 msgID String 是 需要获取的合并消息的 返回值 V2TimValueCallback> { code : int desc : String data : List } 返回值详解 名称 数值类型 描述 code int 请求结果错误码 desc String 请求结果描述 data ListV2TimMessage > 获取到的合并消息列表 代码示例 // 创建消息监听器 V2TimAdvancedMsgListener listener = V2TimAdvancedMsgListener( onRecvNewMessage: (V2TimMessage message) async { // 处理合并消息消息 if (message.elemType == MessageElemType.V2TIM_ELEM_TYPE_MERGER) { message.mergerElem?.abstractList; // 摘要列表 message.mergerElem?.isLayersOverLimit; // 是否超出合并上限 message.mergerElem?.title; // 标题 // 根据消息id对合并消息进行下载 V2TimValueCallback> download = await TencentImSDKPlugin.v2TIMManager .getMessageManager() .downloadMergerMessage( msgID: message.msgID!, ); if (download.code == 0) { List messageList = download.data!; } } }, ); // 添加高级消息的事件监听器 TencentImSDKPlugin.v2TIMManager .getMessageManager() .addAdvancedMsgListener(listener: listener); // 创建合并消息 V2TimValueCallback createMergerMessageResult = await TencentImSDKPlugin.v2TIMManager .getMessageManager() .createMergerMessage( msgIDList: [ \"msgid1\",// 需要合并的已经发送后的messageID \"msgid2\"// 需要合并的已经发送后的messageID ], // 需要合并的消息id列表，需要被转发的消息列表，消息列表里可以包含合并消息，不能包含群 Tips 消息 title: \"user1与user2的聊天\", // 合并消息标题 abstractList: [\"user1:hello\", \"user2:你好\"], // 合并消息摘要列表 compatibleText: \"当前版本不支持该消息\", // 合并消息兼容文本，低版本 SDK 如果不支持合并消息，默认会收到一条文本消息，文本消息的内容为 compatibleText ); if (createMergerMessageResult.code == 0) { // 发送合并消息 // 在sendMessage时，若只填写receiver则发个人用户单聊消息 // 若只填写groupID则发群组消息 // 若填写了receiver与groupID则发群内的个人用户，消息在群聊中显示，只有指定receiver能看见 TencentImSDKPlugin.v2TIMManager.getMessageManager().sendMessage( id: createMergerMessageResult.data!.id!, receiver: \"receiver\", groupID: \"groupID\", ); } "},"api/v2timmessagemanager/createforwardmessage.html":{"url":"api/v2timmessagemanager/createforwardmessage.html","title":"createForwardMessage","summary":"创建转发消息√","keywords":"","body":"createForwardMessage 功能介绍 创建转发消息 如果您需要转发单条消息，可以先通过 createForwardMessage 接口创建一条和原消息内容完全一样的转发消息，再调用 sendMessage 接口把转发消息发送出去。 参数详解 参数名称 参数类型 是否必填 描述 msgID String 是 需要转发的消息的id webMessageInstance String 否 web端消息的实例 返回值 V2TimValueCallback { code : int desc : String data : { id : String messageInfo : V2TimMessage } } 返回值详解 名称 数值类型 描述 code int 请求结果错误码 desc String 请求结果描述 data V2TimMsgCreateInfoResult 创建的转发消息 代码示例 // 创建转发消息 V2TimValueCallback createForwardMessageRes = await TencentImSDKPlugin.v2TIMManager .getMessageManager() .createForwardMessage( // 需要合并的消息id列表，需要被转发的消息列表，消息列表里可以包含合并消息，不能包含群 Tips 消息 messageId为消息发送后服务端创建的messageid，不是创建消息时的消息id msgID: \"msgid\", webMessageInstance:\"\", // 若消息为web端传来的消息，请使用V2TimMessage中的messageFromWeb作为此处的参数 ); if (createForwardMessageRes.code == 0) { // 文本信息创建成功 String id = createForwardMessageRes.data!.id!; // 发送转发消息 // 在sendMessage时，若只填写receiver则发个人用户单聊消息 // 若只填写groupID则发群组消息 // 若填写了receiver与groupID则发群内的个人用户，消息在群聊中显示，只有指定receiver能看见 V2TimValueCallback sendMessageRes = await TencentImSDKPlugin .v2TIMManager .getMessageManager() .sendMessage(id: id, receiver: \"userID\", groupID: \"groupID\"); if (sendMessageRes.code == 0) { // 发送成功 } } "},"api/v2timmessagemanager/createtargetedgroupmessage.html":{"url":"api/v2timmessagemanager/createtargetedgroupmessage.html","title":"createTargetedGroupMessage","summary":"创建一条定向群消息√","keywords":"","body":"createTargetedGroupMessage 功能介绍 创建一条定向群消息 定向消息是指，向群内部分指定的成员发送消息，而未被指定的群成员无法收到该消息。可以按照下面的方式实现： 调用 createXXXMessage (其中 XXX 表示具体的消息类型) 接口创建一条原始消息对象 V2TIMMessage。 调用 createTargetedGroupMessage 接口根据原始消息对象创建定向消息对象 V2TimMessage，并指定消息接收成员列表。 调用 sendMessage 接口发送定向消息。 注意： 仅Flutter sdk 3.8.0 及以上版本支持。 该功能需要购买旗舰版套餐包。 创建定向群消息的原始消息对象不支持群 @ 消息。 社群（Community）和直播群（AVChatRoom）不支持发送定向群消息。 定向群消息默认不计入群会话的未读计数。 参数详解 参数名称 参数类型 是否必填 描述 id String 是 创建的消息的id receiverList List 是 群内部分成员id列表 返回值 V2TimValueCallback { code : int desc : String data : { id : String messageInfo : V2TimMessage } } 返回值详解 名称 数值类型 描述 code int 请求结果错误码 desc String 请求结果描述 data V2TimMsgCreateInfoResult 创建的定向群消息 代码示例 // 先创建消息 V2TimValueCallback target = await TencentImSDKPlugin.v2TIMManager .getMessageManager() .createTextMessage(text: \"\"); // 获取消息的发送id String? id = target.data?.id; // 创建定向群消息消息 V2TimValueCallback groupTarget = await TencentImSDKPlugin.v2TIMManager .getMessageManager() .createTargetedGroupMessage( id: id!,// 创建的消息id receiverList: ['user1', 'user2'],//定向成员id列表 ); // 发送定向群消息 if (groupTarget.code == 0) { String? groupTargetdId = groupTarget.data?.id; // 发送定向群消息 // 若只填写groupID则发群组消息 // 若填写了receiver与groupID则发群内的个人用户，消息在群聊中显示，只有指定receiver能看见 V2TimValueCallback sendMessageRes = await TencentImSDKPlugin.v2TIMManager.getMessageManager().sendMessage( id: groupTargetdId!, receiver: \"userID\", groupID: \"groupID\"); if (sendMessageRes.code == 0) { // 发送成功 } } "},"api/v2timmessagemanager/sendmessage.html":{"url":"api/v2timmessagemanager/sendmessage.html","title":"sendMessage","summary":"发送消息√","keywords":"","body":"sendMessage 功能介绍 发送消息 发送消息方法在核心类 TencentImSDKPlugin.v2TIMManager.getMessageManager()中。 V2TimMessage 中可以携带不同类型子类，表示不同类型的消息。 发送消息首先通过createXXXMessage创建不同种类的信息，再通过sendMessage根据消息id发送。 消息类型如下： createTextMessage：文本消息 createCustomMessage：自定义消息 createImageMessage：图片消息 createSoundMessage：音频消息 createVideoMessage：视频消息 createFileMessage：文件消息 createLocationMessage：位置消息 createFaceMessage：表情消息 createForwardMessage：创建转发消息 createMergerMessage：创建合并消息 createTargetedGroupMessage：定向群消息 参数详解 参数 参数类型 是否必填 含义 单聊有效 群聊有效 说明 id String 是 创建消息返回的id YES YES 需要通过对应的 createXxxMessage 接口先行创建 receiver String 是 单聊消息接收者 userID YES NO 如果是发送 C2C 单聊消息，只需要指定 receiver 即可 groupID String 是 群聊 groupID NO YES 如果是发送群聊消息，只需要指定 groupID 即可 priority MessagePriorityEnum 否 消息优先级 NO YES 请把重要消息设置为高优先级（例如红包、礼物消息），高频且不重要的消息设置为低优先级（例如点赞消息） onlineUserOnly bool 否 是否只有在线用户才能收到 YES YES 如果设置为 YES ，接收方历史消息拉取不到，常被用于实现”对方正在输入”或群组里的非重要提示等弱提示功能 offlinePushInfo OfflinePushInfo 否 离线推送信息 YES YES 离线推送时携带的标题和内容 needReadReceipt bool 否 发送群消息是否支持已读 NO YES 发送群消息是否支持已读 isExcludedFromUnreadCount bool 否 发送消息是否计入会话未读数 YES YES 如果设置为 true，发送消息不会计入会话未读，默认为 false isExcludedFromLastMessage bool 否 发送消息是否计入会话 lastMessage YES YES 如果设置为 true，发送消息不会计入会话 lastMessage，默认为 false cloudCustomData String 否 消息云端数据 YES YES 消息附带的额外的数据，存云端，消息的接受者可以访问到 localCustomData String 否 消息本地数据 YES YES 消息附带的额外的数据，存本地，消息的接受者不可以访问到，App 卸载后数据丢失 返回值 V2TimValueCallback { code : int desc : String data : { cloudCustomData : String customElem : V2TimCustomElem elemType : int faceElem : V2TimFaceElem faceUrl : String fileElem : V2TimFileElem friendRemark : String groupAtUserList : List groupID : String groupTipsElem : V2TimGroupTipsElem id : String imageElem : V2TimImageElem isExcludedFromLastMessage : bool isExcludedFromUnreadCount : bool isPeerRead : bool isRead : bool isSelf : bool localCustomData : String localCustomInt : int locationElem : V2TimLocationElem mergerElem : V2TimMergerElem messageFromWeb : String msgID : String nameCard : String needReadReceipt : bool nickName : String offlinePushInfo : V2TimOfflinePushInfo priority : int progress : int random : int sender : String seq : String soundElem : V2TimSoundElem status : int textElem : V2TimTextElem timestamp : int userID : String videoElem : V2TimVideoElem } } 返回值详解 名称 数值类型 描述 code int 请求结果错误码 desc String 请求结果描述 data V2TimMessage 发送的信息 代码示例 // 创建文本消息 V2TimValueCallback createTextMessageRes = await TencentImSDKPlugin.v2TIMManager .getMessageManager() .createTextMessage( text: \"test\", // 文本信息 ); if (createTextMessageRes.code == 0) { // 文本信息创建成功 String? id = createTextMessageRes.data?.id; // 发送文本消息 // 在sendMessage时，若只填写receiver则发个人用户单聊消息 // 若只填写groupID则发群组消息 // 若填写了receiver与groupID则发群内的个人用户，消息在群聊中显示，只有指定receiver能看见 V2TimValueCallback sendMessageRes = await TencentImSDKPlugin.v2TIMManager.getMessageManager().sendMessage( id: id!, // 创建的messageid receiver: \"userID\", // 接收人id groupID: \"groupID\", // 接收群组id priority: MessagePriorityEnum.V2TIM_PRIORITY_DEFAULT, // 消息优先级 onlineUserOnly: false, // 是否只有在线用户才能收到，如果设置为 true ，接收方历史消息拉取不到，常被用于实现“对方正在输入”或群组里的非重要提示等弱提示功能，该字段不支持 AVChatRoom。 isExcludedFromUnreadCount: false, // 发送消息是否计入会话未读数 isExcludedFromLastMessage: false, // 发送消息是否计入会话 lastMessage needReadReceipt: false, // 消息是否需要已读回执（只有 Group 消息有效，6.1 及以上版本支持，需要您购买旗舰版套餐） offlinePushInfo: OfflinePushInfo(), // 离线推送时携带的标题和内容 cloudCustomData: \"\", // 消息云端数据，消息附带的额外的数据，存云端，消息的接受者可以访问到 localCustomData: \"\" // 消息本地数据，消息附带的额外的数据，存本地，消息的接受者不可以访问到，App 卸载后数据丢失 ); if (sendMessageRes.code == 0) { // 发送成功 } } "},"api/v2timmessagemanager/setc2creceivemessageopt.html":{"url":"api/v2timmessagemanager/setc2creceivemessageopt.html","title":"setC2CReceiveMessageOpt","summary":"设置用户消息接收选项√","keywords":"","body":"setC2CReceiveMessageOpt 功能介绍 设置用户消息接收选项 您可以通过参数 userIDList 设置一批用户，但一次最大允许设置 30 个用户 注意： 该接口调用频率被限制为 1 秒内最多调用 5 次。 参数详解 参数名称 参数类型 是否必填 描述 userIDList List 是 需要设置的用户id列表 opt ReceiveMsgOptEnum 是 用户消息接收选项属性 返回值 V2TimCallback { code : int desc : String } 返回值详解 名称 数值类型 描述 code int 请求结果错误码 desc String 请求结果描述 代码示例 //设置用户消息接收选项 // 设置在线和离线都不接收消息 V2TimCallback setC2CReceiveMessageOptRes = await TencentImSDKPlugin .v2TIMManager .getMessageManager() .setC2CReceiveMessageOpt( userIDList: ['user1', 'user2'], // 需要设置的用户id列表 opt: ReceiveMsgOptEnum.V2TIM_NOT_RECEIVE_MESSAGE); // 用户消息接收选项属性 if (setC2CReceiveMessageOptRes.code == 0) { //设置成功 } "},"api/v2timmessagemanager/getc2creceivemessageopt.html":{"url":"api/v2timmessagemanager/getc2creceivemessageopt.html","title":"getC2CReceiveMessageOpt","summary":"查询某个用户的 C2C 消息接收选项√","keywords":"","body":"getC2CReceiveMessageOpt 功能介绍 查询某个用户的 C2C 消息接收选项 注意：web不支持该接口 参数详解 参数名称 参数类型 是否必填 描述 userIDList List 是 需要查询的用户id列表 返回值 V2TimValueCallback> { code : int desc : String data : List } 返回值详解 名称 数值类型 描述 code int 请求结果错误码 desc String 请求结果描述 data ListV2TimReceiveMessageOptInfo > 查询到的消息接收选项列表 代码示例 // 查询某些用户的 C2C 消息接收选项 V2TimValueCallback> getC2CReceiveMessageOptRes = await TencentImSDKPlugin.v2TIMManager .getMessageManager() .getC2CReceiveMessageOpt(userIDList: ['user1', 'user2']); if (getC2CReceiveMessageOptRes.code == 0) { //查询成功 getC2CReceiveMessageOptRes.data?.forEach((element) { element.c2CReceiveMessageOpt; // 此用户的消息接收选项 element.userID; // 此用户的id }); } "},"api/v2timmessagemanager/setgroupreceivemessageopt.html":{"url":"api/v2timmessagemanager/setgroupreceivemessageopt.html","title":"setGroupReceiveMessageOpt","summary":"设置群组消息接收选项√","keywords":"","body":"setGroupReceiveMessageOpt 功能介绍 设置群组消息接收选项 参数详解 参数名称 参数类型 是否必填 描述 groupID String 是 需要设置的群组id opt ReceiveMsgOptEnum 是 群组消息接收选项属性 返回值 V2TimCallback { code : int desc : String } 返回值详解 名称 数值类型 描述 code int 请求结果错误码 desc String 请求结果描述 代码示例 //设置群组消息接收选项 // 设置在线和离线都不接收消息 V2TimCallback setGroupReceiveMessageOptRes = await TencentImSDKPlugin .v2TIMManager .getMessageManager() .setGroupReceiveMessageOpt( groupID: \"groupID\", // 需要设置的群组id opt: ReceiveMsgOptEnum.V2TIM_NOT_RECEIVE_MESSAGE); // 用户消息接收选项属性 if (setGroupReceiveMessageOptRes.code == 0) { //设置成功 } "},"api/v2timmessagemanager/getc2chistorymessagelist.html":{"url":"api/v2timmessagemanager/getc2chistorymessagelist.html","title":"getC2CHistoryMessageList","summary":"获取单聊历史消息√","keywords":"","body":"getC2CHistoryMessageList 功能介绍 获取单聊历史消息 在网络正常的情况下会拉取最新的云端数据。如果网络出现异常，SDK 会返回本地存储的历史消息。 本地存储的历史消息无时间显示，但云端存储的历史消息有存储时长的限制： 体验版：免费存储 7 天，不支持延长 专业版：免费存储 7 天，支持延长 旗舰版：免费存储 30 条，支持延长 参数详解 参数名称 参数类型 是否必填 描述 userID String 是 单聊用户id count int 是 拉取消息的个数，不宜太多，会影响消息拉取的速度，这里建议一次拉取 20 个。 lastMsgID String 否 获取消息的起始消息id，如果传 null，起始消息为会话的最新消息 返回值 V2TimValueCallback> { code : int desc : String data : List } 返回值详解 名称 数值类型 描述 code int 请求结果错误码 desc String 请求结果描述 data ListV2TimMessage > 获取的单聊历史消息 代码示例 // 拉取单聊历史消息 // 首次拉取，lastMsgID 设置为 null // 再次拉取时，lastMsgID 可以使用返回的消息列表中的最后一条消息的id V2TimValueCallback> getC2CHistoryMessageListRes = await TencentImSDKPlugin.v2TIMManager .getMessageManager() .getC2CHistoryMessageList( userID: \"userId\", // 单聊用户id count: 10, // 拉取数据数量 lastMsgID: null, // 拉取起始消息id ); if (getC2CHistoryMessageListRes.code == 0) { //拉取成功 } "},"api/v2timmessagemanager/getgrouphistorymessagelist.html":{"url":"api/v2timmessagemanager/getgrouphistorymessagelist.html","title":"getGroupHistoryMessageList","summary":"获取群组历史消息√","keywords":"","body":"getGroupHistoryMessageList 功能介绍 获取群组历史消息 在网络正常的情况下会拉取最新的云端数据。如果网络出现异常，SDK 会返回本地存储的历史消息。 直播群(AVChatRoom): 仅旗舰版支持，可在控制台开启[直播群新成员查看入群前消息量配置]，支持查看24小时内最多20条消息。 会议群（Meeting）和 社群（Community）默认开启拉取到进群前的历史消息。 好友工作群（Work）和 陌生人社交群（Public）需要前往控制台手动开启。 更多关于群消息的限制，详见 消息能力差异 本地存储的历史消息无时间显示，但云端存储的历史消息有存储时长的限制： 体验版：免费存储 7 天，不支持延长 专业版：免费存储 7 天，支持延长 旗舰版：免费存储 30 条，支持延长 参数详解 参数名称 参数类型 是否必填 描述 groupID String 是 群组id count int 是 拉取消息的个数，不宜太多，会影响消息拉取的速度，这里建议一次拉取 20 个。 lastMsgID String 否 获取消息的起始消息id，如果传 null，起始消息为会话的最新消息 返回值 V2TimValueCallback> { code : int desc : String data : List } 返回值详解 名称 数值类型 描述 code int 请求结果错误码 desc String 请求结果描述 data ListV2TimMessage > 获取的群组历史消息 代码示例 // 拉取单聊历史消息 // 首次拉取，lastMsgID 设置为 null // 再次拉取时，lastMsgID 可以使用返回的消息列表中的最后一条消息的id V2TimValueCallback> getGroupHistoryMessageListRes = await TencentImSDKPlugin.v2TIMManager .getMessageManager() .getGroupHistoryMessageList( groupID: \"groupID\", // 单聊用户id count: 10, // 拉取数据数量 lastMsgID: null, // 拉取起始消息id ); if (getGroupHistoryMessageListRes.code == 0) { //获取成功 } "},"api/v2timmessagemanager/gethistorymessagelist.html":{"url":"api/v2timmessagemanager/gethistorymessagelist.html","title":"getHistoryMessageList","summary":"获取历史消息高级接口√","keywords":"","body":"getHistoryMessageList 功能介绍 获取历史消息高级接口 该接口除了支持普通拉取单聊、群聊历史消息外，还支持以下高级特性： 支持设置拉取消息的位置：从本地拉取、从云端拉取。 支持按照指定的方向拉取：往消息时间更老的方向拉取、往消息时间更新的方向拉取。 支持拉取本地指定的消息类型：文本、图片、语音、视频、文件、表情、群 tips 消息、合并消息、自定义消息等。 注意： 如果设置为拉取云端消息，当 SDK 检测到没有网络，默认会直接返回本地数据 只有会议群（Meeting）才能拉取到进群前的历史消息，直播群（AVChatRoom）消息不存漫游和本地数据库，调用这个接口无效 web 端使用该接口，消息都是从远端拉取，不支持lastMsgSeq 参数详解 参数名称 参数类型 是否必填 描述 getType HistoryMessageGetType 否 拉取消息的位置及方向，可以设置拉取 本地/云端 的 更老/更新 的消息 userID String 否 拉取指定用户的单聊历史消息 groupID String 否 拉取指定群组的群聊历史消息 lastMsgSeq int 否 最后一条消息 seq，表示从哪条消息开始拉取历史消息 count int 是 单次拉取的消息数量 lastMsgID String 否 lastMsgID messageTypeList List 否 用于过滤历史信息属性，若为空则拉取所有属性信息。详情见MessageElemType 返回值 V2TimValueCallback> { code : int desc : String data : List } 返回值详解 名称 数值类型 描述 code int 请求结果错误码 desc String 请求结果描述 data ListV2TimMessage > 获取的历史消息 代码示例 // 拉取单聊历史消息 // 首次拉取，lastMsgID 设置为 null // 再次拉取时，lastMsgID 可以使用返回的消息列表中的最后一条消息的id V2TimValueCallback> getHistoryMessageListRes = await TencentImSDKPlugin.v2TIMManager .getMessageManager() .getHistoryMessageList( getType: HistoryMsgGetTypeEnum.V2TIM_GET_LOCAL_OLDER_MSG, // 拉取消息的位置及方向 userID: \"userID\", // 用户id 拉取单聊消息，需要指定对方的 userID，此时 groupID 传空即可。 groupID: \"groupID\", // 群组id 拉取群聊消息，需要指定群聊的 groupID，此时 userID 传空即可。 count: 10, // 拉取数据数量 lastMsgID: null, // 拉取起始消息id // 仅能在群聊中使用该字段。 // 设置 lastMsgSeq 作为拉取的起点，返回的消息列表中包含这条消息。 // 如果同时指定了 lastMsg 和 lastMsgSeq，SDK 优先使用 lastMsg。 // 如果均未指定 lastMsg 和 lastMsgSeq，拉取的起点取决于是否设置 getTimeBegin。设置了，则使用设置的范围作为起点；未设置，则使用最新消息作为起点。 lastMsgSeq: -1, messageTypeList: [], // 用于过滤历史信息属性，若为空则拉取所有属性信息。 ); if (getHistoryMessageListRes.code == 0) { //获取成功 } "},"api/v2timmessagemanager/appendmessage.html":{"url":"api/v2timmessagemanager/appendmessage.html","title":"appendMessage","summary":"添加多Element消息√","keywords":"","body":"appendMessage 功能介绍 添加多Element消息 为一个消息添加额外的消息，一般用于为图片消息添加text消息进行描述等场景。 只能在创建message的阶段进行appendMessage操作。 参数详解 参数名称 参数类型 是否必填 描述 createMessageBaseId String 是 需要添加Element的创建的消息id createMessageAppendId String 是 添加的创建消息id 返回值 V2TimValueCallback { code : int desc : String data : { cloudCustomData : String customElem : V2TimCustomElem elemType : int faceElem : V2TimFaceElem faceUrl : String fileElem : V2TimFileElem friendRemark : String groupAtUserList : List groupID : String groupTipsElem : V2TimGroupTipsElem id : String imageElem : V2TimImageElem isExcludedFromLastMessage : bool isExcludedFromUnreadCount : bool isPeerRead : bool isRead : bool isSelf : bool localCustomData : String localCustomInt : int locationElem : V2TimLocationElem mergerElem : V2TimMergerElem messageFromWeb : String msgID : String nameCard : String needReadReceipt : bool nickName : String offlinePushInfo : V2TimOfflinePushInfo priority : int progress : int random : int sender : String seq : String soundElem : V2TimSoundElem status : int textElem : V2TimTextElem timestamp : int userID : String videoElem : V2TimVideoElem } } 返回值详解 名称 数值类型 描述 code int 请求结果错误码 desc String 请求结果描述 data V2TimMessage 添加消息后的信息 代码示例 // 创建文本消息 V2TimValueCallback createTextMessageRes = await TencentImSDKPlugin.v2TIMManager .getMessageManager() .createTextMessage( text: \"test\", // 文本信息 ); // 创建append消息 V2TimValueCallback createAppendMessageRes = await TencentImSDKPlugin.v2TIMManager .getMessageManager() .createTextMessage( text: \"append\", // 添加的文本信息 ); if (createTextMessageRes.code == 0 && createAppendMessageRes.code == 0) { // 文本信息创建成功 String? id = createTextMessageRes.data?.id; String? appendId = createAppendMessageRes.data?.id; // 为第一个消息添加一个Text消息 V2TimValueCallback appendMessageRes = await TencentImSDKPlugin.v2TIMManager .getMessageManager() .appendMessage( createMessageBaseId: id!, createMessageAppendId: appendId!); if (appendMessageRes.code == 0) { // 发送文本消息 // 在sendMessage时，若只填写receiver则发个人用户单聊消息 // 若只填写groupID则发群组消息 // 若填写了receiver与groupID则发群内的个人用户，消息在群聊中显示，只有指定receiver能看见 V2TimValueCallback sendMessageRes = await TencentImSDKPlugin.v2TIMManager .getMessageManager() .sendMessage(id: id, receiver: \"userID\", groupID: \"groupID\");//注意此时的id为被添加的消息id if (sendMessageRes.code == 0) { // 发送成功 // append的Text消息在sendMessageRes.data.textElem.nextElem中 } } } "},"api/v2timmessagemanager/resendmessage.html":{"url":"api/v2timmessagemanager/resendmessage.html","title":"reSendMessage","summary":"消息重发√","keywords":"","body":"reSendMessage 功能介绍 消息重发 当环境网络环境较差或文件上传失败等原因会导致信息发送失败，此时需要调用消息重发的API。 具体消息发送失败的原因可见sendMessage返回的错误码。 当使用reSendMessage时，需要将原来发送的消息删除。 参数详解 参数名称 参数类型 是否必填 描述 msgID String 是 需要重发的消息id onlineUserOnly bool 否 是否是发送给在线用户 webMessageInstatnce Object 否（web端必填） web端消息的实例 返回值 V2TimValueCallback { code : int desc : String data : { cloudCustomData : String customElem : V2TimCustomElem elemType : int faceElem : V2TimFaceElem faceUrl : String fileElem : V2TimFileElem friendRemark : String groupAtUserList : List groupID : String groupTipsElem : V2TimGroupTipsElem id : String imageElem : V2TimImageElem isExcludedFromLastMessage : bool isExcludedFromUnreadCount : bool isPeerRead : bool isRead : bool isSelf : bool localCustomData : String localCustomInt : int locationElem : V2TimLocationElem mergerElem : V2TimMergerElem messageFromWeb : String msgID : String nameCard : String needReadReceipt : bool nickName : String offlinePushInfo : V2TimOfflinePushInfo priority : int progress : int random : int sender : String seq : String soundElem : V2TimSoundElem status : int textElem : V2TimTextElem timestamp : int userID : String videoElem : V2TimVideoElem } } 返回值详解 名称 数值类型 描述 code int 请求结果错误码 desc String 请求结果描述 data V2TimMessage 重发后的消息 代码示例 // 创建文本消息 V2TimValueCallback createTextMessageRes = await TencentImSDKPlugin.v2TIMManager .getMessageManager() .createTextMessage( text: \"test\", // 文本信息 ); if (createTextMessageRes.code == 0) { // 文本信息创建成功 String? id = createTextMessageRes.data?.id; // 发送文本消息 // 在sendMessage时，若只填写receiver则发个人用户单聊消息 // 若只填写groupID则发群组消息 // 若填写了receiver与groupID则发群内的个人用户，消息在群聊中显示，只有指定receiver能看见 V2TimValueCallback sendMessageRes = await TencentImSDKPlugin .v2TIMManager .getMessageManager() .sendMessage(id: id!, receiver: \"userID\", groupID: \"groupID\"); if (sendMessageRes.code == 0) { // 发送成功 } else { V2TimValueCallback reSendMessageRes = await TencentImSDKPlugin.v2TIMManager .getMessageManager() .reSendMessage( msgID: id, // 需要重发的消息id onlineUserOnly: false, // 是否是发送给在线用户 webMessageInstatnce: \"\"); //web端消息的实例); if (reSendMessageRes.code == 0) { // 重发成功 } } } "},"api/v2timmessagemanager/sendreplymessage.html":{"url":"api/v2timmessagemanager/sendreplymessage.html","title":"sendReplyMessage","summary":"发送回复消息√","keywords":"","body":"sendReplyMessage 功能介绍 发送回复消息 参数详解 参数 参数类型 是否必填 含义 id String 是 发送的回复消息的id receiver String 是 单聊消息接收者 userID groupID String 是 群聊 groupID replyMessage V2TimMessage 是 被回复的消息 priority MessagePriorityEnum 否 消息优先级 onlineUserOnly bool 否 是否只有在线用户才能收到 needReadReceipt bool 否 消息是否需要已读回执 offlinePushInfo OfflinePushInfo 否 离线推送信息 isExcludedFromUnreadCount bool 否 发送消息是否计入会话未读数 localCustomData String 否 消息本地数据 返回值 V2TimValueCallback { code : int desc : String data : { cloudCustomData : String customElem : V2TimCustomElem elemType : int faceElem : V2TimFaceElem faceUrl : String fileElem : V2TimFileElem friendRemark : String groupAtUserList : List groupID : String groupTipsElem : V2TimGroupTipsElem id : String imageElem : V2TimImageElem isExcludedFromLastMessage : bool isExcludedFromUnreadCount : bool isPeerRead : bool isRead : bool isSelf : bool localCustomData : String localCustomInt : int locationElem : V2TimLocationElem mergerElem : V2TimMergerElem messageFromWeb : String msgID : String nameCard : String needReadReceipt : bool nickName : String offlinePushInfo : V2TimOfflinePushInfo priority : int progress : int random : int sender : String seq : String soundElem : V2TimSoundElem status : int textElem : V2TimTextElem timestamp : int userID : String videoElem : V2TimVideoElem } } 返回值详解 名称 数值类型 描述 code int 请求结果错误码 desc String 请求结果描述 data V2TimMessage 创建的回复信息 代码示例 // 创建文本消息 V2TimValueCallback createTextMessageRes = await TencentImSDKPlugin.v2TIMManager .getMessageManager() .createTextMessage( text: \"test\", // 回复消息的文本信息 ); //查询消息 V2TimValueCallback> findMessageRes = await TencentImSDKPlugin.v2TIMManager .getMessageManager() .findMessages(messageIDList: []); //需要查询的消息id if (createTextMessageRes.code == 0) { // 文本信息创建成功 String? id = createTextMessageRes.data?.id; // 发送文本消息 // 在sendMessage时，若只填写receiver则发个人用户单聊消息 // 若只填写groupID则发群组消息 // 若填写了receiver与groupID则发群内的个人用户，消息在群聊中显示，只有指定receiver能看见 V2TimValueCallback sendMessageRes = await TencentImSDKPlugin .v2TIMManager .getMessageManager() .sendReplyMessage( id: id!, // 发送的回复消息的id receiver: \"userID\", // 接收人id groupID: \"groupID\", // 接收群组id replyMessage: findMessageRes.data![0], // 被回复的消息 类型为V2TimMessage priority: MessagePriorityEnum.V2TIM_PRIORITY_DEFAULT, // 消息优先级 onlineUserOnly: false, // 是否只有在线用户才能收到，如果设置为 true ，接收方历史消息拉取不到，常被用于实现“对方正在输入”或群组里的非重要提示等弱提示功能，该字段不支持 AVChatRoom。 isExcludedFromUnreadCount: false, // 发送消息是否计入会话未读数 needReadReceipt: false, // 消息是否需要已读回执（只有 Group 消息有效，6.1 及以上版本支持，需要您购买旗舰版套餐） offlinePushInfo: OfflinePushInfo(), // 离线推送时携带的标题和内容 localCustomData: \"\" // 消息本地数据，消息附带的额外的数据，存本地，消息的接受者不可以访问到，App 卸载后数据丢失 ); if (sendMessageRes.code == 0) { // 发送成功 } } "},"api/v2timmessagemanager/revokemessage.html":{"url":"api/v2timmessagemanager/revokemessage.html","title":"revokeMessage","summary":"撤回消息√","keywords":"","body":"revokeMessage 功能介绍 撤回消息 默认情况下，发送者只能撤回2分钟以内的消息，您可以按需更改消息撤回时间限制，具体操作请参见 消息撤回设置。 消息的撤回同时需要接收方 UI 代码的配合：当发送方撤回一条消息后，接收方会收到消息撤回通知 onRecvMessageRevoked。通知中包含了撤回消息的 msgID，您可以根据这个 msgID 判断 UI 层是哪一条消息撤回了，然后把对应的消息气泡切换成 \"消息已被撤回\" 状态。 仅支持单聊和群组中发送的普通消息，无法撤销 onlineUserOnly 为 true 即仅在线用户才能收到的消息，也无法撤销直播群（AVChatRoom）中的消息。 web 端掉用 webMessageInstatnce 且为必传 参数详解 参数名称 参数类型 是否必填 描述 msgID String 是 需要撤回的消息id webMessageInstatnce Object 否 （web端必填） 需要撤回的web端消息实例 返回值 V2TimCallback { code : int desc : String } 返回值详解 名称 数值类型 描述 code int 请求结果错误码 desc String 请求结果描述 代码示例 // 撤回消息 V2TimCallback revokeMessageRes = await TencentImSDKPlugin.v2TIMManager.getMessageManager().revokeMessage( msgID: \"msgID\", // 需要撤回的消息id webMessageInstatnce: \"webMessageInstatnce\", // 需要撤回的web端消息实例 ); if (revokeMessageRes.code == 0) { //撤回成功 } "},"api/v2timmessagemanager/modifymessage.html":{"url":"api/v2timmessagemanager/modifymessage.html","title":"modifyMessage","summary":"消息变更 4.0.1及以后版本支持√","keywords":"","body":"modifyMessage 功能介绍 消息变更 4.0.1及以后版本支持 会话里面已经发送成功的消息，会话内任意成员可以针对消息做二次修改。消息修改成功后会通过OnRecvMessageModified同步给会话的全部成员。 修改消息时，IM SDK 仅限制了会话参与者才能修改，如果您需要更多限制，比如限制只有消息发送者才能修改，可以自行在业务层处理。 注意： 目前消息支持修改的信息如下： localCustomData localCustomInt cloudCustomData V2TIMTextElem V2TIMCustomElem 参数详解 参数名称 参数类型 是否必填 描述 message V2TimMessage 是 需要修改的消息 返回值 V2TimValueCallback { code : int desc : String data : { code : int desc : String message : V2TimMessage } } 返回值详解 名称 数值类型 描述 code int 请求结果错误码 desc String 请求结果描述 data V2TimMessageChangeInfo 修改后的信息 代码示例 // 通过消息id查找到需要修改的消息 V2TimValueCallback> msgListRes = await TencentImSDKPlugin .v2TIMManager .getMessageManager() .findMessages(messageIDList: ['msgid']); // 查找需要修改消息的id // 编辑消息 if (msgListRes.code == 0) { List? messageList = msgListRes.data; if (messageList!.isNotEmpty) { V2TimMessage originMessage = messageList[0]; originMessage.cloudCustomData = \"change data\"; // 修改消息的信息 V2TimValueCallback modifyMessageRes = await TencentImSDKPlugin.v2TIMManager .getMessageManager() .modifyMessage(message: originMessage); if (modifyMessageRes.code == 0) { if (modifyMessageRes.data?.code == 0) { // 修改成功 } } } } "},"api/v2timmessagemanager/markc2cmessageasread.html":{"url":"api/v2timmessagemanager/markc2cmessageasread.html","title":"markC2CMessageAsRead","summary":"设置单聊消息已读√","keywords":"","body":"markC2CMessageAsRead 功能介绍 设置单聊消息已读 对端会收到 onRecvC2CReadReceipt 回调，回调里面会携带清空会话未读数的时间戳。 参数详解 参数名称 参数类型 是否必填 描述 userID String 是 需要设置消息已读的用户id 返回值 V2TimCallback { code : int desc : String } 返回值详解 名称 数值类型 描述 code int 请求结果错误码 desc String 请求结果描述 代码示例 // 设置单聊消息已读 V2TimCallback markC2CMessageAsReadRes = await TencentImSDKPlugin .v2TIMManager .getMessageManager() .markC2CMessageAsRead(userID: \"userID\"); // 需要设置消息已读的用户id if (markC2CMessageAsReadRes.code == 0) { // 标记成功 } "},"api/v2timmessagemanager/markgroupmessageasread.html":{"url":"api/v2timmessagemanager/markgroupmessageasread.html","title":"markGroupMessageAsRead","summary":"设置群组消息已读√","keywords":"","body":"markGroupMessageAsRead 功能介绍 设置群组消息已读 调用次API后会收到 onConversationChanged 回调，可以在此回调中更新 UI。 参数详解 参数名称 参数类型 是否必填 描述 groupID String 是 需要设置消息已读的群组id 返回值 V2TimCallback { code : int desc : String } 返回值详解 名称 数值类型 描述 code int 请求结果错误码 desc String 请求结果描述 代码示例 // 设置单聊消息已读 V2TimCallback markGroupMessageAsReadRes = await TencentImSDKPlugin.v2TIMManager .getMessageManager() .markGroupMessageAsRead(groupID: \"groupID\");// 需要设置消息已读的群组id if(markGroupMessageAsReadRes.code==0){ // 标记成功 } "},"api/v2timmessagemanager/markallmessageasread.html":{"url":"api/v2timmessagemanager/markallmessageasread.html","title":"markAllMessageAsRead","summary":"标记所有消息为已读√","keywords":"","body":"markAllMessageAsRead 功能介绍 标记所有消息为已读 调用次API后会收到 onConversationChanged 回调，可以在此回调中更新 UI。 参数详解 此API无参数。 返回值 V2TimCallback { code : int desc : String } 返回值详解 名称 数值类型 描述 code int 请求结果错误码 desc String 请求结果描述 代码示例 // 标记所有消息为已读 V2TimCallback markAllMessageAsReadRes = await TencentImSDKPlugin .v2TIMManager .getMessageManager() .markAllMessageAsRead(); if (markAllMessageAsReadRes.code == 0) { // 标记成功 } "},"api/v2timmessagemanager/deletemessagefromlocalstorage.html":{"url":"api/v2timmessagemanager/deletemessagefromlocalstorage.html","title":"deleteMessageFromLocalStorage","summary":"删除本地消息√","keywords":"","body":"deleteMessageFromLocalStorage 功能介绍 删除本地消息 注意： 该接口只能删除本地历史，消息删除后，SDK 会在本地把这条消息标记为已删除状态，调用 getHistoryMessageList 不能再拉取到。 如果程序卸载重装，本地会失去对这条消息的删除标记，调用 getHistoryMessageList 还能再拉取到该条消息。 web不支持该接口 参数详解 参数名称 参数类型 是否必填 描述 msgID String 是 需要删除的消息id 返回值 V2TimCallback { code : int desc : String } 返回值详解 名称 数值类型 描述 code int 请求结果错误码 desc String 请求结果描述 代码示例 // 删除本地消息 V2TimCallback deleteMessageFromLocalStorageRes = await TencentImSDKPlugin .v2TIMManager .getMessageManager() .deleteMessageFromLocalStorage(msgID: \"\"); // 需要删除的消息id if (deleteMessageFromLocalStorageRes.code == 0) { //删除成功 } "},"api/v2timmessagemanager/deletemessages.html":{"url":"api/v2timmessagemanager/deletemessages.html","title":"deleteMessages","summary":"删除本地及漫游消息√","keywords":"","body":"deleteMessages 功能介绍 删除本地及漫游消息 注意： 该接口会在删除本地消息的基础上，同步删除云端存储的消息，且无法恢复。 每次调用，最多只能删除 30 条消息。 每次调用，待删除的消息必须属于同一会话。 1 秒钟最多只能调用 1 次该接口。 如果一个账号在某设备上拉取过这些消息，那么调用该接口删除云端消息后，这些消息仍然会保存在该设备上，即删除消息不支持多端同步。 参数详解 参数名称 参数类型 是否必填 描述 msgIDs List 是 需要删除的消息id列表 webMessageInstanceList List 否 需要删除的web端消息实例列表 返回值 V2TimCallback { code : int desc : String } 返回值详解 名称 数值类型 描述 code int 请求结果错误码 desc String 请求结果描述 代码示例 // 删除本地及漫游消息 V2TimCallback deleteMessagesRes = await TencentImSDKPlugin.v2TIMManager .getMessageManager() .deleteMessages(msgIDs: ['messageid'], // 需要删除的消息id webMessageInstanceList: [] // 需要删除的web端消息实例列表 ); if (deleteMessagesRes.code == 0) { //删除成功 } "},"api/v2timmessagemanager/clearc2chistorymessage.html":{"url":"api/v2timmessagemanager/clearc2chistorymessage.html","title":"clearC2CHistoryMessage","summary":"清空单聊本地及云端的消息（不删除会话）√","keywords":"","body":"clearC2CHistoryMessage 功能介绍 清空单聊本地及云端的消息（不删除会话） 注意： 会话内的消息在本地删除的同时，在服务器也会同步删除。 web不支持该接口 参数详解 参数名称 参数类型 是否必填 描述 userID String 是 需要删除的用户id 返回值 V2TimCallback { code : int desc : String } 返回值详解 名称 数值类型 描述 code int 请求结果错误码 desc String 请求结果描述 代码示例 //清空单聊本地及云端的消息（不删除会话） V2TimCallback clearC2CHistoryMessageRes = await TencentImSDKPlugin .v2TIMManager .getMessageManager() .clearC2CHistoryMessage(userID: \"userID\"); // 需要清空记录的用户id if (clearC2CHistoryMessageRes.code == 0) { //清除成功 } "},"api/v2timmessagemanager/cleargrouphistorymessage.html":{"url":"api/v2timmessagemanager/cleargrouphistorymessage.html","title":"clearGroupHistoryMessage","summary":"清空群聊本地及云端的消息（不删除会话）√","keywords":"","body":"clearGroupHistoryMessage 功能介绍 清空群聊本地及云端的消息（不删除会话） 注意： 会话内的消息在本地删除的同时，在服务器也会同步删除。 web不支持该接口 参数详解 参数名称 参数类型 是否必填 描述 groupID String 是 需要删除的群组id 返回值 V2TimCallback { code : int desc : String } 返回值详解 名称 数值类型 描述 code int 请求结果错误码 desc String 请求结果描述 代码示例 // 清空群聊本地及云端的消息（不删除会话） V2TimCallback clearGroupHistoryMessageRes = await TencentImSDKPlugin .v2TIMManager .getMessageManager() .clearGroupHistoryMessage(groupID: \"groupID\"); // 需要清空记录的群组id if (clearGroupHistoryMessageRes.code == 0) { //清除成功 } "},"api/v2timmessagemanager/insertc2cmessagetolocalstorage.html":{"url":"api/v2timmessagemanager/insertc2cmessagetolocalstorage.html","title":"insertC2CMessageToLocalStorage","summary":"向C2C消息列表中添加一条消息√","keywords":"","body":"insertC2CMessageToLocalStorage 功能介绍 向C2C消息列表中添加一条消息 只能插入文本消息，参数data为本文内容 该接口主要用于满足向C2C聊天会话中插入一些提示性消息的需求，比如“您已成功发送消息”，这类消息有展示 在聊天消息区的需求，但并没有发送给其他人的必要。 insertC2CMessageToLocalStorage() 相当于一个被禁用了网络发送能力的 sendMessage() 接口。 通过该接口 insert 的消息只存本地，程序卸载后会丢失。 注意： web不支持该接口 参数详解 参数名称 参数类型 是否必填 描述 data String 是 文本消息内容 userID String 是 发送对象id sender String 是 发送者id 返回值 V2TimValueCallback { code : int desc : String data : { cloudCustomData : String customElem : V2TimCustomElem elemType : int faceElem : V2TimFaceElem faceUrl : String fileElem : V2TimFileElem friendRemark : String groupAtUserList : List groupID : String groupTipsElem : V2TimGroupTipsElem id : String imageElem : V2TimImageElem isExcludedFromLastMessage : bool isExcludedFromUnreadCount : bool isPeerRead : bool isRead : bool isSelf : bool localCustomData : String localCustomInt : int locationElem : V2TimLocationElem mergerElem : V2TimMergerElem messageFromWeb : String msgID : String nameCard : String needReadReceipt : bool nickName : String offlinePushInfo : V2TimOfflinePushInfo priority : int progress : int random : int sender : String seq : String soundElem : V2TimSoundElem status : int textElem : V2TimTextElem timestamp : int userID : String videoElem : V2TimVideoElem } } 返回值详解 名称 数值类型 描述 code int 请求结果错误码 desc String 请求结果描述 data V2TimMsgCreateInfoResult 创建后的Text信息 代码示例 // 向C2C消息列表中添加一条消息 V2TimValueCallback insertC2CMessageToLocalStorageRes = await TencentImSDKPlugin.v2TIMManager .getMessageManager() .insertC2CMessageToLocalStorage( data: \"data\", // 文本消息内容 userID: \"userID\", // 接受信息用户id sender: \"sender\" // 发送者id ); if (insertC2CMessageToLocalStorageRes.code == 0) { //添加成功 } "},"api/v2timmessagemanager/insertgroupmessagetolocalstorage.html":{"url":"api/v2timmessagemanager/insertgroupmessagetolocalstorage.html","title":"insertGroupMessageToLocalStorage","summary":"向群组消息列表中添加一条消息√","keywords":"","body":"insertGroupMessageToLocalStorage 功能介绍 向群组消息列表中添加一条消息 只能插入文本消息，参数data为本文内容 该接口主要用于满足向群组聊天会话中插入一些提示性消息的需求，比如“您已经退出该群”，这类消息有展示 在聊天消息区的需求，但并没有发送给其他人的必要。 insertGroupMessageToLocalStorage() 相当于一个被禁用了网络发送能力的 sendMessage() 接口。 通过该接口 insert 的消息只存本地，程序卸载后会丢失。 注意： web不支持该接口 参数详解 参数名称 参数类型 是否必填 描述 data String 是 文本消息内容 groupID String 是 接受群组id sender String 是 发送者id 返回值 V2TimValueCallback { code : int desc : String data : { cloudCustomData : String customElem : V2TimCustomElem elemType : int faceElem : V2TimFaceElem faceUrl : String fileElem : V2TimFileElem friendRemark : String groupAtUserList : List groupID : String groupTipsElem : V2TimGroupTipsElem id : String imageElem : V2TimImageElem isExcludedFromLastMessage : bool isExcludedFromUnreadCount : bool isPeerRead : bool isRead : bool isSelf : bool localCustomData : String localCustomInt : int locationElem : V2TimLocationElem mergerElem : V2TimMergerElem messageFromWeb : String msgID : String nameCard : String needReadReceipt : bool nickName : String offlinePushInfo : V2TimOfflinePushInfo priority : int progress : int random : int sender : String seq : String soundElem : V2TimSoundElem status : int textElem : V2TimTextElem timestamp : int userID : String videoElem : V2TimVideoElem } } 返回值详解 名称 数值类型 描述 code int 请求结果错误码 desc String 请求结果描述 data V2TimMsgCreateInfoResult 创建后的Text信息 代码示例 // 向群组消息列表中添加一条消息 V2TimValueCallback insertGroupMessageToLocalStorageRes = await TencentImSDKPlugin.v2TIMManager .getMessageManager() .insertGroupMessageToLocalStorage( data: \"data\", // 文本消息内容 groupID: \"groupID\", // 接收群组id sender: \"sender\" // 发送者id ); if (insertGroupMessageToLocalStorageRes.code == 0) { //添加成功 } "},"api/v2timmessagemanager/searchlocalmessages.html":{"url":"api/v2timmessagemanager/searchlocalmessages.html","title":"searchLocalMessages","summary":"搜索本地消息√","keywords":"","body":"searchLocalMessages 功能介绍 搜索本地消息 注意： web不支持该接口 参数详解 参数名称 参数类型 是否必填 描述 searchParam V2TimMessageSearchParam 是 搜索设置参数 返回值 V2TimValueCallback { code : int desc : String data : { messageSearchResultItems : List// 符合搜索条件的消息列表 totalCount : int // 符合搜索条件的消息数量 } } 返回值详解 名称 数值类型 描述 code int 请求结果错误码 desc String 请求结果描述 data V2TimMessageSearchResult 符合搜索条件的所有信息 代码示例 // 创建消息搜索设置参数 V2TimMessageSearchParam searchParam = new V2TimMessageSearchParam( conversationID: \"\",// conversationID == null，代表搜索全部会话，conversationID != null，代表搜索指定会话。 keywordList: [],// 关键字列表，最多支持5个。当消息发送者以及消息类型均未指定时，关键字列表必须非空；否则，关键字列表可以为空。 type: 0,// 获取历史消息类型 userIDList: [],// 指定 userID 发送的消息，最多支持5个。 messageTypeList: [],// 消息类型过滤列表 searchTimePeriod: 0,// 从起始时间点开始的过去时间范围，单位秒。默认为0即代表不限制时间范围，传24x60x60代表过去一天。 searchTimePosition: 0,// 搜索的起始时间点。默认为0即代表从现在开始搜索。UTC 时间戳，单位：秒 pageIndex: 0,// 分页的页号：用于分页展示查找结果，从零开始起步。 pageSize: 10);// 每页结果数量：用于分页展示查找结果，如不希望分页可将其设置成 0，但如果结果太多，可能会带来性能问题。默认为100。 // 搜索历史信息 V2TimValueCallback searchLocalMessagesRes = await TencentImSDKPlugin .v2TIMManager .getMessageManager() .searchLocalMessages( searchParam:searchParam ); if(searchLocalMessagesRes.code == 0){ // 搜索成功 } "},"api/v2timmessagemanager/sendmessagereadreceipts.html":{"url":"api/v2timmessagemanager/sendmessagereadreceipts.html","title":"sendMessageReadReceipts","summary":"发送消息已读回执√","keywords":"","body":"sendMessageReadReceipts 功能介绍 发送消息已读回执 该功能需要购买旗舰版套餐包，购买 旗舰版套餐包 后可使用。 注意： 3.9.3及以上版本支持 该接口暂时只支持 Group 消息。 messageIDList 里的消息Id必须在同一个 Group 会话中。 该接口调用成功后，会话未读数不会变化，消息发送者会收到 onRecvMessageReadReceipts 回调，回调里面会携带消息的最新已读信息。 web不支持该接口 参数详解 参数名称 参数类型 是否必填 描述 messageIDList List 是 需要确认已读的消息id列表 返回值 V2TimCallback { code : int desc : String } 返回值详解 名称 数值类型 描述 code int 请求结果错误码 desc String 请求结果描述 代码示例 // 用户首先需要创建一条信息 V2TimValueCallback createCustomMessageRes = await TencentImSDKPlugin.v2TIMManager .getMessageManager() .createCustomMessage( data: '正在输入中', ); // 发送消息时，需要把needReadReceipt设置为true TencentImSDKPlugin.v2TIMManager.getMessageManager().sendMessage( id: createCustomMessageRes.data!.id!, receiver: \"\", groupID: \"groupID\", onlineUserOnly: true, needReadReceipt: true); // 消息需要已读回执设置 // 通过消息id确认消息已读 // 接收端发送消息已读回执后，发送端可以通过 V2TimAdvancedMsgListener 的 onRecvMessageReadReceipts 回调监听消息已读回执通知 V2TimCallback sendMessageReadReceipts = await TencentImSDKPlugin .v2TIMManager .getMessageManager() .sendMessageReadReceipts( messageIDList: [createCustomMessageRes.data!.id!]); // 需要确认已读的消息id if (sendMessageReadReceipts.code == 0) { // 成功 } else { // 失败 } "},"api/v2timmessagemanager/getmessagereadreceipts.html":{"url":"api/v2timmessagemanager/getmessagereadreceipts.html","title":"getMessageReadReceipts","summary":"获取消息已读回执√","keywords":"","body":"getMessageReadReceipts 功能介绍 获取消息已读回执 该功能需要购买旗舰版套餐包，购买 旗舰版套餐包 后可使用。 注意： 3.9.3及以上版本支持 该接口暂时只支持 Group 消息。 messageIDList 里的消息Id必须在同一个 Group 会话中。 参数详解 参数名称 参数类型 是否必填 描述 messageIDList List 是 需要查询已读回执消息的id列表 返回值 V2TimValueCallback> { code : int desc : String data : List } 返回值详解 名称 数值类型 描述 code int 请求结果错误码 desc String 请求结果描述 data ListV2TimMessageReceipt > 消息已读回执信息列表 代码示例 // 查询消息已读回执 V2TimValueCallback> getMessageReadReceipts = await TencentImSDKPlugin.v2TIMManager .getMessageManager() .getMessageReadReceipts(messageIDList: []);// 需要查询的的消息id列表 if (getMessageReadReceipts.code == 0) { getMessageReadReceipts.data.forEach((element) { // 解析群消息已读回执 element.groupID;// 消息的群组id element.msgID;// 消息的id element.readCount;// 群消息已读人数 element.timestamp; element.unreadCount;// 群消息未读人数 element.userID;// 发送此消息的用户id }); } "},"api/v2timmessagemanager/getgroupmessagereadmemberlist.html":{"url":"api/v2timmessagemanager/getgroupmessagereadmemberlist.html","title":"getGroupMessageReadMemberList","summary":"获取群消息已读或未读群成员列表√","keywords":"","body":"getGroupMessageReadMemberList 功能介绍 获取群消息已读或未读群成员列表 该功能需要购买旗舰版套餐包，购买 旗舰版套餐包 后可使用。 需要到控制台开启，且只支持Work、Public、Meeting群组。且不支持群定向消息。 3.9.3及以上版本支持 参数详解 参数名称 参数类型 是否必填 描述 messageID String 是 需要查询的消息的id filter GetGroupMessageReadMemberListFilter 是 已读或未读的类型 nextSeq int 否 分页拉取标志 count int 否 拉取数量 返回值 V2TimValueCallback { code : int desc : String data : { isFinished : bool memberInfoList : V2TimGroupMemberInfo nextSeq : int } } 返回值详解 名称 数值类型 描述 code int 请求结果错误码 desc String 请求结果描述 data V2TimGroupMessageReadMemberList 群消息已读或未读群成员列表 代码示例 // 先创建消息 V2TimValueCallback target = await TencentImSDKPlugin.v2TIMManager .getMessageManager() .createTextMessage(text: \"test\"); String? groupTargetdId = target.data?.id; V2TimValueCallback sendMessageRes = await TencentImSDKPlugin.v2TIMManager.getMessageManager().sendMessage( id: groupTargetdId!, receiver: \"\", needReadReceipt: true, groupID: \"\"); // 查询消息已读回执 V2TimValueCallback> getMessageReadReceipts = await TencentImSDKPlugin.v2TIMManager .getMessageManager() .getMessageReadReceipts( messageIDList: [sendMessageRes.data!.msgID!]); // 需要查询的的消息id列表 if (getMessageReadReceipts.code == 0) { getMessageReadReceipts.data?.forEach((element) { // 解析群消息已读回执 element.groupID; // 消息的群组id element.msgID; // 消息的id element.readCount; // 群消息已读人数 element.timestamp; element.unreadCount; // 群消息未读人数 element.userID; // 发送此消息的用户id }); } //需要先调用查询消息已读回执 才能 获取群消息已读或未读群成员列表 V2TimValueCallback getGroupMessageReadMemberList = await TencentImSDKPlugin.v2TIMManager .getMessageManager() .getGroupMessageReadMemberList( nextSeq: 0, // 分页拉取标志，第一次填0，回调成功时若不为0则需要分页，再次传入拉去直到为0 count: 100, // 拉取数量 messageID: sendMessageRes.data!.msgID!, // 查询的消息id filter: GetGroupMessageReadMemberListFilter .V2TIM_GROUP_MESSAGE_READ_MEMBERS_FILTER_UNREAD, // 已读或未读的类型 ); if (getGroupMessageReadMemberList.code == 0) { // 获取群消息已读未读群成员列表 getGroupMessageReadMemberList.data?.isFinished; // 是否拉去完 getGroupMessageReadMemberList.data?.memberInfoList; // 已读或未读的成员列表 getGroupMessageReadMemberList.data?.nextSeq; // 分页拉取的 seq 如果为 0 表示拉取结束 } "},"api/v2timmessagemanager/setlocalcustomdata.html":{"url":"api/v2timmessagemanager/setlocalcustomdata.html","title":"setLocalCustomData","summary":"设置消息自定义数据√","keywords":"","body":"setLocalCustomData 功能介绍 设置消息自定义数据 本地保存，不会发送到对端，程序卸载重装后失效 注意： web不支持该接口 参数详解 参数名称 参数类型 是否必填 描述 msgID String 是 需要设置的消息id localCustomData String 是 需要设置的自定义属性 返回值 V2TimCallback { code : int desc : String } 返回值详解 名称 数值类型 描述 code int 请求结果错误码 desc String 请求结果描述 代码示例 // 设置消息自定义数据 // 设置之后此消息会多出一个localCustomData属性，用户可以读取此属性来获取设置的自定义属性 V2TimCallback setLocalCustomDataRes = await TencentImSDKPlugin.v2TIMManager .getMessageManager() .setLocalCustomData( msgID: \"msgID\", // 需要设置的消息id messageId为消息发送后服务端创建的messageid，不是创建消息时的消息id localCustomData: \"localCustomData\"); // 需要设置的自定义属性 if (setLocalCustomDataRes.code == 0) { //设置成功 } "},"api/v2timmessagemanager/setlocalcustomint.html":{"url":"api/v2timmessagemanager/setlocalcustomint.html","title":"setLocalCustomInt","summary":"设置消息自定义数据√","keywords":"","body":"setLocalCustomInt 功能介绍 设置消息自定义数据 本地保存，不会发送到对端，程序卸载重装后失效 注意： web不支持该接口 参数详解 参数名称 参数类型 是否必填 描述 msgID String 是 需要设置的消息id localCustomInt int 是 需要设置的自定义属性 返回值 V2TimCallback { code : int desc : String } 返回值详解 名称 数值类型 描述 code int 请求结果错误码 desc String 请求结果描述 代码示例 // 设置消息自定义数据 // 设置之后此消息会多出一个localCustomInt属性，用户可以读取此属性来获取设置的自定义属性 V2TimCallback setLocalCustomIntRes = await TencentImSDKPlugin.v2TIMManager .getMessageManager() .setLocalCustomInt( msgID: \"msgID\", // 需要设置的消息id messageId为消息发送后服务端创建的messageid，不是创建消息时的消息id localCustomInt: 0); // 需要设置的自定义属性 if (setLocalCustomIntRes.code == 0) { //设置成功 } "},"api/v2timgroupmanager/":{"url":"api/v2timgroupmanager/","title":"V2TIMGroupManager","summary":"群组高级接口，包含了群组的高级功能，例如群成员邀请、非群成员申请进群等操作接口。","keywords":"","body":"V2TIMGroupManager V2TIMGroupManager功能介绍 群组高级接口，包含了群组的高级功能，例如群成员邀请、非群成员申请进群等操作接口。 API目录 API 描述 createGroup 创建自定义群组 getJoinedGroupList 获取当前用户已经加入的群列表 getGroupsInfo 拉取群资料 searchGroups 搜索群资料 setGroupInfo 修改群资料 initGroupAttributes 初始化群属性 setGroupAttributes 设置群属性 deleteGroupAttributes 删除指定群属性 getGroupAttributes 获取指定群属性 getGroupOnlineMemberCount 获取指定群在线人数 getGroupMemberList 获取群成员列表 getGroupMembersInfo 获取指定的群成员资料 searchGroupMembers 搜索群成员 setGroupMemberInfo 修改指定的群成员资料 muteGroupMember 禁言（只有管理员或群主能够调用） inviteUserToGroup 邀请他人入群 kickGroupMember 踢人 setGroupMemberRole 设置群成员的角色 transferGroupOwner 转让群主 getGroupApplicationList 获取加群的申请列表 acceptGroupApplication 同意某一条加群申请 refuseGroupApplication 拒绝某一条加群申请 setGroupApplicationRead 标记申请列表为已读 getJoinedCommunityList 获取当前用户已经加入的支持话题的社群列表 createTopicInCommunity 创建话题 deleteTopicFromCommunity 删除话题 setTopicInfo 设置话题属性 getTopicInfoList 获取话题列表 "},"api/v2timgroupmanager/creategroup.html":{"url":"api/v2timgroupmanager/creategroup.html","title":"createGroup","summary":"创建自定义群组√","keywords":"","body":"createGroup 功能介绍 创建自定义群组 注意： 不支持在同一个 SDKAppID 下创建两个相同 groupID 的群 memberList 指定初始的群成员（直播群 AVChatRoom 不支持指定初始群成员，memberList 请传 null） 社群（Community）功能仅 SDK 4.0.0 增强版及以上版本、Web SDK 2.17.0 及以上版本支持，您需 购买旗舰版套餐包 并 申请开通 后方可使用。 专业版或旗舰版 SDKAppID 下，所有群类型日净增群组数上限为 1 万个。免费峰值群组数为 10 万个/月，超出免费量将产生 套餐外超量费用。 参数详解 参数名称 参数类型 是否必填 描述 groupID String 否 自定义群组 ID groupType GroupType 是 群类型 groupName String 是 群名称，不能为 null。 notification String 否 群公告 introduction String 否 群介绍 faceUrl String 否 群头像Url isAllMuted bool 否 是否全体禁言 addOpt GroupAddOptTypeEnum 否 加群选项 memberList ListV2TimGroupMember > 否 初始成员列表 isSupportTopic bool 否 是否支持话题 返回值 V2TimValueCallback { code : int desc : String data : String // 创建的群组id } 返回值详解 名称 数值类型 描述 code int 请求结果错误码 desc String 请求结果描述 data String 创建的群组id 代码示例 // 创建群组 V2TimValueCallback createGroupRes = await TencentImSDKPlugin.v2TIMManager.getGroupManager().createGroup( groupType: \"Public\",// 群类型 groupName: \"groupName\",// 群名称，不能为 null。 notification: \"\",// 群公告 introduction: \"\",// 群介绍 faceUrl: \"\",// 群头像Url isAllMuted: false,// 是否全体禁言 isSupportTopic: false,// 是否支持话题 addOpt: GroupAddOptTypeEnum.V2TIM_GROUP_ADD_AUTH,// 添加群设置 memberList: [],// 初始成员列表 ); if (createGroupRes.code == 0) { // 创建成功 createGroupRes.data;// 创建的群号 } "},"api/v2timgroupmanager/getjoinedgrouplist.html":{"url":"api/v2timgroupmanager/getjoinedgrouplist.html","title":"getJoinedGroupList","summary":"获取当前用户已经加入的群列√","keywords":"","body":"getJoinedGroupList 功能介绍 获取当前用户已经加入的群列 注意： 直播群（AVChatRoom）和 社群（Community，支持话题的社群）不包含在此列表中。 该接口有频限检测，SDK 限制调用频率为1 秒 10 次，超过限制后会报 ERR_SDK_COMM_API_CALL_FREQUENCY_LIMIT （7008）错误 若查询的群组为工作群(Work)，需要此群先存在发送的消息将群激活才能查询到。 参数详解 此API无参数 返回值 V2TimValueCallback> { code : int desc : String data : List } 返回值详解 名称 数值类型 描述 code int 请求结果错误码 desc String 请求结果描述 data ListV2TimGroupInfo > 查询到的群组列表 代码示例 //获取当前用户已经加入的群列 V2TimValueCallback> getJoinedGroupListRes = await TencentImSDKPlugin.v2TIMManager .getGroupManager() .getJoinedGroupList(); if (getJoinedGroupListRes.code == 0) { // 查询成功 getJoinedGroupListRes.data?.forEach((element) { element.createTime;// 群创建时间 element.customInfo;// 群自定义字段 element.faceUrl;// 群头像Url element.groupAddOpt;// 群添加选项设置 element.groupID;// 群ID element.groupName;// 群名 element.groupType;// 群类型 element.introduction;// 群介绍 element.isAllMuted;// 群是否全体禁言 element.isSupportTopic;// 群是否支持话题 element.joinTime;// 当前用户在此群的加入时间 element.lastInfoTime;// 最后一次群修改资料的时间 element.lastMessageTime;// 最后一次群发消息的时间 element.memberCount;// 群员数量 element.notification;// 群公告 element.onlineCount;// 群在线人数 element.owner;// 群主 element.recvOpt;// 当前用户在此群中接受信息的选项 element.role;// 此用户在群中的角色 }); } "},"api/v2timgroupmanager/getgroupsinfo.html":{"url":"api/v2timgroupmanager/getgroupsinfo.html","title":"getGroupsInfo","summary":"获取群资料√","keywords":"","body":"getGroupsInfo 功能介绍 获取群资料 该接口支持一次传入多个 groupID，批量获取多个群的群资料。 参数详解 参数名称 参数类型 是否必填 描述 groupIDList List 是 需要查询的群组 ID列表 返回值 V2TimValueCallback> { code : int desc : String data : List } 返回值详解 名称 数值类型 描述 code int 请求结果错误码 desc String 请求结果描述 data ListV2TimGroupInfoResult > 查询到的群组信息列表 代码示例 //获取群资料 V2TimValueCallback> getGroupsInfoRes = await TencentImSDKPlugin.v2TIMManager .getGroupManager() .getGroupsInfo(groupIDList: []);// 需要查询的群组id列表 if (getGroupsInfoRes.code == 0) { // 查询成功 getGroupsInfoRes.data?.forEach((element) { element.resultCode;// 此群组查询结果码 element.resultMessage;// 此群查询结果描述 element.groupInfo?.createTime;// 群创建时间 element.groupInfo?.customInfo;// 群自定义字段 element.groupInfo?.faceUrl;// 群头像Url element.groupInfo?.groupAddOpt;// 群添加选项设置 element.groupInfo?.groupID;// 群ID element.groupInfo?.groupName;// 群名 element.groupInfo?.groupType;// 群类型 element.groupInfo?.introduction;// 群介绍 element.groupInfo?.isAllMuted;// 群是否全体禁言 element.groupInfo?.isSupportTopic;// 群是否支持话题 element.groupInfo?.joinTime;// 当前用户在此群的加入时间 element.groupInfo?.lastInfoTime;// 最后一次群修改资料的时间 element.groupInfo?.lastMessageTime;// 最后一次群发消息的时间 element.groupInfo?.memberCount;// 群员数量 element.groupInfo?.notification;// 群公告 element.groupInfo?.onlineCount;// 群在线人数 element.groupInfo?.owner;// 群主 element.groupInfo?.recvOpt;// 当前用户在此群中接受信息的选项 element.groupInfo?.role;// 此用户在群中的角色 }); } "},"api/v2timgroupmanager/searchgroups.html":{"url":"api/v2timgroupmanager/searchgroups.html","title":"searchGroups","summary":"搜索群资料√","keywords":"","body":"searchGroups 功能介绍 搜索群资料 SDK 会搜索群名称包含于关键字列表 keywordList 的所有群并返回群信息列表。关键字列表最多支持5个。 参数详解 参数名称 参数类型 是否必填 描述 searchParam V2TimGroupSearchParam 是 搜索群的搜索参数 返回值 V2TimValueCallback> { code : int desc : String data : List// 搜索到的群消息列表 } 返回值详解 名称 数值类型 描述 code int 请求结果错误码 desc String 请求结果描述 data ListV2TimGroupInfo > 搜索到的群消息列表 代码示例 // 搜索群资料的搜索设置 V2TimGroupSearchParam param = V2TimGroupSearchParam( isSearchGroupID: true,//设置是否搜索群 ID，默认为true isSearchGroupName: true, // 设置是否搜索群名称，默认为true keywordList: []);// 搜索关键字列表，最多支持5个。 // 搜索群资料 V2TimValueCallback> searchGroupsRes = await TencentImSDKPlugin.v2TIMManager .getGroupManager() .searchGroups(searchParam: param);// 搜索群资料的搜索设 if (searchGroupsRes.code == 0) { // 搜索成功 searchGroupsRes.data?.forEach((element) { element.customInfo; // 群自定义字段 element.faceUrl; // 群头像Url element.groupAddOpt; // 群添加选项设置 element.groupID; // 群ID element.groupName; // 群名 element.groupType; // 群类型 element.introduction; // 群介绍 element.isAllMuted; // 群是否全体禁言 element.isSupportTopic; // 群是否支持话题 element.joinTime; // 当前用户在此群的加入时间 element.lastInfoTime; // 最后一次群修改资料的时间 element.lastMessageTime; // 最后一次群发消息的时间 element.memberCount; // 群员数量 element.notification; // 群公告 element.onlineCount; // 群在线人数 element.owner; // 群主 element.recvOpt; // 当前用户在此群中接受信息的选项 element.role; // 此用户在群中的角色 }); } "},"api/v2timgroupmanager/setgroupinfo.html":{"url":"api/v2timgroupmanager/setgroupinfo.html","title":"setGroupInfo","summary":"修改群资料√","keywords":"","body":"setGroupInfo 功能介绍 修改群资料 如果您事先调用 addGroupListener 添加了群组事件监听器，群资料被修改后，全员会收到 onGroupInfoChanged 回调。 不同类型的群组，可以修改群资料的成员角色不同： 群组类型 可以修改群基础资料的成员角色 好友工作群(Work) 所有群成员 陌生人社交群（Public） 群主和管理员 临时会议群（Meeting） 群主和管理员 社群（Community） 群主和管理员 直播群（AVChatRoom） 群主 参数详解 参数名称 参数类型 是否必填 描述 info V2TimGroupInfo 是 群资料设置信息 返回值 V2TimCallback { code : int desc : String } 返回值详解 名称 数值类型 描述 code int 请求结果错误码 desc String 请求结果描述 代码示例 // 设置群资料设置 只有以下属性可修改，groupID为需要修改的群组id V2TimGroupInfo info = V2TimGroupInfo( groupID: 'groupID',// 需要修改的群组id groupType: \"Public\",// 群类型 groupName: 'groupName',// 群名 isSupportTopic: false,// 是否支持话题 不支持修改此属性，在创建时确定 notification: \"\",// 群公告 introduction: \"\",// 群介绍 faceUrl: \"\",// 群头像Url isAllMuted: false,// 是否全体禁言 groupAddOpt: 0,// 入群设置 customInfo: {\"custom\": \"custom\"},// 群自定义属性 旗舰版支持此参数 ); V2TimCallback setGroupInfoRes = await TencentImSDKPlugin.v2TIMManager .getGroupManager() .setGroupInfo(info: info); if (setGroupInfoRes.code == 0) { // 修改成功 } "},"api/v2timgroupmanager/initgroupattributes.html":{"url":"api/v2timgroupmanager/initgroupattributes.html","title":"initGroupAttributes","summary":"初始化群属性√","keywords":"","body":"initGroupAttributes 功能介绍 初始化群属性 初始化群属性，会清空原有的群属性列表 注意： 1、目前只支持 AVChatRoom 2、key 最多支持16个，长度限制为32字节 3、value 长度限制为4k 4、总的 attributes（包括 key 和 value）限制为16k 5、initGroupAttributes、setGroupAttributes、deleteGroupAttributes 接口合并计算， SDK 限制为5秒10次，超过后回调8511错误码；后台限制1秒5次，超过后返回10049错误码 参数详解 参数名称 参数类型 是否必填 描述 groupID String 是 需要初始化属性的群组id attributes Map 是 初始化属性 返回值 V2TimCallback { code : int desc : String } 返回值详解 名称 数值类型 描述 code int 请求结果错误码 desc String 请求结果描述 代码示例 // 注意：需要先调用joinGroup进入直播群才能进行设置 // 初始化群属性 V2TimCallback initGroupAttributesRes = await TencentImSDKPlugin.v2TIMManager .getGroupManager() .initGroupAttributes( groupID: \"groupID\",// 需要初始化属性的群组id attributes: {\"custom\":\"custom\"}// 初始化属性 ); if (initGroupAttributesRes.code == 0) { // 初始化成功 } "},"api/v2timgroupmanager/setgroupattributes.html":{"url":"api/v2timgroupmanager/setgroupattributes.html","title":"setGroupAttributes","summary":"设置群属性√","keywords":"","body":"setGroupAttributes 功能介绍 设置群属性 如果设置的群属性不存在，会自动添加该群属性。 注意： 1、目前只支持 AVChatRoom 2、key 最多支持16个，长度限制为32字节 3、value 长度限制为4k 4、总的 attributes（包括 key 和 value）限制为16k 5、initGroupAttributes、setGroupAttributes、deleteGroupAttributes 接口合并计算， SDK 限制为5秒10次，超过后回调8511错误码；后台限制1秒5次，超过后返回10049错误码 参数详解 参数名称 参数类型 是否必填 描述 groupID String 是 需要设置属性的群组id attributes Map 是 设置的属性 返回值 V2TimCallback { code : int desc : String } 返回值详解 名称 数值类型 描述 code int 请求结果错误码 desc String 请求结果描述 代码示例 // 注意：需要先调用joinGroup进入直播群才能进行设置 // 设置群属性 V2TimCallback setGroupAttributesRes = await TencentImSDKPlugin.v2TIMManager .getGroupManager() .setGroupAttributes( groupID: \"groupID\",// 需要设置属性的群组id attributes: {\"custom\":\"custom\"}// 设置的属性 ); if (setGroupAttributesRes.code == 0) { // 设置成功 } "},"api/v2timgroupmanager/deletegroupattributes.html":{"url":"api/v2timgroupmanager/deletegroupattributes.html","title":"deleteGroupAttributes","summary":"删除指定群属性√","keywords":"","body":"deleteGroupAttributes 功能介绍 删除指定群属性 如果 keys 字段填 null ，则会清空所有的群属性。 注意： 1、目前只支持 AVChatRoom 2、initGroupAttributes、setGroupAttributes、deleteGroupAttributes 接口合并计算， SDK 限制为5秒10次，超过后回调8511错误码；后台限制1秒5次，超过后返回10049错误码 参数详解 参数名称 参数类型 是否必填 描述 groupID String 是 需要删除属性的群组id keys List 是 删除的属性key值 返回值 V2TimCallback { code : int desc : String } 返回值详解 名称 数值类型 描述 code int 请求结果错误码 desc String 请求结果描述 代码示例 // 注意：需要先调用joinGroup进入直播群才能进行设置 // 删除指定群属性 V2TimCallback deleteGroupAttributesRes = await TencentImSDKPlugin .v2TIMManager .getGroupManager() .deleteGroupAttributes( groupID: \"groupID\", keys: [\"custom\"] ); if (deleteGroupAttributesRes.code == 0) { // 删除成功 } "},"api/v2timgroupmanager/getgroupattributes.html":{"url":"api/v2timgroupmanager/getgroupattributes.html","title":"getGroupAttributes","summary":"获取指定群属性√","keywords":"","body":"getGroupAttributes 功能介绍 获取指定群属性 如果 keys 字段填 null ，则会获取所有的群属性。 注意： 1、目前只支持 AVChatRoom 2、initGroupAttributes、setGroupAttributes、deleteGroupAttributes 接口合并计算， SDK 限制为5秒10次，超过后回调8511错误码；后台限制1秒5次，超过后返回10049错误码 参数详解 参数名称 参数类型 是否必填 描述 groupID String 是 需要获取属性的群组id keys List 是 获取的属性key值列表 返回值 V2TimValueCallback> { code : int desc : String data : Map// 获取到的群属性 } 返回值详解 名称 数值类型 描述 code int 请求结果错误码 desc String 请求结果描述 data Map 获取到的群属性 代码示例 // 注意：需要先调用joinGroup进入直播群才能进行获取 // 获取指定群属性 V2TimValueCallback> getGroupAttributesRes = await TencentImSDKPlugin.v2TIMManager .getGroupManager() .getGroupAttributes( groupID: \"groupID\",// 需要获取属性的群组id keys: [\"custom\"]// 获取的属性key值列表 ); if (getGroupAttributesRes.code == 0) { // 获取成功 Map? groupAttributes = getGroupAttributesRes.data;// 获取到的群属性 } "},"api/v2timgroupmanager/getgrouponlinemembercount.html":{"url":"api/v2timgroupmanager/getgrouponlinemembercount.html","title":"getGroupOnlineMemberCount","summary":"获取指定群在线人数√","keywords":"","body":"getGroupOnlineMemberCount 功能介绍 获取指定群在线人数 注意： 目前仅直播群（AVChatRoom）支持获取群在线人数。 SDK 调用频率限制为 60 秒 1 次。 参数详解 参数名称 参数类型 是否必填 描述 groupID String 是 需要查询的群组id 返回值 V2TimValueCallback { code : int desc : String data : int } 返回值详解 名称 数值类型 描述 code int 请求结果错误码 desc String 请求结果描述 data int 查询到的群在线人数 代码示例 // 获取指定群在线人数 V2TimValueCallback getGroupOnlineMemberCountRes = await TencentImSDKPlugin.v2TIMManager .getGroupManager() .getGroupOnlineMemberCount( groupID: \"groupID\", ); if (getGroupOnlineMemberCountRes.code == 0) { // 查询成功 int? groupOnlineMemberCount = getGroupOnlineMemberCountRes.data;// 查询到的群在线人数 } "},"api/v2timgroupmanager/getgroupmemberlist.html":{"url":"api/v2timgroupmanager/getgroupmemberlist.html","title":"getGroupMemberList","summary":"获取群成员列表√","keywords":"","body":"getGroupMemberList 功能介绍 获取群成员列表 您可以调用 getGroupMemberList 获取指定群的群成员列表。该列表中包含了各个群成员的资料信息。 一个群中的成员人数可能很多（例如 5000+），群成员列表的拉取接口支持过滤器（filter）和分页拉取（nextSeq）两个高级特性。 注意： web 端使用时，count 和 offset 为必传参数. filter 和 nextSeq 不生效。 直播群（AVChatRoom）的特殊限制： 不支持管理员角色的拉取，群成员个数最大只支持 31 个（新进来的成员会排前面），程序重启后，请重新加入群组，否则拉取群成员会报 10007 错误码。 参数详解 参数名称 参数类型 是否必填 描述 groupID String 是 需要查询的群组 ID filter GroupMemberFilterTypeEnum 是 查询群成员类型 nextSeq String 是 分页拉取标志，第一次拉取填0，回调成功如果 nextSeq 不为零，需要分页，传入返回值再次拉取，直至为0。 count int 否 需要拉取的数量。count暂时失效。 offset int 否 偏移量，默认从0开始拉取。 返回值 V2TimValueCallback { code : int desc : String data : { memberInfoList : List// 拉取到的群成员列表 nextSeq : String // 分页拉取标志 } } 返回值详解 名称 数值类型 描述 code int 请求结果错误码 desc String 请求结果描述 data ListV2TimGroupMemberFullInfo > 拉取到的群成员列表表 代码示例 // 获取群成员列表 V2TimValueCallback getGroupMemberListRes = await TencentImSDKPlugin.v2TIMManager .getGroupManager() .getGroupMemberList( groupID: \"groupID\",// 需要查询的群组 ID filter:GroupMemberFilterTypeEnum.V2TIM_GROUP_MEMBER_FILTER_ADMIN,//查询群成员类型 nextSeq: \"0\",// 分页拉取标志，第一次拉取填0，回调成功如果 nextSeq 不为零，需要分页，传入返回值再次拉取，直至为0。 count: 100,// 需要拉取的数量。最大值：100，避免回包过大导致请求失败。若传入超过100，则只拉取前100个。 offset:0,// 偏移量，默认从0开始拉取。 ); if (getGroupMemberListRes.code == 0) { // 拉取成功 getGroupMemberListRes.data?.memberInfoList?.forEach((element) { element?.customInfo;// 群成员自定义字段 element?.faceUrl;// 头像Url element?.friendRemark;// 好友备注 element?.joinTime;// 群成员入群时间 element?.muteUntil;// 群成员禁言持续时间 element?.nameCard;// 群成员名片 element?.nickName;// 群成员昵称 element?.role;// 群成员角色 element?.userID;// 群成员ID }); } "},"api/v2timgroupmanager/getgroupmembersinfo.html":{"url":"api/v2timgroupmanager/getgroupmembersinfo.html","title":"getGroupMembersInfo","summary":"获取指定的群成员资料√","keywords":"","body":"getGroupMembersInfo 功能介绍 获取指定的群成员资料 该接口支持批量获取，您可以一次传入多个 userID 获取多个群成员的资料，从而提升网络传输效率。 参数详解 参数名称 参数类型 是否必填 描述 groupID String 是 需要查询的群组id memberList List 是 需要查询的用户id列表 返回值 V2TimValueCallback> { code : int desc : String data : List// 查询到的用户信息列表 } 返回值详解 名称 数值类型 描述 code int 请求结果错误码 desc String 请求结果描述 data ListV2TimGroupMemberFullInfo > 查询到的用户信息列表 代码示例 // 获取指定的群成员资料 V2TimValueCallback> getGroupMembersInfoRes = await TencentImSDKPlugin.v2TIMManager .getGroupManager() .getGroupMembersInfo( groupID: \"groupID\", // 需要获取的群组id memberList: [], // 需要获取的用户id列表 ); if (getGroupMembersInfoRes.code == 0) { // 获取成功 getGroupMembersInfoRes.data?.forEach((element) { element.customInfo;// 群成员自定义属性 element.faceUrl;// 群成员头像Url element.friendRemark;// 群成员好友备注 element.joinTime;// 群成员加群时间 element.muteUntil;// 群成员禁言时间 element.nameCard;// 群成员名片 element.nickName;// 群成员的昵称 element.role;// 群成员在此群的角色 element.userID;// 群成员的id }); } "},"api/v2timgroupmanager/searchgroupmembers.html":{"url":"api/v2timgroupmanager/searchgroupmembers.html","title":"searchGroupMembers","summary":"搜索群成员√","keywords":"","body":"searchGroupMembers 功能介绍 搜索群成员 SDK 会在本地搜索指定群 ID 列表中，群成员信息（名片、好友备注、昵称、userID）包含于关键字列表 keywordList 的所有群成员并返回群 ID 和群成员列表的 map，如搜索不到请先调用getGroupMemberList将成员信息存储到本地数据库再调用此接口进行搜索，关键字列表最多支持5个。 注意： web 不支持搜索 参数详解 参数名称 参数类型 是否必填 描述 param V2TimGroupMemberSearchParam 是 搜索群成员的搜索参数 返回值 V2TimValueCallback { code : int desc : String data : { groupMemberSearchResultItems : Map// 群成员搜索结果 } } 返回值详解 名称 数值类型 描述 code int 请求结果错误码 desc String 请求结果描述 data V2GroupMemberInfoSearchResult 群成员搜索结果 代码示例 //搜索参数设置 V2TimGroupMemberSearchParam param = V2TimGroupMemberSearchParam( groupIDList: [],// 指定群 ID 列表，若为 null 则搜索全部群中的群成员 isSearchMemberNameCard: true,// 设置是否搜索群成员名片，默认为true isSearchMemberRemark: true,// 设置是否搜索群成员备注，默认为true isSearchMemberNickName: true,// 设置是否搜索群成员昵称，默认为true isSearchMemberUserID: true,// 设置是否搜索群成员 userID，默认为true keywordList: []);// 搜索关键字列表，最多支持5个 //搜索群成员 V2TimValueCallback searchGroupMembersRes = await TencentImSDKPlugin.v2TIMManager .getGroupManager() .searchGroupMembers(param: param); // 搜索群成员的搜索参数 if (searchGroupMembersRes.code == 0) { // 搜索成功 searchGroupMembersRes.data?.groupMemberSearchResultItems;// 群成员搜索结果 } "},"api/v2timgroupmanager/setgroupmemberinfo.html":{"url":"api/v2timgroupmanager/setgroupmemberinfo.html","title":"setGroupMemberInfo","summary":"修改指定的群成员资料√","keywords":"","body":"setGroupMemberInfo 功能介绍 修改指定的群成员资料 群主或管理员可以调用 setGroupMemberInfo 接口修改群成员的群名片（nameCard）、自定义字段（customInfo）。 参数详解 参数名称 参数类型 是否必填 描述 groupID String 是 需要修改的群组id userID String 是 需要修改的用户id nameCard String 否 修改名片属性 customInfo Map 否 修改自定义属性 返回值 V2TimCallback { code : int desc : String } 返回值详解 名称 数值类型 描述 code int 请求结果错误码 desc String 请求结果描述 代码示例 // 修改指定的群成员资料 V2TimCallback setGroupMemberInfoRes = await TencentImSDKPlugin.v2TIMManager .getGroupManager() .setGroupMemberInfo( groupID: \"groupID\",// 需要修改的群组id userID: \"userID\",// 需要修改的用户id nameCard: \"\",// 修改名片属性 customInfo: {\"custom\":\"custom\"}// 修改自定义属性 需开通此功能 ); if (setGroupMemberInfoRes.code == 0) { // 修改成功 } "},"api/v2timgroupmanager/mutegroupmember.html":{"url":"api/v2timgroupmanager/mutegroupmember.html","title":"muteGroupMember","summary":"禁言√","keywords":"","body":"muteGroupMember 功能介绍 禁言 禁言时间单位为秒，禁言信息存储于群成员的 muteUtil 属性字段中。 群成员被禁言后，全员（包括被禁言的群成员）都会收到 onMemberInfoChanged 事件回调。 只有管理员或群主能够调用 只有群主能将管理员禁言。 参数详解 参数名称 参数类型 是否必填 描述 groupID String 是 禁言的群组id userID String 是 禁言的用户id seconds int 是 禁言时间，单位秒 返回值 V2TimCallback { code : int desc : String } 返回值详解 名称 数值类型 描述 code int 请求结果错误码 desc String 请求结果描述 代码示例 // 禁言群组内的用户 V2TimCallback muteGroupMemberRes = await TencentImSDKPlugin.v2TIMManager .getGroupManager() .muteGroupMember( groupID: \"groupID\",// 禁言的群组id userID: \"userID\",// 禁言的用户id seconds: 0// 禁言时间 ); if (muteGroupMemberRes.code == 0) { // 禁言成功 } "},"api/v2timgroupmanager/inviteusertogroup.html":{"url":"api/v2timgroupmanager/inviteusertogroup.html","title":"inviteUserToGroup","summary":"邀请他人入群√","keywords":"","body":"inviteUserToGroup 功能介绍 邀请他人入群 全体群成员（包括邀请者自己）会收到 onMemberInvited 回调。您可以在这个回调中做一些 UI 上的提示。 工作群（Work）：群里的任何人都可以邀请其他人进群。 会议群（Meeting）和公开群（Public）：只有通过rest api 使用 App 管理员身份才可以邀请其他人进群。 直播群（AVChatRoom）：不支持此功能。 参数详解 参数名称 参数类型 是否必填 描述 groupID String 是 需要加入的群组id userList List 是 邀请的用户id列表 返回值 V2TimValueCallback> { code : int desc : String data : List } 返回值详解 名称 数值类型 描述 code int 请求结果错误码 desc String 请求结果描述 data ListV2TimGroupMemberOperationResult > 每一个用户的请求结果 代码示例 // 邀请他人入群 V2TimValueCallback> inviteUserToGroupRes = await TencentImSDKPlugin.v2TIMManager .getGroupManager() .inviteUserToGroup( groupID: \"groupID\",// 需要加入的群组id userList: [],// 邀请的用户id列表 ); if (inviteUserToGroupRes.code == 0) { // 邀请成功 inviteUserToGroupRes.data?.forEach((element) { element.memberID;// 被操作成员 ID // 邀请结果状态 // 0:操作失败，1:操作成功，2:无效操作，加群时已经是群成员 // 3:等待处理，邀请入群时等待对方处理，4:操作失败，创建群指定初始群成员列表或邀请入群时，被邀请者加入的群总数超限 element.result;// 邀请结果状态 }); } "},"api/v2timgroupmanager/kickgroupmember.html":{"url":"api/v2timgroupmanager/kickgroupmember.html","title":"kickGroupMember","summary":"踢人√","keywords":"","body":"kickGroupMember 功能介绍 踢人 普通群成员被踢后，全员（包括被踢人）会收到 onMemberKicked 回调。 由于直播群（AVChatRoom）对进群没有限制，因此直播群（AVChatRoom）没有支持踢人的接口，您可以使用 muteGroupMember 禁言指定成员达到类似的成员管控的目的。 工作群（Work）：只有群主或 APP 管理员可以踢人。 公开群（Public）、会议群（Meeting）：群主、管理员和 APP 管理员可以踢人 。 直播群（AVChatRoom）：只支持禁言（muteGroupMember），不支持踢人。 参数详解 参数名称 参数类型 是否必填 描述 groupID String 是 需要踢人的群组id memberList List 是 踢出的用户id列表 reason String 否 踢出原因 返回值 V2TimCallback { code : int desc : String } 返回值详解 名称 数值类型 描述 code int 请求结果错误码 desc String 请求结果描述 代码示例 //群组踢人 V2TimCallback kickGroupMemberRes = await TencentImSDKPlugin.v2TIMManager.getGroupManager().kickGroupMember( groupID: \"groupID\", // 需要踢人的群组id memberList: [], // 踢出的用户id列表 reason: \"\" // 踢出原因 ); if (kickGroupMemberRes.code == 0) { // 踢出成功 } "},"api/v2timgroupmanager/setgroupmemberrole.html":{"url":"api/v2timgroupmanager/setgroupmemberrole.html","title":"setGroupMemberRole","summary":"设置群成员的角色√","keywords":"","body":"setGroupMemberRole 功能介绍 修改群资料 普通成员被授权为管理员后，全员（包括被设置的成员）会收到 onGrantAdministrator 回调。 普通成员被取消管理员授权后，全员（包括被设置的成员）会收到 onRevokeAdministrator 回调。 公开群（Public）和会议群（Meeting）：只有群主才能对群成员进行普通成员和管理员之间的角色切换。 其他群不支持设置群成员角色。 转让群组请调用 transferGroupOwner 接口。 参数详解 参数名称 参数类型 是否必填 描述 groupID String 是 设置群组的id userID String 是 被设置角色的用户id role GroupMemberRoleTypeEnum 是 用户被设置的角色属性 返回值 V2TimCallback { code : int desc : String } 返回值详解 名称 数值类型 描述 code int 请求结果错误码 desc String 请求结果描述 代码示例 // 设置群成员的角色 V2TimCallback setGroupMemberRoleRes = await TencentImSDKPlugin.v2TIMManager .getGroupManager() .setGroupMemberRole( groupID: \"groupID\",// 设置群组的id userID: \"userID\",// 被设置角色的用户id role: GroupMemberRoleTypeEnum.V2TIM_GROUP_MEMBER_ROLE_ADMIN// 用户被设置的角色属性 ); if (setGroupMemberRoleRes.code == 0) { // 设置成功 } "},"api/v2timgroupmanager/transfergroupowner.html":{"url":"api/v2timgroupmanager/transfergroupowner.html","title":"transferGroupOwner","summary":"转让群主√","keywords":"","body":"transferGroupOwner 功能介绍 转让群主 群主转让后，全员会收到 onGroupInfoChanged 回调，其中 V2TIMGroupChangeInfo 的 type 为 V2TIMGroupChangeInfo.V2TIM_GROUP_INFO_CHANGE_TYPE_OWNER，value 值为新群主的 UserID。 普通类型的群（Work、Public、Meeting）：只有群主才有权限进行群转让操作。 直播群（AVChatRoom）：不支持转让群主。 参数详解 参数名称 参数类型 是否必填 描述 groupID String 是 设置群组的id userID String 是 被设置角色的用户id 返回值 V2TimCallback { code : int desc : String } 返回值详解 名称 数值类型 描述 code int 请求结果错误码 desc String 请求结果描述 代码示例 // 转让群主 V2TimCallback transferGroupOwnerRes = await TencentImSDKPlugin.v2TIMManager .getGroupManager() .transferGroupOwner( groupID: \"groupID\", userID: \"userID\", ); if (transferGroupOwnerRes.code == 0) { // 转让成功 } "},"api/v2timgroupmanager/getgroupapplicationlist.html":{"url":"api/v2timgroupmanager/getgroupapplicationlist.html","title":"getGroupApplicationList","summary":"获取加群的申请列表√","keywords":"","body":"getGroupApplicationList 功能介绍 获取加群的申请列表 注意： web版本不支持 参数详解 此API无参数 返回值 V2TimValueCallback { code : int desc : String data : { groupApplicationList : List// 申请加群信息 unreadCount : int // 未读的申请数量 } } 返回值详解 名称 数值类型 描述 code int 请求结果错误码 desc String 请求结果描述 data V2TimGroupApplicationResult 查询到的申请加群信息 代码示例 // 获取加群的申请列表 V2TimValueCallback getGroupApplicationListRes = await TencentImSDKPlugin.v2TIMManager .getGroupManager() .getGroupApplicationList(); if (getGroupApplicationListRes.code == 0) { // 获取成功 getGroupApplicationListRes.data?.groupApplicationList?.forEach((element) { element?.addTime;// 申请时间 element?.fromUser;// 请求者 userID element?.fromUserFaceUrl;// 请求者头像 element?.fromUserNickName;// 请求者昵称 element?.groupID;// 申请的群组ID element?.handledMsg;// 审批信息：同意或拒绝信息 element?.handleResult;// 处理结果 element?.handleStatus;// 处理标志 0:未处理 1:被他人处理 2:自己已处理 element?.requestMsg;// 申请或邀请附加信息 0:拒绝申请 1:同意申请 element?.toUser;// 判决者id，有人请求加群:0，邀请其他人加群:被邀请人用户 ID element?.type;// 请求类型 0:申请入群 1:邀请入群 }); } "},"api/v2timgroupmanager/acceptgroupapplication.html":{"url":"api/v2timgroupmanager/acceptgroupapplication.html","title":"acceptGroupApplication","summary":"同意某一条加群申请√","keywords":"","body":"acceptGroupApplication 功能介绍 同意某一条加群申请 注意： web 端使用时必须传入webMessageInstance 字段。 对应【群系统通知】的消息实例 参数详解 参数名称 参数类型 是否必填 描述 groupID String 是 加入的群组id reason String 否 同意原因 fromUser String 是 请求者id toUser String 是 判决者id addTime int 否 申请时间 type GroupApplicationTypeEnum 否 申请类型 webMessageInstance String 否（web端必填） 对应【群系统通知】的消息实例 返回值 V2TimCallback { code : int desc : String } 返回值详解 名称 数值类型 描述 code int 请求结果错误码 desc String 请求结果描述 代码示例 // 获取加群列表 V2TimValueCallback getGroupApplicationListRes = await TencentImSDKPlugin.v2TIMManager .getGroupManager() .getGroupApplicationList(); if (getGroupApplicationListRes.code == 0) { // 获取成功 getGroupApplicationListRes.data?.groupApplicationList ?.forEach((element) async { if (element != null) { V2TimCallback acceptGroupApplicationRes = await TencentImSDKPlugin .v2TIMManager .getGroupManager() .acceptGroupApplication( groupID: element.groupID, // 加入的群组id fromUser: element.fromUser!, // 请求者id toUser: element.toUser!, // 判决者id reason: \"\", // 同意原因 addTime: element.addTime, // 申请时间 type: GroupApplicationTypeEnum.values[element.type], // 申请类型 webMessageInstance: \"\", // 对应【群系统通知】的消息实例 ); if (acceptGroupApplicationRes.code == 0) { // 同意成功 } } }); } "},"api/v2timgroupmanager/refusegroupapplication.html":{"url":"api/v2timgroupmanager/refusegroupapplication.html","title":"refuseGroupApplication","summary":"拒绝某一条加群申请√","keywords":"","body":"refuseGroupApplication 功能介绍 拒绝某一条加群申请 注意： web 端使用时必须传入webMessageInstance 字段。 对应【群系统通知】的消息实例 参数详解 参数名称 参数类型 是否必填 描述 groupID String 是 加入的群组id reason String 否 拒绝原因 fromUser String 是 请求者id toUser String 是 判决者id addTime int 否 申请时间 type GroupApplicationTypeEnum 否 申请类型 webMessageInstance String 否（web端必填） 对应【群系统通知】的消息实例 返回值 V2TimCallback { code : int desc : String } 返回值详解 名称 数值类型 描述 code int 请求结果错误码 desc String 请求结果描述 代码示例 // 获取加群列表 V2TimValueCallback getGroupApplicationListRes = await TencentImSDKPlugin.v2TIMManager .getGroupManager() .getGroupApplicationList(); if (getGroupApplicationListRes.code == 0) { // 获取成功 getGroupApplicationListRes.data?.groupApplicationList ?.forEach((element) async { if (element != null) { V2TimCallback refuseGroupApplicationRes = await TencentImSDKPlugin .v2TIMManager .getGroupManager() .refuseGroupApplication( groupID: element.groupID, // 加入的群组id fromUser: element.fromUser!, // 请求者id toUser: element.toUser!, // 判决者id reason: \"\", // 拒绝原因 addTime: element.addTime!, // 申请时间 type: GroupApplicationTypeEnum.values[element.type], // 申请类型 webMessageInstance: \"\", // 对应【群系统通知】的消息实例 ); if (refuseGroupApplicationRes.code == 0) { // 拒绝成功 } } }); } "},"api/v2timgroupmanager/setgroupapplicationread.html":{"url":"api/v2timgroupmanager/setgroupapplicationread.html","title":"setGroupApplicationRead","summary":"标记所有群组申请列表为已读√","keywords":"","body":"setGroupApplicationRead 功能介绍 标记所有群组申请列表为已读 注意： web 不支持 参数详解 此API无参数 返回值 V2TimCallback { code : int desc : String } 返回值详解 名称 数值类型 描述 code int 请求结果错误码 desc String 请求结果描述 代码示例 // 标记所有群组申请列表为已读 V2TimCallback setGroupApplicationReadRes = await TencentImSDKPlugin .v2TIMManager .getGroupManager() .setGroupApplicationRead(); if (setGroupApplicationReadRes.code == 0) { // 设置成功 } "},"api/v2timgroupmanager/getjoinedcommunitylist.html":{"url":"api/v2timgroupmanager/getjoinedcommunitylist.html","title":"getJoinedCommunityList","summary":"获取当前用户已经加入的支持话题的社群列表√","keywords":"","body":"getJoinedCommunityList 功能介绍 获取当前用户已经加入的支持话题的社群列表 4.0.1及以上版本支持 注意： web版本不支持 参数详解 此API无参数 返回值 V2TimValueCallback> { code : int desc : String data : List } 返回值详解 名称 数值类型 描述 code int 请求结果错误码 desc String 请求结果描述 data ListV2TimGroupInfo > 查询到的群组列表 代码示例 // 获取当前用户已经加入的支持话题的社群列表 V2TimValueCallback> getJoinedCommunityListRes = await TencentImSDKPlugin.v2TIMManager .getGroupManager() .getJoinedCommunityList(); if (getJoinedCommunityListRes.code == 0) { // 查询成功 getJoinedCommunityListRes.data?.forEach((element) { element.createTime;// 群创建时间 element.customInfo;// 群自定义字段 element.faceUrl;// 群头像Url element.groupAddOpt;// 群添加选项设置 element.groupID;// 群ID element.groupName;// 群名 element.groupType;// 群类型 element.introduction;// 群介绍 element.isAllMuted;// 群是否全体禁言 element.isSupportTopic;// 群是否支持话题 element.joinTime;// 当前用户在此群的加入时间 element.lastInfoTime;// 最后一次群修改资料的时间 element.lastMessageTime;// 最后一次群发消息的时间 element.memberCount;// 群员数量 element.notification;// 群公告 element.onlineCount;// 群在线人数 element.owner;// 群主 element.recvOpt;// 当前用户在此群中接受信息的选项 element.role;// 此用户在群中的角色 }); } "},"api/v2timgroupmanager/createtopicincommunity.html":{"url":"api/v2timgroupmanager/createtopicincommunity.html","title":"createTopicInCommunity","summary":"创建话题√","keywords":"","body":"createTopicInCommunity 功能介绍 创建话题 4.0.1及以上版本支持，就算为 注意： web版本不支持 参数详解 参数名称 参数类型 是否必填 描述 groupID String 是 需要创建话题的群组id topicInfo V2TimTopicInfo 是 创建话题的设置 返回值 V2TimValueCallback { code : int desc : String data : String // 被创建话题的id } 返回值详解 名称 数值类型 描述 code int 请求结果错误码 desc String 请求结果描述 data String 被创建话题的id 代码示例 //创建话题 V2TimTopicInfo topicInfo = V2TimTopicInfo( customString: \"\",// 话题自定义字段 draftText: \"\",// 话题草稿 groupAtInfoList: [],// 话题 at 信息列表 introduction: \"\",// 话题介绍 isAllMute: false,// 话题是否全员禁言 lastMessage: null,// 话题最新消息 notification: \"\",// 话题公告 selfMuteTime: 0,// 当前用户在话题中的禁言时间 topicFaceUrl: \"\",// 话题头像Url topicID: \"\",// 话题id topicName: \"\",// 话题名称 unreadCount: 0,// 话题消息未读数量 ); V2TimValueCallback createTopicInCommunityRes = await TencentImSDKPlugin.v2TIMManager .getGroupManager() .createTopicInCommunity( groupID: \"groupID\",// 需要创建话题的群组id topicInfo: topicInfo,// 创建话题的设置 ); if (createTopicInCommunityRes.code == 0) { // 创建成功 String? topicId = createTopicInCommunityRes.data;// 被创建话题的id } "},"api/v2timgroupmanager/deletetopicfromcommunity.html":{"url":"api/v2timgroupmanager/deletetopicfromcommunity.html","title":"deleteTopicFromCommunity","summary":"删除话题","keywords":"","body":"deleteTopicFromCommunity 功能介绍 删除话题 4.0.1及以上版本支持。 注意： web版本不支持 参数详解 参数名称 参数类型 是否必填 描述 groupID String 是 需要删除属性的群组id topicIDList List 是 删除的话题id列表 返回值 V2TimValueCallback> { code : int desc : String data : List// 话题删除处理结果 } 返回值详解 名称 数值类型 描述 code int 请求结果错误码 desc String 请求结果描述 data ListV2TimTopicOperationResult > 话题删除处理结果 代码示例 // 删除话题 V2TimValueCallback> deleteTopicFromCommunityRes = await TencentImSDKPlugin.v2TIMManager .getGroupManager() .deleteTopicFromCommunity( groupID: \"groupID\",// 需要删除属性的群组id topicIDList: [],// 删除的话题id列表 ); if (deleteTopicFromCommunityRes.code == 0) { // 删除成功 deleteTopicFromCommunityRes.data?.forEach((element) { element.errorCode;// 删除处理结果错误码 element.errorMessage;// 删除处理结果描述 element.topicID;// 被删除的话题id }); } "},"api/v2timgroupmanager/settopicinfo.html":{"url":"api/v2timgroupmanager/settopicinfo.html","title":"setTopicInfo","summary":"设置话题属性","keywords":"","body":"setTopicInfo 功能介绍 设置话题属性 4.0.1及以上版本支持 注意： web版本不支持 参数详解 参数名称 参数类型 是否必填 描述 topicInfo V2TimTopicInfo 是 需要修改的话题的设置 groupID String 是 话题所在的群组id 返回值 V2TimCallback { code : int desc : String } 返回值详解 名称 数值类型 描述 code int 请求结果错误码 desc String 请求结果描述 代码示例 // 设置话题属性 通过topicInfo中的topicID确定需要修改的话题 V2TimTopicInfo topicInfo = V2TimTopicInfo( customString: \"\", // 话题自定义字段 draftText: \"\", // 话题草稿 groupAtInfoList: [], // 话题 at 信息列表 introduction: \"\", // 话题介绍 isAllMute: false, // 话题是否全员禁言 lastMessage: null, // 话题最新消息 notification: \"\", // 话题公告 selfMuteTime: 0, // 当前用户在话题中的禁言时间 topicFaceUrl: \"\", // 话题头像Url topicID: \"\", // 需要修改的话题的id topicName: \"\", // 话题名称 unreadCount: 0, // 话题消息未读数量 ); V2TimCallback setTopicInfoRes = await TencentImSDKPlugin.v2TIMManager.getGroupManager().setTopicInfo( topicInfo: topicInfo, // 需要修改的话题的设置 groupID: \"\", // 话题所在的群组id ); if (setTopicInfoRes.code == 0) { // 设置成功 } "},"api/v2timgroupmanager/gettopicinfolist.html":{"url":"api/v2timgroupmanager/gettopicinfolist.html","title":"getTopicInfoList","summary":"获取话题属性的列表√","keywords":"","body":"getTopicInfoList 功能介绍 获取话题属性的列表 4.0.1及以上版本支持 当 topicIDList 列表为空时，为获取该社群下的所有话题列表 当 topicIDList 填入指定的话题 ID 时，为获取填入的话题列表 注意： web版本不支持 参数详解 参数名称 参数类型 是否必填 描述 groupID String 是 需要获取话题属性的群组id topicIDList List 是 需要获取话题属性的话题id列表 返回值 V2TimValueCallback> { code : int desc : String data : List// 获取到的话题信息列表 } 返回值详解 名称 数值类型 描述 code int 请求结果错误码 desc String 请求结果描述 data ListV2TimTopicInfoResult > 获取到的话题信息列表 代码示例 // 获取话题属性的列表 V2TimValueCallback> getTopicInfoListoRes = await TencentImSDKPlugin.v2TIMManager .getGroupManager() .getTopicInfoList( groupID: \"groupID\",// 需要获取话题属性的群组id topicIDList: [],// 需要获取话题属性的话题id列表 ); if (getTopicInfoListoRes.code == 0) { // 查询成功 getTopicInfoListoRes.data?.forEach((element) { element.errorCode;// 查询结果错误码 element.errorMessage;// 查询结果描述 element.topicInfo?.customString;// 此条话题的自定义信息 element.topicInfo?.draftText;// 此条话题的草稿 element.topicInfo?.groupAtInfoList;// 此条话题的@信息列表 element.topicInfo?.introduction;// 此条话题的介绍 element.topicInfo?.isAllMute;// 此条话题是否全员禁言 element.topicInfo?.lastMessage;// 此条话题的最新消息 element.topicInfo?.notification;// 此条话题的公告 element.topicInfo?.recvOpt;// 此条话题的话题消息接收选项 element.topicInfo?.selfMuteTime;// 当前用户在此条话题中的禁言时间 element.topicInfo?.topicFaceUrl;// 此条话题的头像Url element.topicInfo?.topicID;// 此条话题的id element.topicInfo?.unreadCount;// 此条话题的消息未读数量 }); } "},"api/v2timsignalingmanager/":{"url":"api/v2timsignalingmanager/","title":"V2TIMSignalingManager","summary":"提供了信令操作相关接口","keywords":"","body":"V2TIMSignalingManager V2TIMSignalingManager功能介绍 提供了信令操作相关接口 API目录 API 描述 addSignalingListener 添加信令监听器 removeSignalingListener 移除信令监听器 invite 邀请某个人 inviteInGroup 邀请群内的某些人 cancel 邀请方取消邀请 accept 接收方接受邀请 reject 接收方拒绝邀请 getSignalingInfo 获取信令信息 addInvitedSignaling 创建一个信令请求 "},"api/v2timsignalingmanager/addsignalinglistener.html":{"url":"api/v2timsignalingmanager/addsignalinglistener.html","title":"addSignalingListener","summary":"添加信令监听器√","keywords":"","body":"addSignalingListener 功能介绍 添加信令监听器 信令接口是基于 IM 消息提供的一套邀请流程控制的接口，可以实现多种实时场景，例如： 直播聊天室中进行上麦、下麦管理。 聊天场景中实现类似微信中的音视频通话功能。 教育场景中老师邀请同学们举手、发言的流程控制。 注意： 使用addSignalingListener会在所有的信令监听器列表中新增一个信令监听器。 参数详解 参数名称 参数类型 是否必填 描述 listener V2TimSignalingListener 是 信令监听器 返回值 void 返回值详解 此方法无返回值 代码示例 //设置信令监听器 V2TimSignalingListener listener = V2TimSignalingListener( onInvitationCancelled: (String inviteID, String inviter, String data) async { //邀请被取消的回调 //inviteID 邀请消息信令id //inviter 邀请人id //data 邀请被取消时的自定义data }, onInvitationTimeout: (String inviteID, List inviteeList) async { //邀请超时的回调 //inviteID 邀请消息信令id //inviteeList 被邀请人的列表 }, onInviteeAccepted: (String inviteID, String invitee, String data) async { //邀请被接受的回调 //inviteID 邀请消息信令id //invitee 被邀请人id //data 接受邀请时的自定义data }, onInviteeRejected: (String inviteID, String invitee, String data) async { //邀请被拒绝的回调 //inviteID 邀请消息信令id //invitee 被邀请人id //data 拒绝邀请时的自定义data }, onReceiveNewInvitation: (String inviteID, String inviter, String groupID, List inviteeList, String data) async { //获取新的邀请的回调 //inviteID 邀请消息信令id //inviter 邀请人id //groupID 发出邀请的群组id //inviteeList 被邀请人的列表 //data 邀请时的自定义data }, ); TencentImSDKPlugin.v2TIMManager .getSignalingManager() .addSignalingListener(listener: listener);//添加信令监听器 "},"api/v2timsignalingmanager/removesignalinglistener.html":{"url":"api/v2timsignalingmanager/removesignalinglistener.html","title":"removeSignalingListener","summary":"移除信令监听器√","keywords":"","body":"removeSignalingListener 功能介绍 移除信令监听器 注意： 若listener为null则删除所有信令监听器 参数详解 参数名称 参数类型 是否必填 描述 listener V2TimSignalingListener 是 需要移除的信令监听器 返回值 void 返回值详解 此方法无返回值 代码示例 //设置信令监听器 V2TimSignalingListener listener = V2TimSignalingListener( onInvitationCancelled: (String inviteID, String inviter, String data) async { //邀请被取消的回调 //inviteID 邀请消息信令id //inviter 邀请人id //data 邀请被取消时的自定义data }, onInvitationTimeout: (String inviteID, List inviteeList) async { //邀请超时的回调 //inviteID 邀请消息信令id //inviteeList 被邀请人的列表 }, onInviteeAccepted: (String inviteID, String invitee, String data) async { //邀请被接受的回调 //inviteID 邀请消息信令id //invitee 被邀请人id //data 接受邀请时的自定义data }, onInviteeRejected: (String inviteID, String invitee, String data) async { //邀请被拒绝的回调 //inviteID 邀请消息信令id //invitee 被邀请人id //data 拒绝邀请时的自定义data }, onReceiveNewInvitation: (String inviteID, String inviter, String groupID, List inviteeList, String data) async { //获取新的邀请的回调 //inviteID 邀请消息信令id //inviter 邀请人id //groupID 发出邀请的群组id //inviteeList 被邀请人的列表 //data 邀请时的自定义data }, ); TencentImSDKPlugin.v2TIMManager .getSignalingManager() .addSignalingListener(listener: listener);//添加信令监听器 //在添加成功后使用removeSignalingListener可移除监听器 TencentImSDKPlugin.v2TIMManager .getSignalingManager() .removeSignalingListener(listener: listener); "},"api/v2timsignalingmanager/invite.html":{"url":"api/v2timsignalingmanager/invite.html","title":"invite","summary":"邀请某个人√","keywords":"","body":"invite 功能介绍 邀请某个人 参数详解 参数名称 参数类型 是否必填 描述 invitee String 是 被邀请人id data String 是 邀请时附带的定义消息 timeout int 否 邀请超时时间（单位 秒） 默认为30秒，若传0则表示永不失效。 onlineUserOnly bool 否 是否只发给在线用户 offlinePushInfo OfflinePushInfo 否 离线推送设置 返回值 V2TimValueCallback { code : int desc : String data : String//创建的邀请id } 返回值详解 名称 数值类型 描述 code int 请求结果错误码 desc String 请求结果描述 data String 创建的邀请id 代码示例 //设置信令监听器 V2TimSignalingListener listener = V2TimSignalingListener( onInvitationCancelled: (String inviteID, String inviter, String data) async {}, onInvitationTimeout: (String inviteID, List inviteeList) async { //邀请超时的回调 //inviteID 邀请消息信令id //inviteeList 被邀请人的列表 }, onInviteeAccepted: (String inviteID, String invitee, String data) async { //邀请被接受的回调 //inviteID 邀请消息信令id //invitee 被邀请人id //data 接受邀请时的自定义data }, onInviteeRejected: (String inviteID, String invitee, String data) async { //邀请被拒绝的回调 //inviteID 邀请消息信令id //invitee 被邀请人id //data 拒绝邀请时的自定义data }, onReceiveNewInvitation: (String inviteID, String inviter, String groupID, List inviteeList, String data) async { //获取新的邀请的回调 //inviteID 邀请消息信令id //inviter 邀请人id //groupID 发出邀请的群组id //inviteeList 被邀请人的列表 //data 邀请时的自定义data }, ); TencentImSDKPlugin.v2TIMManager .getSignalingManager() .addSignalingListener(listener: listener); //添加信令监听器 V2TimValueCallback inviteRes = await TencentImSDKPlugin.v2TIMManager .getSignalingManager() .invite( invitee: \"\",//被邀请人id data: \"data\",//邀请时附带的定义消息 timeout: 30,//邀请超时时间 onlineUserOnly: false,//是否只发给在线用户 offlinePushInfo: OfflinePushInfo());//离线推送设置 if (inviteRes.code == 0) { //创建邀请成功 String? inviteId = inviteRes.data;//创建的邀请id } "},"api/v2timsignalingmanager/inviteingroup.html":{"url":"api/v2timsignalingmanager/inviteingroup.html","title":"inviteInGroup","summary":"邀请群内的某些人√","keywords":"","body":"inviteInGroup 功能介绍 邀请群内的某些人 参数详解 参数名称 参数类型 是否必填 描述 inviteeList List 是 被邀请人id列表 groupID String 是 发出邀请的群组id data String 是 邀请时附带的定义消息 timeout int 否 邀请超时时间 onlineUserOnly bool 否 是否只发给在线用户 返回值 V2TimValueCallback { code : int desc : String data : String//创建的邀请id } 返回值详解 名称 数值类型 描述 code int 请求结果错误码 desc String 请求结果描述 data String 创建的邀请id 代码示例 //设置信令监听器 V2TimSignalingListener listener = V2TimSignalingListener( onInvitationCancelled: (String inviteID, String inviter, String data) async {}, onInvitationTimeout: (String inviteID, List inviteeList) async { //邀请超时的回调 //inviteID 邀请消息信令id //inviteeList 被邀请人的列表 }, onInviteeAccepted: (String inviteID, String invitee, String data) async { //邀请被接受的回调 //inviteID 邀请消息信令id //invitee 被邀请人id //data 接受邀请时的自定义data }, onInviteeRejected: (String inviteID, String invitee, String data) async { //邀请被拒绝的回调 //inviteID 邀请消息信令id //invitee 被邀请人id //data 拒绝邀请时的自定义data }, onReceiveNewInvitation: (String inviteID, String inviter, String groupID, List inviteeList, String data) async { //获取新的邀请的回调 //inviteID 邀请消息信令id //inviter 邀请人id //groupID 发出邀请的群组id //inviteeList 被邀请人的列表 //data 邀请时的自定义data }, ); TencentImSDKPlugin.v2TIMManager .getSignalingManager() .addSignalingListener(listener: listener); //添加信令监听器 V2TimValueCallback inviteInGroupRes = await TencentImSDKPlugin.v2TIMManager.getSignalingManager().inviteInGroup( inviteeList: [], //被邀请人id列表 groupID: \"\",//发出邀请的群组id data: \"data\", //邀请时附带的定义消息 timeout: 30, //邀请超时时间 onlineUserOnly: false, //是否只发给在线用户 ); //离线推送设置 if (inviteInGroupRes.code == 0) { //创建邀请成功 String? inviteId = inviteInGroupRes.data;//创建的邀请id } "},"api/v2timsignalingmanager/cancel.html":{"url":"api/v2timsignalingmanager/cancel.html","title":"cancel","summary":"邀请方取消邀请√","keywords":"","body":"cancel 功能介绍 邀请方取消邀请 参数详解 参数名称 参数类型 是否必填 描述 invitee String 是 被取消邀请的id data String 是 取消邀请时附带的定义消息 返回值 V2TimCallback { code : int desc : String } 返回值详解 名称 数值类型 描述 code int 请求结果错误码 desc String 请求结果描述 代码示例 //设置信令监听器 V2TimSignalingListener listener = V2TimSignalingListener( onInvitationCancelled: (String inviteID, String inviter, String data) async { //邀请被取消的回调 //inviteID 邀请消息信令id //inviter 邀请人id //data 邀请被取消时的自定义data }, onInvitationTimeout: (String inviteID, List inviteeList) async {}, onInviteeAccepted: (String inviteID, String invitee, String data) async {}, onInviteeRejected: (String inviteID, String invitee, String data) async {}, onReceiveNewInvitation: (String inviteID, String inviter, String groupID, List inviteeList, String data) async {}, ); TencentImSDKPlugin.v2TIMManager .getSignalingManager() .addSignalingListener(listener: listener); V2TimCallback cancelRes = await TencentImSDKPlugin.v2TIMManager .getSignalingManager() .cancel( inviteID: \"inviteID\",//被取消邀请的id data: \"\");//取消邀请时附带的定义消息 if (cancelRes.code == 0) { //取消成功 } "},"api/v2timsignalingmanager/accept.html":{"url":"api/v2timsignalingmanager/accept.html","title":"accept","summary":"接收方接受邀请√","keywords":"","body":"accept 功能介绍 接收方接受邀请 参数详解 参数名称 参数类型 是否必填 描述 inviteID String 是 邀请请求的id data String 是 接受邀请时发送的自定义消息 返回值 V2TimCallback { code : int desc : String } 返回值详解 名称 数值类型 描述 code int 请求结果错误码 desc String 请求结果描述 代码示例 //设置信令监听器 V2TimSignalingListener listener = V2TimSignalingListener( onInvitationCancelled: (String inviteID, String inviter, String data) async {}, onInvitationTimeout: (String inviteID, List inviteeList) async {}, onInviteeAccepted: (String inviteID, String invitee, String data) async {}, onInviteeRejected: (String inviteID, String invitee, String data) async {}, onReceiveNewInvitation: (String inviteID, String inviter, String groupID, List inviteeList, String data) async { //获取新的邀请的回调 //inviteID 邀请消息信令id //inviter 邀请人id //groupID 发出邀请的群组id //inviteeList 被邀请人的列表 //data 邀请时的自定义data V2TimCallback acceptRes = await TencentImSDKPlugin.v2TIMManager .getSignalingManager() .accept( inviteID: inviteID,//邀请消息信令id data: \"\");//接受邀请时发送的自定义消息 if (acceptRes.code == 0) { //接受邀请成功 } }, ); TencentImSDKPlugin.v2TIMManager .getSignalingManager() .addSignalingListener(listener: listener); "},"api/v2timsignalingmanager/reject.html":{"url":"api/v2timsignalingmanager/reject.html","title":"reject","summary":"接收方拒绝邀请√","keywords":"","body":"reject 功能介绍 接收方拒绝邀请 参数详解 参数名称 参数类型 是否必填 描述 inviteID String 是 邀请请求的id data String 是 拒绝邀请时发送的自定义消息 返回值 V2TimCallback { code : int desc : String } 返回值详解 名称 数值类型 描述 code int 请求结果错误码 desc String 请求结果描述 代码示例 //设置信令监听器 V2TimSignalingListener listener = V2TimSignalingListener( onInvitationCancelled: (String inviteID, String inviter, String data) async {}, onInvitationTimeout: (String inviteID, List inviteeList) async {}, onInviteeAccepted: (String inviteID, String invitee, String data) async {}, onInviteeRejected: (String inviteID, String invitee, String data) async {}, onReceiveNewInvitation: (String inviteID, String inviter, String groupID, List inviteeList, String data) async { //获取新的邀请的回调 //inviteID 邀请消息信令id //inviter 邀请人id //groupID 发出邀请的群组id //inviteeList 被邀请人的列表 //data 邀请时的自定义data V2TimCallback rejectRes = await TencentImSDKPlugin.v2TIMManager .getSignalingManager() .reject( inviteID: inviteID,//邀请消息信令id data: \"\");//拒绝邀请时发送的自定义消息 if (rejectRes.code == 0) { //拒绝邀请成功 } }, ); TencentImSDKPlugin.v2TIMManager .getSignalingManager() .addSignalingListener(listener: listener); "},"api/v2timsignalingmanager/getsignalinginfo.html":{"url":"api/v2timsignalingmanager/getsignalinginfo.html","title":"getSignalingInfo","summary":"获取信令信息√","keywords":"","body":"getSignalingInfo 功能介绍 获取信令信息 如果 invite 设置 onlineUserOnly 为 false，每次信令操作（包括 invite、cancel、accept、reject、timeout）都会产生一条自定义消息， 该消息会通过 V2TIMAdvancedMsgListener 的 onRecvNewMessage 抛给用户，用户也可以通过历史消息拉取，如果需要根据信令信息做自定义化文本展示，可以调用下面接口获取信令信息。 如果返回值为 null，则查询的 msg 不是一条信令消息。 参数详解 参数名称 参数类型 是否必填 描述 msgID String 是 信令消息的id 返回值 V2TimValueCallback { code : int desc : String data : { inviteID : String// 邀请ID inviter : String // 邀请人ID inviteeList : List//信令接收人列表 groupID : String//发出信令的群组id data : String//信令的自定义消息 timeout : int//信令超时时间 actionType : int//信令状态 businessID : int // ios不回返回这条 isOnlineUserOnly : bool //是否只发送给在线用户 ios不回返回这条 offlinePushInfo : V2TimOfflinePushInfo //离线消息推送设置 ios不回返回这条 } } 返回值详解 名称 数值类型 描述 code int 请求结果错误码 desc String 请求结果描述 data V2TimSignalingInfo 查询到的信令信息 代码示例 //获取信令信息 V2TimValueCallback getSignalingInfoRes = await TencentImSDKPlugin.v2TIMManager .getSignalingManager() .getSignalingInfo(msgID: \"msgID\");//信令消息的id if (getSignalingInfoRes.code == 0) { //查询成功 //信令状态 //1:邀请方发起邀请 //2:邀请方取消邀请 //3:被邀请方接受邀请 //4:被邀请方拒绝邀请 //5:邀请超时 getSignalingInfoRes.data?.actionType;//信令状态 getSignalingInfoRes.data?.businessID;//传1即可 getSignalingInfoRes.data?.data;//信令的自定义消息 getSignalingInfoRes.data?.groupID;//发出信令的群组id getSignalingInfoRes.data?.inviteID;//邀请ID getSignalingInfoRes.data?.inviteeList;//信令接收人列表 getSignalingInfoRes.data?.inviter;//邀请人ID getSignalingInfoRes.data?.isOnlineUserOnly;//是否只发送给在线用户 ios不回返回这条 getSignalingInfoRes.data?.offlinePushInfo;//离线消息推送设置 ios不回返回这条 getSignalingInfoRes.data?.timeout;//信令超时时间 } "},"api/v2timsignalingmanager/addinvitedsignaling.html":{"url":"api/v2timsignalingmanager/addinvitedsignaling.html","title":"addInvitedSignaling","summary":"创建一个信令请求√","keywords":"","body":"addInvitedSignaling 功能介绍 创建一个信令请求 参数详解 参数名称 参数类型 是否必填 描述 info V2TimSignalingInfo 是 创建的信令消息的设置 返回值 V2TimCallback { code : int desc : String } 返回值详解 名称 数值类型 描述 code int 请求结果错误码 desc String 请求结果描述 代码示例 //创建的信令消息的设置 V2TimSignalingInfo info = V2TimSignalingInfo( //信令状态 //1:邀请方发起邀请 //2:邀请方取消邀请 //3:被邀请方接受邀请 //4:被邀请方拒绝邀请 //5:邀请超时 actionType: 1,//信令状态 businessID: 1,//传1即可 data: \"\",//信令的自定义消息 groupID: \"\",//发出信令的群组id inviteeList: [],//信令接收人列表 inviteID: \"\",//邀请ID timeout: 30,//信令超时时间 inviter: \"\",//邀请人ID isOnlineUserOnly: false,//是否只发送给在线用户 offlinePushInfo: V2TimOfflinePushInfo());//离线消息推送设置 V2TimCallback addInvitedSignalingRes = await TencentImSDKPlugin.v2TIMManager .getSignalingManager() .addInvitedSignaling(info: info);//创建的信令消息的设置 if (addInvitedSignalingRes.code == 0) { //创建成功 } "},"api/v2timconversationmanager/":{"url":"api/v2timconversationmanager/","title":"V2TIMConversationManager","summary":"会话接口，包含了会话的获取，删除和更新的逻辑","keywords":"","body":"V2TIMConversationManager V2TIMConversationManager功能介绍 会话接口，包含了会话的获取，删除和更新的逻辑 API目录 API 描述 addConversationListener 添加会话监听器 removeConversationListener 移除会话监听器 getConversationList 获取会话列表 getConversationListByFilter 获取会话列表的高级接口 getConversation 获取指定会话 getConversationListByConversaionIds 通过会话ID获取指定会话列表 deleteConversation 删除会话 setConversationDraft 设置会话草稿 setConversationCustomData 设置会话自定义消息 createConversationGroup 创建会话分组 getConversationGroupList 获取会话分组列表 deleteConversationGroup 删除会话分组 renameConversationGroup 重命名会话分组 addConversationsToGroup 添加会话到一个会话分组 deleteConversationsFromGroup 从一个会话分组中删除会话 markConversation 标记会话 getTotalUnreadMessageCount 获取会话未读总数 pinConversation 会话置顶 setConversationListener 设置会话监听器 "},"api/v2timconversationmanager/addconversationlistener.html":{"url":"api/v2timconversationmanager/addconversationlistener.html","title":"addConversationListener","summary":"添加会话监听器√","keywords":"","body":"addConversationListener 功能介绍 添加关系链监听器 注意： 添加监听器后，您才能接收到会话变更事件。 使用addConversationListener会在所有的会话监听器列表中新增一个会话监听器。 参数详解 参数名称 参数类型 是否必填 描述 listener V2TimConversationListener 是 需要新增的会话监听器 返回值 void 返回值详解 此方法无返回值 代码示例 //设置会话监听器 V2TimConversationListener listener = V2TimConversationListener( onConversationChanged: (List conversationList) => { //某些会话的关键信息发生变化（未读计数发生变化、最后一条消息被更新等等），可以根据会话的 lastMessage -> timestamp 重新对会话列表做排序 //conversationList 改变的会话列表 }, onNewConversation: (List conversationList) => { //有新的会话（比如收到一个新同事发来的单聊消息、或者被拉入了一个新的群组中），可以根据会话的 lastMessage -> timestamp 重新对会话列表做排序 //conversationList 新的会话列表 }, onSyncServerFailed: () => { //同步服务器会话失败 }, onSyncServerFinish: () => { //同步服务器会话完成，如果会话有变更，会通过 onNewConversation | onConversationChanged 回调告知客户 }, onSyncServerStart: () => { //同步服务器会话开始，SDK 会在登录成功或者断网重连后自动同步服务器会话，您可以监听这个事件做一些 UI 进度展示操作。 }, onTotalUnreadMessageCountChanged: (int totalUnreadCount) => { //会话未读总数变更通知，未读总数会减去设置为免打扰的会话的未读数 //totalUnreadCount 会话未读总数 }, ); //添加会话监听器 TencentImSDKPlugin.v2TIMManager .getConversationManager() .addConversationListener(listener: listener);//需要新增的会话监听器 "},"api/v2timconversationmanager/removeconversationlistener.html":{"url":"api/v2timconversationmanager/removeconversationlistener.html","title":"removeConversationListener","summary":"移除会话监听器√","keywords":"","body":"removeConversationListener 功能介绍 移除关系链监听器 注意： 若listener为null则删除所有会话监听器 参数详解 参数名称 参数类型 是否必填 描述 listener V2TimConversationListener 是 需要移除的会话监听器 返回值 void 返回值详解 此方法无返回值 代码示例 //设置会话监听器 V2TimConversationListener listener = V2TimConversationListener( onConversationChanged: (List conversationList) => { //某些会话的关键信息发生变化（未读计数发生变化、最后一条消息被更新等等），可以根据会话的 lastMessage -> timestamp 重新对会话列表做排序 //conversationList 改变的会话列表 }, onNewConversation: (List conversationList) => { //有新的会话（比如收到一个新同事发来的单聊消息、或者被拉入了一个新的群组中），可以根据会话的 lastMessage -> timestamp 重新对会话列表做排序 //conversationList 新的会话列表 }, onSyncServerFailed: () => { //同步服务器会话失败 }, onSyncServerFinish: () => { //同步服务器会话完成，如果会话有变更，会通过 onNewConversation | onConversationChanged 回调告知客户 }, onSyncServerStart: () => { //同步服务器会话开始，SDK 会在登录成功或者断网重连后自动同步服务器会话，您可以监听这个事件做一些 UI 进度展示操作。 }, onTotalUnreadMessageCountChanged: (int totalUnreadCount) => { //会话未读总数变更通知，未读总数会减去设置为免打扰的会话的未读数 //totalUnreadCount 会话未读总数 }, ); //添加会话监听器 TencentImSDKPlugin.v2TIMManager .getConversationManager() .addConversationListener(listener: listener);//需要新增的会话监听器 //添加之后可移除会话监听器 TencentImSDKPlugin.v2TIMManager .getConversationManager() .removeConversationListener(listener: listener);//需要移除的会话监听器 "},"api/v2timconversationmanager/getconversationlist.html":{"url":"api/v2timconversationmanager/getconversationlist.html","title":"getConversationList","summary":"获取会话列表√","keywords":"","body":"getConversationList 功能介绍 获取会话列表 用户的会话以列表的形式返回，列表中存储的是 V2TIMConversation 对象。目前 IM SDK 对会话列表的排序规则为： Flutter sdk 3.8.0及以后版本, 该接口获取的会话列表默认已经按照会话对象的 orderKey 做了排序。orderKey 值越大，代表该会话排序越靠前。orderKey 字段是整型数，当发送新消息、接收新消息、设置草稿或置顶会话时，会话被激活，orderKey 字段会增大。 Flutter sdk 3.8.0 以前版本，该接口获取的会话列表默认已经按照会话 lastMessage 的timestamp 做了排序。timestamp 越大，会话越靠前。 注意： 该接口拉取的是本地缓存的会话，如果服务器会话有更新，SDK 内部会自动同步，然后在 V2TIMConversationListener 回调告知客户。 在某些场景下，可能出现会话的 lastMessage 为空（例如清空会话消息）。如果您使用 3.8.0 以前的 SDK，使用 lastMessage 排序时需要额外处理这种异常。我们建议您升级到 3.8.0 及以后的版本，使用 orderKey 字段排序。 最多能拉取到最近的500个会话（默认为100，旗舰版可升级至500）。 参数详解 参数名称 参数类型 是否必填 描述 nextSeq String 是 分页拉取的游标，第一次默认取传 0，后续分页拉传上一次分页拉取成功回调里的 nextSeq count int 是 分页拉取的个数，一次分页拉取不宜太多，会影响拉取的速度，建议每次拉取 100 个会话 返回值 V2TimValueCallback { code : int desc : String data : { conversationList : List//此次拉取到的消息列表 isFinished : bool//是否拉取完 nextSeq : String//后续分页拉取的游标 } } 返回值详解 名称 数值类型 描述 code int 请求结果错误码 desc String 请求结果描述 data V2TimConversationResult 此次拉取到的消息信息 代码示例 //获取会话列表 V2TimValueCallback getConversationListRes = await TencentImSDKPlugin.v2TIMManager .getConversationManager() .getConversationList( count: 100, //分页拉取的个数，一次分页拉取不宜太多，会影响拉取的速度，建议每次拉取 100 个会话 nextSeq: \"0\"//分页拉取的游标，第一次默认取传 0，后续分页拉传上一次分页拉取成功回调里的 nextSeq ); if (getConversationListRes.code == 0) { //拉取成功 bool? isFinished = getConversationListRes.data?.isFinished;//是否拉取完 String? nextSeq = getConversationListRes.data?.nextSeq;//后续分页拉取的游标 List? conversationList = getConversationListRes.data?.conversationList;//此次拉取到的消息列表 //如果没有拉取完，使用返回的nextSeq继续拉取直到isFinished为true if (!isFinished!) { V2TimValueCallback nextConversationListRes = await TencentImSDKPlugin.v2TIMManager .getConversationManager() .getConversationList(count: 100, nextSeq: nextSeq = \"0\");//使用返回的nextSeq继续拉取直到isFinished为true } getConversationListRes.data?.conversationList?.forEach((element) { element?.conversationID;//会话唯一 ID，如果是单聊，组成方式为 c2c_userID；如果是群聊，组成方式为 group_groupID。 element?.draftText;//草稿信息 element?.draftTimestamp;//草稿编辑时间，草稿设置的时候自动生成。 element?.faceUrl;//会话展示头像，群聊头像：群头像；单聊头像：对方头像。 element?.groupAtInfoList;//群会话 @ 信息列表，通常用于展示 “有人@我” 或 “@所有人” 这两种提醒状态。 element?.groupID;//当前群聊 ID，如果会话类型为群聊，groupID 会存储当前群的群 ID，否则为 null。 element?.groupType;//当前群聊类型，如果会话类型为群聊，groupType 为当前群类型，否则为 null。 element?.isPinned;//会话是否置顶 element?.lastMessage;//会话最后一条消息 element?.orderkey;//会话排序字段 element?.recvOpt;//消息接收选项 element?.showName;//会话展示名称，群聊会话名称优先级：群名称 > 群 ID；单聊会话名称优先级：对方好友备注 > 对方昵称 > 对方的 userID。 element?.type;//会话类型，分为 C2C（单聊）和 Group（群聊）。 element?.unreadCount;//会话未读消息数，直播群（AVChatRoom）不支持未读计数，默认为 0。 element?.userID;//对方用户 ID，如果会话类型为单聊，userID 会存储对方的用户 ID，否则为 null。 }); } "},"api/v2timconversationmanager/getconversationlistbyfilter.html":{"url":"api/v2timconversationmanager/getconversationlistbyfilter.html","title":"getConversationListByFilter","summary":"获取会话列表的高级接口","keywords":"","body":"getConversationListByFilter 功能介绍 获取会话列表的高级接口 参数详解 参数名称 参数类型 是否必填 描述 filter V2TimConversationListFilter 是 会话列表过滤器 返回值 V2TimValueCallback { code : int desc : String data : { conversationList : List//此次拉取到的消息列表 isFinished : bool//是否拉取完 nextSeq : String//后续分页拉取的游标 } } 返回值详解 名称 数值类型 描述 code int 请求结果错误码 desc String 请求结果描述 data V2TimConversationResult 此次拉取到的消息信息 代码示例 //获取会话列表 V2TimConversationListFilter filter = V2TimConversationListFilter( conversationType: 0,//会话类型 nextSeq: 0,//拉取游标 count: 10,//拉取数量 markType: 0,//会话标记类型 groupName: \"groupName\");//拉取的群组名 //获取会话列表的高级接口 V2TimValueCallback getConversationListByFilterRes = await TencentImSDKPlugin.v2TIMManager .getConversationManager() .getConversationListByFilter(filter: filter);//会话列表过滤器 if (getConversationListByFilterRes.code == 0) { //拉取成功 bool? isFinished =getConversationListByFilterRes.data?.isFinished; //是否拉取完 String? nextSeq =getConversationListByFilterRes.data?.nextSeq; //后续分页拉取的游标 List? conversationList =getConversationListByFilterRes.data?.conversationList; //此次拉取到的消息列表 //如果没有拉取完，使用返回的nextSeq继续拉取直到isFinished为true if (!isFinished!) { V2TimConversationListFilter nextFilter = V2TimConversationListFilter( conversationType: 0, nextSeq: int.parse(nextSeq!),//使用返回的nextSeq继续拉取直到isFinished为true count: 10, markType: 0, groupName: \"groupName\"); V2TimValueCallback nextConversationListRes = await TencentImSDKPlugin.v2TIMManager .getConversationManager() .getConversationListByFilter( filter: nextFilter); } getConversationListByFilterRes.data?.conversationList?.forEach((element) { element ?.conversationID; //会话唯一 ID，如果是单聊，组成方式为 c2c_userID；如果是群聊，组成方式为 group_groupID。 element?.draftText; //草稿信息 element?.draftTimestamp; //草稿编辑时间，草稿设置的时候自动生成。 element?.faceUrl; //会话展示头像，群聊头像：群头像；单聊头像：对方头像。 element?.groupAtInfoList; //群会话 @ 信息列表，通常用于展示 “有人@我” 或 “@所有人” 这两种提醒状态。 element?.groupID; //当前群聊 ID，如果会话类型为群聊，groupID 会存储当前群的群 ID，否则为 null。 element?.groupType; //当前群聊类型，如果会话类型为群聊，groupType 为当前群类型，否则为 null。 element?.isPinned; //会话是否置顶 element?.lastMessage; //会话最后一条消息 element?.orderkey; //会话排序字段 element?.recvOpt; //消息接收选项 element ?.showName; //会话展示名称，群聊会话名称优先级：群名称 > 群 ID；单聊会话名称优先级：对方好友备注 > 对方昵称 > 对方的 userID。 element?.type; //会话类型，分为 C2C（单聊）和 Group（群聊）。 element?.unreadCount; //会话未读消息数，直播群（AVChatRoom）不支持未读计数，默认为 0。 element?.userID; //对方用户 ID，如果会话类型为单聊，userID 会存储对方的用户 ID，否则为 null。 }); } "},"api/v2timconversationmanager/getconversation.html":{"url":"api/v2timconversationmanager/getconversation.html","title":"getConversation","summary":"获取指定会话√","keywords":"","body":"getConversation 功能介绍 获取会话列表 参数详解 参数名称 参数类型 是否必填 描述 conversationID String 是 会话唯一 ID，如果是 C2C 单聊，组成方式为 c2c_userID，如果是群聊，组成方式为 group_groupID 返回值 V2TimValueCallback { code : int desc : String data : { conversationID : String type : ConversationType userID : String groupID : String showName : String faceUrl : String groupType : String unreadCount : int lastMessage; draftText : String draftTimestamp : int isPinned : bool recvOpt : int groupAtInfoList : List orderkey : int } } 返回值详解 名称 数值类型 描述 code int 请求结果错误码 desc String 请求结果描述 data V2TimConversation 此次拉取到的消息信息 代码示例 //获取指定会话 V2TimValueCallback getConversationtRes = await TencentImSDKPlugin.v2TIMManager .getConversationManager() .getConversation(conversationID: \"\");//会话唯一 ID，如果是 C2C 单聊，组成方式为 c2c_userID，如果是群聊，组成方式为 group_groupID if (getConversationtRes.code == 0) { //拉取成功 getConversationtRes.data?.conversationID;//会话唯一 ID，如果是单聊，组成方式为 c2c_userID；如果是群聊，组成方式为 group_groupID。 getConversationtRes.data?.draftText;//草稿信息 getConversationtRes.data?.draftTimestamp;//草稿编辑时间，草稿设置的时候自动生成。 getConversationtRes.data?.faceUrl;//会话展示头像，群聊头像：群头像；单聊头像：对方头像。 getConversationtRes.data?.groupAtInfoList;//群会话 @ 信息列表，通常用于展示 “有人@我” 或 “@所有人” 这两种提醒状态。 getConversationtRes.data?.groupID;//当前群聊 ID，如果会话类型为群聊，groupID 会存储当前群的群 ID，否则为 null。 getConversationtRes.data?.groupType;//当前群聊类型，如果会话类型为群聊，groupType 为当前群类型，否则为 null。 getConversationtRes.data?.isPinned;//会话是否置顶 getConversationtRes.data?.lastMessage;//会话最后一条消息 getConversationtRes.data?.orderkey;//会话排序字段 getConversationtRes.data?.recvOpt;//消息接收选项 getConversationtRes.data?.showName;//会话展示名称，群聊会话名称优先级：群名称 > 群 ID；单聊会话名称优先级：对方好友备注 > 对方昵称 > 对方的 userID。 getConversationtRes.data?.type;//会话类型，分为 C2C（单聊）和 Group（群聊）。 getConversationtRes.data?.unreadCount;//会话未读消息数，直播群（AVChatRoom）不支持未读计数，默认为 0。 getConversationtRes.data?.userID;//对方用户 ID，如果会话类型为单聊，userID 会存储对方的用户 ID，否则为 null。 } "},"api/v2timconversationmanager/getconversationlistbyconversaionids.html":{"url":"api/v2timconversationmanager/getconversationlistbyconversaionids.html","title":"getConversationListByConversaionIds","summary":"通过会话ID获取指定会话列表√","keywords":"","body":"getConversationListByConversaionIds 功能介绍 通过会话ID获取指定会话列表 参数详解 参数名称 参数类型 是否必填 描述 conversationIDList List 是 需要获取会话列表数据的会话id列表 返回值 V2TimValueCallback> { code : int desc : String data : List//拉取到的消息信息列表 } 返回值详解 名称 数值类型 描述 code int 请求结果错误码 desc String 请求结果描述 data ListV2TimConversation > 拉取到的消息信息列表 代码示例 //通过会话ID获取指定会话列表 V2TimValueCallback> getConversationListByConversaionIdsRes = await TencentImSDKPlugin .v2TIMManager .getConversationManager() .getConversationListByConversaionIds(conversationIDList: []);//需要获取会话列表数据的会话id列表 if (getConversationListByConversaionIdsRes.code == 0) { //拉取成功 getConversationListByConversaionIdsRes.data?.forEach((element) { element.conversationID; //会话唯一 ID，如果是单聊，组成方式为 c2c_userID；如果是群聊，组成方式为 group_groupID。 element.draftText; //草稿信息 element.draftTimestamp; //草稿编辑时间，草稿设置的时候自动生成。 element.faceUrl; //会话展示头像，群聊头像：群头像；单聊头像：对方头像。 element.groupAtInfoList; //群会话 @ 信息列表，通常用于展示 “有人@我” 或 “@所有人” 这两种提醒状态。 element.groupID; //当前群聊 ID，如果会话类型为群聊，groupID 会存储当前群的群 ID，否则为 null。 element.groupType; //当前群聊类型，如果会话类型为群聊，groupType 为当前群类型，否则为 null。 element.isPinned; //会话是否置顶 element.lastMessage; //会话最后一条消息 element.orderkey; //会话排序字段 element.recvOpt; //消息接收选项 element.showName; //会话展示名称，群聊会话名称优先级：群名称 > 群 ID；单聊会话名称优先级：对方好友备注 > 对方昵称 > 对方的 userID。 element.type; //会话类型，分为 C2C（单聊）和 Group（群聊）。 element.unreadCount; //会话未读消息数，直播群（AVChatRoom）不支持未读计数，默认为 0。 element.userID; //对方用户 ID，如果会话类型为单聊，userID 会存储对方的用户 ID，否则为 null。 }); } "},"api/v2timconversationmanager/deleteconversation.html":{"url":"api/v2timconversationmanager/deleteconversation.html","title":"deleteConversation","summary":"删除会话√","keywords":"","body":"deleteConversation 功能介绍 删除会话 在删除好友或退出群组后，如果不需要查看好友或群会话的历史消息，可以选择删除会话。 会话删除默认关闭多端同步，可在即时通信 IM 控制台 开启多端同步。 注意： 删除会话，会同时删除终端和服务器的历史消息，且无法恢复。 会话内的消息在本地删除的同时，在服务器也会同步删除。 参数详解 参数名称 参数类型 是否必填 描述 conversationID String 是 需要删除的会话id 返回值 V2TimCallback { code : int desc : String } 返回值详解 名称 数值类型 描述 code int 请求结果错误码 desc String 请求结果描述 代码示例 //删除会话 V2TimCallback deleteConversationRes = await TencentImSDKPlugin.v2TIMManager .getConversationManager() .deleteConversation( conversationID: \"\",//需要删除的会话id ); if (deleteConversationRes.code == 0) { //删除成功 } "},"api/v2timconversationmanager/setconversationdraft.html":{"url":"api/v2timconversationmanager/setconversationdraft.html","title":"setConversationDraft","summary":"设置会话草稿√","keywords":"","body":"setConversationDraft 功能介绍 设置会话草稿 在发送消息时，可能会遇到消息尚未编辑完，就要切换至其它聊天窗口的情况。这些未编辑完的消息可通过 setConversationDraft 接口保存，以便于下次回到这个聊天界面时，通过 V2TIMConversation 对象的 draftText 字段，获取到尚未编辑完的内容，继续编辑。 如果这个接口的 draftText 参数为空，表示取消草稿。 注意： 草稿仅支持文本内容。 草稿仅在本地保存，不会存储到服务器，因此不能多端同步，程序卸载重装会失效。 参数详解 参数名称 参数类型 是否必填 描述 conversationID String 是 需要设置草稿的会话id draftText String 否 草稿信息 返回值 V2TimCallback { code : int desc : String } 返回值详解 名称 数值类型 描述 code int 请求结果错误码 desc String 请求结果描述 代码示例 //设置会话草稿 V2TimCallback setConversationDraftRes = await TencentImSDKPlugin.v2TIMManager .getConversationManager() .setConversationDraft( conversationID: \"\",//需要设置草稿的会话id draftText: \"\",//草稿信息 ); if (setConversationDraftRes.code == 0) { //设置成功 } "},"api/v2timconversationmanager/setconversationcustomdata.html":{"url":"api/v2timconversationmanager/setconversationcustomdata.html","title":"setConversationCustomData","summary":"设置会话自定义消息√","keywords":"","body":"setConversationCustomData 功能介绍 设置会话自定义消息 注意： 4.0.8及以后版本支持。 参数详解 参数名称 参数类型 是否必填 描述 conversationIDList List 是 需要设置自定义消息的会话id列表 customData String 是 设置的自定义消息 返回值 V2TimValueCallback> { code : int desc : String data : List//设置请求结果列表 } 返回值详解 名称 数值类型 描述 code int 请求结果错误码 desc String 请求结果描述 data ListV2TimConversationOperationResult > 设置请求结果列表 代码示例 //设置会话自定义消息 V2TimValueCallback> setConversationCustomDataRes = await TencentImSDKPlugin.v2TIMManager .getConversationManager() .setConversationCustomData( customData: \"customData\",// 设置的自定义消息 conversationIDList: []);// 需要设置自定义消息的会话id列表 if (setConversationCustomDataRes.code == 0) { // 设置成功 setConversationCustomDataRes.data?.forEach((element) { element.conversationID;//被设置的会话id element.resultCode;//此条会话的请求结果错误码 element.resultInfo;//此条会话的请求结果描述 }); } "},"api/v2timconversationmanager/createconversationgroup.html":{"url":"api/v2timconversationmanager/createconversationgroup.html","title":"createConversationGroup","summary":"创建会话分组√","keywords":"","body":"createConversationGroup 功能介绍 创建会话分组 注意： 4.0.8及以后版本支持。 web不支持 参数详解 参数名称 参数类型 是否必填 描述 conversationIDList List 是 需要放入创建的会话分组的会话id列表 groupName String 是 创建的会话分组的名称 返回值 V2TimValueCallback> { code : int desc : String data : List//请求结果列表 } 返回值详解 名称 数值类型 描述 code int 请求结果错误码 desc String 请求结果描述 data ListV2TimConversationOperationResult > 请求结果列表 代码示例 //创建会话分组 V2TimValueCallback> setConversationCustomDataRes = await TencentImSDKPlugin.v2TIMManager .getConversationManager() .createConversationGroup( groupName: \"groupName\",// 创建的会话分组的名称 conversationIDList: []);// 需要放入创建的会话分组的会话id列表 if (setConversationCustomDataRes.code == 0) { // 创建设置成功 setConversationCustomDataRes.data?.forEach((element) { element.conversationID; // 被添加的会话id element.resultCode; // 此条会话的操作结果错误码 element.resultInfo; // 此条会话的操作结果描述 }); } "},"api/v2timconversationmanager/getconversationgroupList.html":{"url":"api/v2timconversationmanager/getconversationgroupList.html","title":"getConversationGroupList","summary":"获取会话分组列表","keywords":"","body":"getConversationGroupList 功能介绍 获取会话分组列表 注意： 4.0.8及以后版本支持。 web不支持 参数详解 此API无参数 返回值 V2TimValueCallback> { code : int desc : String data : List//会话分组名称列表 } 返回值详解 名称 数值类型 描述 code int 请求结果错误码 desc String 请求结果描述 data List 回话分组名称列表 代码示例 //获取会话分组列表 V2TimValueCallback> getConversationGroupListDataRes = await TencentImSDKPlugin.v2TIMManager .getConversationManager() .getConversationGroupList(); if (getConversationGroupListDataRes.code == 0) { // 查询成功 getConversationGroupListDataRes.data?.forEach((element) { element;//此条会话分组的名称 }); } "},"api/v2timconversationmanager/deleteconversationgroup.html":{"url":"api/v2timconversationmanager/deleteconversationgroup.html","title":"deleteConversationGroup","summary":"删除会话分组","keywords":"","body":"deleteConversationGroup 功能介绍 删除会话分组 注意： 4.0.8及以后版本支持。 web不支持 参数详解 参数名称 参数类型 是否必填 描述 groupName String 是 需要删除的会话分组的名称 返回值 V2TimCallback { code : int desc : String } 返回值详解 名称 数值类型 描述 code int 请求结果错误码 desc String 请求结果描述 代码示例 //删除会话分组 V2TimCallback deleteConversationGroupRes = await TencentImSDKPlugin .v2TIMManager .getConversationManager() .deleteConversationGroup(groupName: \"groupName\");//需要删除的会话分组的名称 if (deleteConversationGroupRes.code == 0) { // 删除成功 } "},"api/v2timconversationmanager/renameconversationgroup.html":{"url":"api/v2timconversationmanager/renameconversationgroup.html","title":"renameConversationGroup","summary":"重命名会话分组","keywords":"","body":"renameConversationGroup 功能介绍 重命名会话分组 注意： 4.0.8及以后版本支持。 web不支持 参数详解 参数名称 参数类型 是否必填 描述 oldName String 是 需要重命名的会话分组的名称 newName String 是 回话分组的新名称 返回值 V2TimCallback { code : int desc : String } 返回值详解 名称 数值类型 描述 code int 请求结果错误码 desc String 请求结果描述 代码示例 //重命名会话分组 V2TimCallback deleteConversationGroupRes = await TencentImSDKPlugin .v2TIMManager .getConversationManager() .renameConversationGroup( oldName: \"oldName\",//需要重命名的会话分组的名称 newName: \"newName\");//回话分组的新名称 if (deleteConversationGroupRes.code == 0) { // 重命名成功 } "},"api/v2timconversationmanager/addconversationstogroup.html":{"url":"api/v2timconversationmanager/addconversationstogroup.html","title":"addConversationsToGroup","summary":"添加会话到一个会话分组","keywords":"","body":"addConversationsToGroup 功能介绍 添加会话到一个会话分组 注意： 4.0.8及以后版本支持。 web不支持 参数详解 参数名称 参数类型 是否必填 描述 groupName String 是 需要被添加会话的会话分组的名称 conversationIDList List 是 被添加的会话id列表 返回值 V2TimValueCallback> { code : int desc : String data : List//请求结果列表 } 返回值详解 名称 数值类型 描述 code int 请求结果错误码 desc String 请求结果描述 data ListV2TimConversationOperationResult > 请求结果列表 代码示例 //添加会话到一个会话分组 V2TimValueCallback> addConversationsToGroupRes = await TencentImSDKPlugin.v2TIMManager .getConversationManager() .addConversationsToGroup( groupName: \"groupName\",//需要被添加会话的会话分组的名称 conversationIDList: []);//被添加的会话id列表 if (addConversationsToGroupRes.code == 0) { // 添加成功 addConversationsToGroupRes.data?.forEach((element) { element.conversationID; // 被添加的会话id element.resultCode; // 此条会话的操作结果错误码 element.resultInfo; // 此条会话的操作结果描述 }); } "},"api/v2timconversationmanager/deleteconversationsfromgroup.html":{"url":"api/v2timconversationmanager/deleteconversationsfromgroup.html","title":"deleteConversationsFromGroup","summary":"从一个会话分组中删除会话","keywords":"","body":"deleteConversationsFromGroup 功能介绍 从一个会话分组中删除会话 注意： 4.0.8及以后版本支持。 web不支持 参数详解 参数名称 参数类型 是否必填 描述 groupName String 是 需要被删除会话的会话分组的名称 conversationIDList List 是 被删除的会话id列表 返回值 V2TimValueCallback> { code : int desc : String data : List//请求结果列表 } 返回值详解 名称 数值类型 描述 code int 请求结果错误码 desc String 请求结果描述 data ListV2TimConversationOperationResult > 请求结果列表 代码示例 //从一个会话分组中删除会话 V2TimValueCallback> deleteConversationsFromGroupRes = await TencentImSDKPlugin.v2TIMManager .getConversationManager() .deleteConversationsFromGroup( groupName: \"groupName\", conversationIDList: []); if (deleteConversationsFromGroupRes.code == 0) { // 删除成功 deleteConversationsFromGroupRes.data?.forEach((element) { element.conversationID; // 被删除的会话id element.resultCode; // 此条会话的操作结果错误码 element.resultInfo; // 此条会话的操作结果描述 }); } "},"api/v2timconversationmanager/markconversation.html":{"url":"api/v2timconversationmanager/markconversation.html","title":"markConversation","summary":"标记会话","keywords":"","body":"markConversation 功能介绍 标记会话 flutter中使用markType可参考 V2TimConversationMarkType 如果已有标记不能满足您的需求，您可以自定义扩展标记，扩展标记需要满足以下两个条件： 扩展标记值不能和 V2TIMConversation 已有的标记值冲突 扩展标记值必须是 0x1L 注意： 4.0.8及以后版本支持。 web不支持 旗舰版支持此功能 参数详解 参数名称 参数类型 是否必填 描述 markType V2TimConversationMarkType/扩展标记值 是 标记类型 enableMark bool 是 是否支持标记功能 conversationIDList List 是 需要标记的会话id列表 返回值 V2TimValueCallback> { code : int desc : String data : List//请求结果列表 } 返回值详解 名称 数值类型 描述 code int 请求结果错误码 desc String 请求结果描述 data ListV2TimConversationOperationResult > 请求结果列表 代码示例 //标记会话 V2TimValueCallback> markConversationRes = await TencentImSDKPlugin.v2TIMManager .getConversationManager() .markConversation( markType: 0,//标记类型 enableMark: true,//是否支持标记功能 conversationIDList: []);//需要标记的会话id列表 if (markConversationRes.code == 0) { // 标记成功 markConversationRes.data?.forEach((element) { element.conversationID; // 被标记的会话id element.resultCode; // 此条会话的操作结果错误码 element.resultInfo; // 此条会话的操作结果描述 }); } "},"api/v2timconversationmanager/gettotalunreadmessagecount.html":{"url":"api/v2timconversationmanager/gettotalunreadmessagecount.html","title":"getTotalUnreadMessageCount","summary":"获取会话未读总数√","keywords":"","body":"getTotalUnreadMessageCount 功能介绍 获取会话未读总数 参数详解 此API无参数。 返回值 V2TimValueCallback { code : int desc : String data : int//会话未读总数 } 返回值详解 名称 数值类型 描述 code int 请求结果错误码 desc String 请求结果描述 data int 会话未读总数 代码示例 //获取会话未读总数 V2TimValueCallback getTotalUnreadMessageCountRes = await TencentImSDKPlugin.v2TIMManager .getConversationManager() .getTotalUnreadMessageCount(); if (getTotalUnreadMessageCountRes.code == 0) { //拉取成功 int? count = getTotalUnreadMessageCountRes.data;//会话未读总数 } "},"api/v2timconversationmanager/pinconversation.html":{"url":"api/v2timconversationmanager/pinconversation.html","title":"pinConversation","summary":"会话置顶√","keywords":"","body":"pinConversation 功能介绍 会话置顶 会话的顺序，按V2TimConversation 对象的 orderKey 字段排序。orderKey 字段是整型数，当发送新消息、接收新消息、设置草稿或置顶会话时，会话被激活，orderKey 字段会增大。 需要注意的是，被置顶会话始终排在非置顶会话的前面，如果同时置顶多个会话，这几个会话之间的相对顺序仍然会保持，例如，有 5 个依次排序的会话 1、2、3、4、5，同时置顶会话 2 和 3，置顶后的顺序是 2、3、1、4、5，显然，会话 2 和 3 排在最前面，并且会话 2 仍然排在 3 的前面。 调用 getConversationList 获取会话列表时，该接口会先返回置顶的会话，再返回未置顶的会话。您可以通过 V2TIMConversation 对象的 isPinned 字段，检查会话有没有置顶。 如果您事先调用了 addConversationListener添加会话监听器，就可以在 onConversationChanged 中获取到 V2TimConversation 对象的 isPinned 字段值。根据这个字段可以判断会话的置顶状态是否变化。 参数详解 参数名称 参数类型 是否必填 描述 conversationID String 是 需要修改置顶属性的会话id isPinned bool 是 是否置顶 返回值 V2TimCallback { code : int desc : String } 返回值详解 名称 数值类型 描述 code int 请求结果错误码 desc String 请求结果描述 代码示例 //会话置顶 V2TimCallback pinConversationRes = await TencentImSDKPlugin.v2TIMManager .getConversationManager() .pinConversation( conversationID: \"\",//需要修改置顶属性的会话id isPinned: true);//是否置顶 if (pinConversationRes.code == 0) { //设置置顶成功 } "},"api/v2timconversationmanager/setconversationlistener.html":{"url":"api/v2timconversationmanager/setconversationlistener.html","title":"setConversationListener","summary":"设置会话监听器√","keywords":"","body":"setConversationListener 功能介绍 添加关系链监听器 注意： 使用setConversationListener会覆盖会话监听器列表中最新设置的监听器。 参数详解 参数名称 参数类型 是否必填 描述 listener V2TimConversationListener 是 需要设置的会话监听器 返回值 void 返回值详解 此方法无返回值 代码示例 //设置会话监听器 V2TimConversationListener listener = V2TimConversationListener( onConversationChanged: (List conversationList) => { //某些会话的关键信息发生变化（未读计数发生变化、最后一条消息被更新等等），可以根据会话的 lastMessage -> timestamp 重新对会话列表做排序 //conversationList 改变的会话列表 }, onNewConversation: (List conversationList) => { //有新的会话（比如收到一个新同事发来的单聊消息、或者被拉入了一个新的群组中），可以根据会话的 lastMessage -> timestamp 重新对会话列表做排序 //conversationList 新的会话列表 }, onSyncServerFailed: () => { //同步服务器会话失败 }, onSyncServerFinish: () => { //同步服务器会话完成，如果会话有变更，会通过 onNewConversation | onConversationChanged 回调告知客户 }, onSyncServerStart: () => { //同步服务器会话开始，SDK 会在登录成功或者断网重连后自动同步服务器会话，您可以监听这个事件做一些 UI 进度展示操作。 }, onTotalUnreadMessageCountChanged: (int totalUnreadCount) => { //会话未读总数变更通知，未读总数会减去设置为免打扰的会话的未读数 //totalUnreadCount 会话未读总数 }, ); //添加会话监听器 TencentImSDKPlugin.v2TIMManager .getConversationManager() .setConversationListener(listener: listener);//需要设置的会话监听器 "},"api/v2timfriendshipmanager/":{"url":"api/v2timfriendshipmanager/","title":"V2TIMFriendshipManager","summary":"关系链接口，包含了好友的添加和删除，黑名单的添加和删除等逻辑","keywords":"","body":"V2TIMFriendshipManager V2TIMFriendshipManager功能介绍 关系链接口，包含了好友的添加和删除，黑名单的添加和删除等逻辑 API目录 API 描述 setFriendListener 设置关系链监听器 addFriendListener 添加关系链监听器 removeFriendListener 移除关系链监听器 getFriendList 获取好友列表 getFriendsInfo 获取指定好友资料 searchFriends 搜索好友 addFriend 添加好友 deleteFromFriendList 从好友列表删除好友 checkFriend 检查指定用户的好友关系 getFriendApplicationList 获取好友申请列表 acceptFriendApplication 同意好友申请 refuseFriendApplication 拒绝好友申请 deleteFriendApplication 删除好友申请 setFriendApplicationRead 设置好友申请已读 addToBlackList 添加用户到黑名单 deleteFromBlackList 把用户从黑名单中删除 getBlackList 获取黑名单列表 createFriendGroup 新建好友分组 deleteFriendsFromFriendGroup 从好友分组中删除好友 getFriendGroups 获取分组信息 deleteFriendGroup 删除好友分组 renameFriendGroup 修改好友分组的名称 addFriendsToFriendGroup 添加好友到一个好友分组 setFriendInfo 设置指定好友资料 "},"api/v2timfriendshipmanager/setfriendlistener.html":{"url":"api/v2timfriendshipmanager/setfriendlistener.html","title":"setFriendListener","summary":"设置关系链监听器√","keywords":"","body":"setFriendListener 功能介绍 设置关系链监听器 注意： 使用setFriendListener会覆盖关系链监听器列表中最新设置的监听器。 参数详解 参数名称 参数类型 是否必填 描述 listener V2TimFriendshipListener 是 需要设置的关系链监听器 返回值 void 返回值详解 此方法无返回值 代码示例 //设置关系链监听器 V2TimFriendshipListener listener = V2TimFriendshipListener( onBlackListAdd: (List infoList) async { //黑名单列表新增用户的回调 //infoList 新增的用户信息列表 }, onBlackListDeleted: (List userList) async { //黑名单列表删除的回调 //userList 被删除的用户id列表 }, onFriendApplicationListAdded: (List applicationList) async { //好友请求数量增加的回调 //applicationList 新增的好友请求信息列表 }, onFriendApplicationListDeleted: (List userIDList) async { //好友请求数量减少的回调 //减少的好友请求的请求用户id列表 }, onFriendApplicationListRead: () async { //好友请求已读的回调 }, onFriendInfoChanged: (List infoList) async { //好友信息改变的回调 //infoList 好友信息改变的好友列表 }, onFriendListAdded: (List users) async { //好友列表增加人员的回调 //users 新增的好友信息列表 }, onFriendListDeleted: (List userList) async { //好友列表减少人员的回调 //userList 减少的好友id列表 }, ); TencentImSDKPlugin.v2TIMManager .getFriendshipManager() .setFriendListener(listener: listener);//设置关系链监听器 "},"api/v2timfriendshipmanager/addfriendlistener.html":{"url":"api/v2timfriendshipmanager/addfriendlistener.html","title":"addFriendListener","summary":"添加关系链监听器√","keywords":"","body":"addFriendListener 功能介绍 添加关系链监听器 注意： 只有预先设置好关系链事件监听器，才能正常接收到下文中的各种事件通知。 使用addFriendListener会在所有的关系链监听器列表中新增一个关系链监听器。 参数详解 参数名称 参数类型 是否必填 描述 listener V2TimFriendshipListener 是 需要新增的关系链监听器 返回值 void 返回值详解 此方法无返回值 代码示例 //设置关系链监听器 V2TimFriendshipListener listener = V2TimFriendshipListener( onBlackListAdd: (List infoList) async { //黑名单列表新增用户的回调 //infoList 新增的用户信息列表 }, onBlackListDeleted: (List userList) async { //黑名单列表删除的回调 //userList 被删除的用户id列表 }, onFriendApplicationListAdded: (List applicationList) async { //好友请求数量增加的回调 //applicationList 新增的好友请求信息列表 }, onFriendApplicationListDeleted: (List userIDList) async { //好友请求数量减少的回调 //减少的好友请求的请求用户id列表 }, onFriendApplicationListRead: () async { //好友请求已读的回调 }, onFriendInfoChanged: (List infoList) async { //好友信息改变的回调 //infoList 好友信息改变的好友列表 }, onFriendListAdded: (List users) async { //好友列表增加人员的回调 //users 新增的好友信息列表 }, onFriendListDeleted: (List userList) async { //好友列表减少人员的回调 //userList 减少的好友id列表 }, ); TencentImSDKPlugin.v2TIMManager .getFriendshipManager() .addFriendListener(listener: listener);//添加关系链监听器 "},"api/v2timfriendshipmanager/removefriendlistener.html":{"url":"api/v2timfriendshipmanager/removefriendlistener.html","title":"removeFriendListener","summary":"移除关系链监听器√","keywords":"","body":"removeFriendListener 功能介绍 移除关系链监听器 注意： 若listener为null则删除所有的关系链监听器 参数详解 参数名称 参数类型 是否必填 描述 listener V2TimFriendshipListener 是 需要移除的关系链监听器 返回值 void 返回值详解 此方法无返回值 代码示例 //设置关系链监听器 V2TimFriendshipListener listener = V2TimFriendshipListener( onBlackListAdd: (List infoList) async { //黑名单列表新增用户的回调 //infoList 新增的用户信息列表 }, onBlackListDeleted: (List userList) async { //黑名单列表删除的回调 //userList 被删除的用户id列表 }, onFriendApplicationListAdded: (List applicationList) async { //好友请求数量增加的回调 //applicationList 新增的好友请求信息列表 }, onFriendApplicationListDeleted: (List userIDList) async { //好友请求数量减少的回调 //减少的好友请求的请求用户id列表 }, onFriendApplicationListRead: () async { //好友请求已读的回调 }, onFriendInfoChanged: (List infoList) async { //好友信息改变的回调 //infoList 好友信息改变的好友列表 }, onFriendListAdded: (List users) async { //好友列表增加人员的回调 //users 新增的好友信息列表 }, onFriendListDeleted: (List userList) async { //好友列表减少人员的回调 //userList 减少的好友id列表 }, ); TencentImSDKPlugin.v2TIMManager .getFriendshipManager() .addFriendListener(listener: listener);//添加关系链监听器 //添加成功之后可移除 TencentImSDKPlugin.v2TIMManager .getFriendshipManager() .removeFriendListener(listener: listener);//需要移除的关系链监听器 "},"api/v2timfriendshipmanager/getfriendlist.html":{"url":"api/v2timfriendshipmanager/getfriendlist.html","title":"getFriendList","summary":"获取好友列表√","keywords":"","body":"getFriendList 功能介绍 获取好友列表 参数详解 此API无参数 返回值 V2TimValueCallback> { code : int desc : String data : List//查询到的好友列表 } 返回值详解 名称 数值类型 描述 code int 请求结果错误码 desc String 请求结果描述 data ListV2TimFriendInfo > 查询到的好友列表 代码示例 //获取好友列表 V2TimValueCallback> getFriendListRes = await TencentImSDKPlugin.v2TIMManager .getFriendshipManager() .getFriendList(); if (getFriendListRes.code == 0) { // 查询成功 getFriendListRes.data?.forEach((element) { element.friendCustomInfo;//好友自定义字段 首先要在 控制台 (功能配置 -> 好友自定义字段) 配置好友自定义字段，然后再调用接口进行设置 element.friendGroups;//好友所在分组列表 element.friendRemark;//好友备注 element.userID;//用户的id element.userProfile?.allowType;//用户的好友验证方式 0:允许所有人加我好友 1:不允许所有人加我好友 2:加我好友需我确认 element.userProfile?.birthday;//用户生日 element.userProfile?.customInfo;//用户的自定义状态 element.userProfile?.faceUrl;//用户头像 url element.userProfile?.gender;//用户的性别 1:男 2:女 element.userProfile?.level;//用户的等级 element.userProfile?.nickName;//用户昵称 element.userProfile?.role;//用户的角色 element.userProfile?.selfSignature;//用户的签名 element.userProfile?.userID;//用户 ID }); } "},"api/v2timfriendshipmanager/getfriendsinfo.html":{"url":"api/v2timfriendshipmanager/getfriendsinfo.html","title":"getFriendsInfo","summary":"获取指定好友资料√","keywords":"","body":"getFriendsInfo 功能介绍 获取指定好友资料 从回调信息中通过 V2TIMFriendInfoResult 的 relation 字段可以得到该用户与自己的关系。 注意： userIDList 建议一次最大 100 个，因为数量过多可能会导致数据包太大被后台拒绝，后台限制数据包最大为 1M。 参数详解 参数名称 参数类型 是否必填 描述 userIDList List 是 需要查询的用户id列表 返回值 V2TimValueCallback> { code : int desc : String data : List//查询到的结果信息 } 返回值详解 名称 数值类型 描述 code int 请求结果错误码 desc String 请求结果描述 data ListV2TimFriendInfoResult > 查询到的结果信息 代码示例 // 获取指定好友资料 V2TimValueCallback> getFriendsInfoRes = await TencentImSDKPlugin.v2TIMManager .getFriendshipManager() .getFriendsInfo(userIDList: []);//需要查询的用户id列表 if (getFriendsInfoRes.code == 0) { // 查询成功 getFriendsInfoRes.data?.forEach((element) { element.relation;//好友类型 0:不是好友 1:对方在我的好友列表中 2:我在对方的好友列表中 3:互为好友 element.resultCode;//此条记录的查询结果错误码 element.resultInfo;//此条查询结果描述 //friendInfo为好友个人资料，如果不是好友，除了 userID 字段，其他字段都为空 element.friendInfo?.friendCustomInfo;//好友自定义字段 首先要在 控制台 (功能配置 -> 好友自定义字段) 配置好友自定义字段，然后再调用接口进行设置 element.friendInfo?.friendGroups;//好友所在分组列表 element.friendInfo?.friendRemark;//好友备注 element.friendInfo?.userID;//用户的id element.friendInfo?.userProfile?.allowType;//用户的好友验证方式 0:允许所有人加我好友 1:不允许所有人加我好友 2:加我好友需我确认 element.friendInfo?.userProfile?.birthday;//用户生日 element.friendInfo?.userProfile?.customInfo;//用户的自定义状态 element.friendInfo?.userProfile?.faceUrl;//用户头像 url element.friendInfo?.userProfile?.gender;//用户的性别 1:男 2:女 element.friendInfo?.userProfile?.level;//用户的等级 element.friendInfo?.userProfile?.nickName;//用户昵称 element.friendInfo?.userProfile?.role;//用户的角色 element.friendInfo?.userProfile?.selfSignature;//用户的签名 element.friendInfo?.userProfile?.userID;//用户 ID }); } "},"api/v2timfriendshipmanager/searchfriends.html":{"url":"api/v2timfriendshipmanager/searchfriends.html","title":"searchFriends","summary":"搜索好友√","keywords":"","body":"searchFriends 功能介绍 搜索好友 接口返回本地存储的用户资料，可以根据 V2TIMFriendInfoResult 中的 relation 来判断是否为好友。 参数详解 参数名称 参数类型 是否必填 描述 searchParam V2TimFriendSearchParam 是 搜索好友的搜索条件 返回值 V2TimValueCallback> { code : int desc : String data : List//查询到的结果信息 } 返回值详解 名称 数值类型 描述 code int 请求结果错误码 desc String 请求结果描述 data ListV2TimFriendInfoResult > 查询到的结果信息 代码示例 //搜索好友的搜索条件 V2TimFriendSearchParam searchParam = V2TimFriendSearchParam( isSearchNickName: true,//是否搜索昵称 isSearchRemark: true,//是否搜索备注 isSearchUserID: true,//是否搜索id keywordList: [],//关键字列表，最多支持5个。 ); V2TimValueCallback> searchFriendsRes = await TencentImSDKPlugin.v2TIMManager .getFriendshipManager() .searchFriends(searchParam: searchParam); //搜索好友的搜索条件 if (searchFriendsRes.code == 0) { // 查询成功 searchFriendsRes.data?.forEach((element) { element.relation; //好友类型 0:不是好友 1:对方在我的好友列表中 2:我在对方的好友列表中 3:互为好友 element.resultCode; //此条记录的查询结果错误码 element.resultInfo; //此条查询结果描述 //friendInfo为好友个人资料，如果不是好友，除了 userID 字段，其他字段都为空 element.friendInfo ?.friendCustomInfo; //好友自定义字段 首先要在 控制台 (功能配置 -> 好友自定义字段) 配置好友自定义字段，然后再调用接口进行设置 element.friendInfo?.friendGroups; //好友所在分组列表 element.friendInfo?.friendRemark; //好友备注 element.friendInfo?.userID; //用户的id element.friendInfo?.userProfile ?.allowType; //用户的好友验证方式 0:允许所有人加我好友 1:不允许所有人加我好友 2:加我好友需我确认 element.friendInfo?.userProfile?.birthday; //用户生日 element.friendInfo?.userProfile?.customInfo; //用户的自定义状态 element.friendInfo?.userProfile?.faceUrl; //用户头像 url element.friendInfo?.userProfile?.gender; //用户的性别 1:男 2:女 element.friendInfo?.userProfile?.level; //用户的等级 element.friendInfo?.userProfile?.nickName; //用户昵称 element.friendInfo?.userProfile?.role; //用户的角色 element.friendInfo?.userProfile?.selfSignature; //用户的签名 element.friendInfo?.userProfile?.userID; //用户 ID }); } "},"api/v2timfriendshipmanager/addfriend.html":{"url":"api/v2timfriendshipmanager/addfriend.html","title":"addFriend","summary":"添加好友√","keywords":"","body":"addFriend 功能介绍 添加好友 根据对方用户资料中的加好友需要验证与否，可以分为两种处理流程： 第一种：加好友不需要对方验证 用户 A 和 B 调用 setFriendListener 设置关系链监听器。 用户 B 通过 setSelfInfo 函数里的 allowType 字段设置为加好友不需要验证（V2TIM_FRIEND_ALLOW_ANY）。 用户 A 调用 addFriend 申请添加 B 为好友即可添加成功。添加成功后，按照申请参数 addType 的设置有两种情况： 如果设置为双向好友 (V2TIM_FRIEND_TYPE_BOTH) ，则用户 A 和 B 都会收到 onFriendListAdded 回调； 如果设置为单向好友（V2TIM_FRIEND_TYPE_SINGLE），则只有用户 A 收到 onFriendListAdded 回调。 第二种：加好友需要通过对方验证 用户 A 和 B 调用 setFriendListener 设置关系链监听。 用户 B 通过 setSelfInfo 函数里的 allowType 字段设置为加好友需要验证（V2TIM_FRIEND_NEED_CONFIRM）。 用户 A 调用 addFriend 申请添加 B 为好友，接口的成功回调参数中 resultCode 返回 30539，表示需要等待用户 B 的验证。同时 A 和 B 都会收到 onFriendApplicationListAdded 的回调。 用户 B 会收到 onFriendApplicationListAdded 的回调，当参数 type 为 V2TIM_FRIEND_APPLICATION_COME_IN 时，可以选择接受或者拒绝： B 调用 acceptFriendApplication 接受好友请求。如果参数接受类型为仅同意加单向好友（V2TIM_FRIEND_ACCEPT_AGREE）时: A 会收到 onFriendListAdded 回调，说明单向加好友成功。 B 会收到 onFriendApplicationListDeleted 回调，此时 B 成为 A 的好友，但 A 仍不是 B 的好友。 B 调用 acceptFriendApplication 接受好友请求，如果参数接受类型为同意加双向好友时（V2TIM_FRIEND_ACCEPT_AGREE_AND_ADD），A 和 B 都会收到 onFriendListAdded 回调，说明互相加好友成功。 B 调用 refuseFriendApplication 拒绝好友请求，双方都会收到 onFriendApplicationListDeleted 回调。 参数详解 参数名称 参数类型 是否必填 描述 userID String 是 需要添加的用户id remark String 否 添加的好友的好友备注 friendGroup String 否 添加好友所在分组 addWording String 否 添加好友附带信息 addSource String 否 添加来源描述 addType FriendTypeEnum 是 设置加好友类型，默认双向 返回值 V2TimValueCallback { code : int desc : String data : { resultCode : int//添加操作请求错误码 resultInfo : String//添加操作请求结果描述 userID : String//用户id } } 返回值详解 名称 数值类型 描述 code int 请求结果错误码 desc String 请求结果描述 data V2TimFriendOperationResult 添加请求结果 代码示例 //添加好友 V2TimValueCallback addFriendRes = await TencentImSDKPlugin.v2TIMManager.getFriendshipManager().addFriend( userID: \"userID\", //需要添加的用户id remark: \"\", //添加的好友的好友备注 friendGroup: \"\", //添加好友所在分组 addWording: \"\", //添加好友附带信息 addSource: \"\", //添加来源描述 addType: FriendTypeEnum.V2TIM_FRIEND_TYPE_BOTH, //设置加好友类型，默认双向 ); if (addFriendRes.code == 0) { // 添加请求发送成功 addFriendRes.data?.resultCode; //添加结果错误码 addFriendRes.data?.resultInfo; //添加结果描述 addFriendRes.data?.userID; //被添加的用户id } "},"api/v2timfriendshipmanager/deletefromfriendlist.html":{"url":"api/v2timfriendshipmanager/deletefromfriendlist.html","title":"deleteFromFriendList","summary":"从好友列表删除好友√","keywords":"","body":"deleteFromFriendList 功能介绍 添加好友 ID 建议一次最大 100 个，因为数量过多可能会导致数据包太大被后台拒绝，后台限制数据包最大为 1M。 参数详解 参数名称 参数类型 是否必填 描述 userIDList List 是 需要删除的用户id列表 deleteType FriendTypeEnum 是 删除操作的类型 返回值 V2TimValueCallback> { code : int desc : String data : List } 返回值详解 名称 数值类型 描述 code int 请求结果错误码 desc String 请求结果描述 data ListV2TimFriendOperationResult > 删除请求结果列表 代码示例 //从好友列表删除好友 V2TimValueCallback> deleteFromFriendListRes = await TencentImSDKPlugin.v2TIMManager .getFriendshipManager() .deleteFromFriendList( userIDList: [],//需要删除的用户id列表 deleteType: FriendTypeEnum.V2TIM_FRIEND_TYPE_BOTH,//删除操作的类型 ); if (deleteFromFriendListRes.code == 0) { // 删除请求发送成功 deleteFromFriendListRes.data?.forEach((element) { element.resultCode;//此条删除操作的错误码 element.resultInfo;//此条删除操作的结果描述 element.userID;//此条删除操作的用户id }); } "},"api/v2timfriendshipmanager/checkfriend.html":{"url":"api/v2timfriendshipmanager/checkfriend.html","title":"checkFriend","summary":"检查指定用户的好友关系√","keywords":"","body":"checkFriend 功能介绍 检查指定用户的好友关系 参数详解 参数名称 参数类型 是否必填 描述 userIDList List 是 需要检查的用户id列表 checkType FriendTypeEnum 是 检查的类型 返回值 V2TimValueCallback> { code : int desc : String data : List } 返回值详解 名称 数值类型 描述 code int 请求结果错误码 desc String 请求结果描述 data ListV2TimFriendCheckResult > 检查请求结果列表 代码示例 //检查指定用户的好友关系 V2TimValueCallback> checkFriendRes = await TencentImSDKPlugin.v2TIMManager .getFriendshipManager() .checkFriend( userIDList: [],//需要检查的用户id列表 checkType: FriendTypeEnum.V2TIM_FRIEND_TYPE_BOTH,//检查的类型 ); if (checkFriendRes.code == 0) { // 查询发送成功 checkFriendRes.data?.forEach((element) { element.resultCode;//检查结果错误码 element.resultInfo;//检查结果信息 element.resultType;//与查询用户的关系类型 0:不是好友 1:对方在我的好友列表中 2:我在对方的好友列表中 3:互为好友 element.userID;//用户id }); } "},"api/v2timfriendshipmanager/getfriendapplicationlist.html":{"url":"api/v2timfriendshipmanager/getfriendapplicationlist.html","title":"getFriendApplicationList","summary":"获取好友申请列表√","keywords":"","body":"getFriendApplicationList 功能介绍 获取好友申请列表 参数详解 此API无参数 返回值 V2TimValueCallback { code : int desc : String data : { friendApplicationList : List//好友申请列表 unreadCount : int//未读申请数量 } } 返回值详解 名称 数值类型 描述 code int 请求结果错误码 desc String 请求结果描述 data V2TimFriendApplicationResult 好友申请列表信息 代码示例 //获取好友申请列表 V2TimValueCallback getFriendApplicationListRes = await TencentImSDKPlugin.v2TIMManager .getFriendshipManager() .getFriendApplicationList(); if (getFriendApplicationListRes.code == 0) { // 查询成功 getFriendApplicationListRes.data?.unreadCount;//未读申请数量 getFriendApplicationListRes.data?.friendApplicationList ?.forEach((element) { element?.addSource;//申请添加来源 flutter会在发出请求的source前添加AddSource_Type_ element?.addTime;//申请时间 element?.addWording;//申请添加的信息 element?.faceUrl;//申请好友头像Url element?.nickname;//申请用户昵称 element?.type;//申请好友类型 element?.userID;//申请用户id }); } "},"api/v2timfriendshipmanager/acceptfriendapplication.html":{"url":"api/v2timfriendshipmanager/acceptfriendapplication.html","title":"acceptFriendApplication","summary":"同意好友申请√","keywords":"","body":"acceptFriendApplication 功能介绍 同意好友申请 参数详解 参数名称 参数类型 是否必填 描述 responseType FriendResponseTypeEnum 是 建立好友关系时选择单向/双向好友关系 type FriendApplicationTypeEnum 是 加好友类型 userID String 是 同意好友的用户id 返回值 V2TimValueCallback { code : int desc : String data : { resultCode : int//操作结果错误码 resultInfo : String//操作结果描述 userID : String//同意好友的id } } 返回值详解 名称 数值类型 描述 code int 请求结果错误码 desc String 请求结果描述 data V2TimFriendOperationResult 同意好友申请请求的返回信息 代码示例 //获取好友申请列表 V2TimValueCallback getFriendApplicationListRes = await TencentImSDKPlugin.v2TIMManager .getFriendshipManager() .getFriendApplicationList(); if (getFriendApplicationListRes.code == 0) { // 查询成功 getFriendApplicationListRes.data?.unreadCount; //未读申请数量 getFriendApplicationListRes.data?.friendApplicationList ?.forEach((element) async { //同意好友申请 V2TimValueCallback acceptFriendApplicationRes = await TencentImSDKPlugin.v2TIMManager .getFriendshipManager() .acceptFriendApplication( responseType: FriendResponseTypeEnum .V2TIM_FRIEND_ACCEPT_AGREE, //建立好友关系时选择单向/双向好友关系 type: FriendApplicationTypeEnum.values[element!.type], //加好友类型 要与getApplicationList查询到的type相同，否则会报错。 userID: \"\"); //同意好友的用户id if (acceptFriendApplicationRes.code == 0) { // 同意成功 acceptFriendApplicationRes.data?.resultCode; //操作结果错误码 acceptFriendApplicationRes.data?.resultInfo; //操作结果描述 acceptFriendApplicationRes.data?.userID; //同意好友的id } }); } "},"api/v2timfriendshipmanager/refusefriendapplication.html":{"url":"api/v2timfriendshipmanager/refusefriendapplication.html","title":"refuseFriendApplication","summary":"拒绝好友申请√","keywords":"","body":"refuseFriendApplication 功能介绍 拒绝好友申请 参数详解 参数名称 参数类型 是否必填 描述 type FriendApplicationTypeEnum 是 拒绝好友类型 userID String 是 拒绝好友的用户id 返回值 V2TimValueCallback { code : int desc : String data : { resultCode : int//操作结果错误码 resultInfo : String//操作结果描述 userID : String//拒绝好友的id } } 返回值详解 名称 数值类型 描述 code int 请求结果错误码 desc String 请求结果描述 data V2TimFriendOperationResult 拒绝好友申请请求的返回信息 代码示例 //获取好友申请列表 V2TimValueCallback getFriendApplicationListRes = await TencentImSDKPlugin.v2TIMManager .getFriendshipManager() .getFriendApplicationList(); if (getFriendApplicationListRes.code == 0) { // 查询成功 getFriendApplicationListRes.data?.unreadCount; //未读申请数量 getFriendApplicationListRes.data?.friendApplicationList ?.forEach((element) async { V2TimValueCallback refuseFriendApplicationRes = await TencentImSDKPlugin.v2TIMManager .getFriendshipManager() .refuseFriendApplication( type: FriendApplicationTypeEnum .values[element!.type], //拒绝好友类型 userID: \"\"); //拒绝好友的用户id if (refuseFriendApplicationRes.code == 0) { // 拒绝成功 refuseFriendApplicationRes.data?.resultCode; //操作结果错误码 refuseFriendApplicationRes.data?.resultInfo; //操作结果描述 refuseFriendApplicationRes.data?.userID; //拒绝好友的id } }); } "},"api/v2timfriendshipmanager/deletefriendapplication.html":{"url":"api/v2timfriendshipmanager/deletefriendapplication.html","title":"deleteFriendApplication","summary":"删除好友申请√","keywords":"","body":"deleteFriendApplication 功能介绍 删除好友申请 参数详解 参数名称 参数类型 是否必填 描述 type FriendApplicationTypeEnum 是 加好友类型 userID String 是 被删除好友申请的用户id 返回值 V2TimCallback { code : int desc : String } 返回值详解 名称 数值类型 描述 code int 请求结果错误码 desc String 请求结果描述 代码示例 //删除好友申请 V2TimCallback deleteFriendApplicationRes = await TencentImSDKPlugin .v2TIMManager .getFriendshipManager() .deleteFriendApplication( type: FriendApplicationTypeEnum.V2TIM_FRIEND_APPLICATION_BOTH,//加好友类型 要与getApplicationList查询到的type相同，否则会报错。 userID: \"\",//被删除好友申请的用户id ); if (deleteFriendApplicationRes.code == 0) { // 删除成功 } "},"api/v2timfriendshipmanager/setfriendapplicationread.html":{"url":"api/v2timfriendshipmanager/setfriendapplicationread.html","title":"setFriendApplicationRead","summary":"设置好友申请已读√","keywords":"","body":"setFriendApplicationRead 功能介绍 设置好友申请已读 参数详解 此API无参数 返回值 V2TimCallback { code : int desc : String } 返回值详解 名称 数值类型 描述 code int 请求结果错误码 desc String 请求结果描述 代码示例 //设置好友申请已读 V2TimCallback setFriendApplicationReadRes = await TencentImSDKPlugin .v2TIMManager .getFriendshipManager() .setFriendApplicationRead(); if (setFriendApplicationReadRes.code == 0) { // 设置成功 } "},"api/v2timfriendshipmanager/addtoblacklist.html":{"url":"api/v2timfriendshipmanager/addtoblacklist.html","title":"addToBlackList","summary":"添加用户到黑名单√","keywords":"","body":"addToBlackList 功能介绍 添加用户到黑名单 被拉黑的用户默认不会感知到 “被拉黑” 的状态，消息发送后不会返回已被对方拉黑的错误码。 如果希望被拉黑的用户在发消息时返回已被对方拉黑的错误提醒，请在 即时通信 IM 控制台 >【功能配置】>【登录与消息】>【黑名单检查】中关闭 ”发送消息后展示发送成功“。关闭后，被拉黑的用户在发送消息时，SDK 会报 20007 错误码。 参数详解 参数名称 参数类型 是否必填 描述 userIDList List 是 需要加入黑名单的好友id列表 返回值 V2TimValueCallback> { code : int desc : String data : List//添加黑名单请求的结果信息 } 返回值详解 名称 数值类型 描述 code int 请求结果错误码 desc String 请求结果描述 data ListV2TimFriendOperationResult > 添加黑名单请求的结果信息 代码示例 //添加好友到黑名单 V2TimValueCallback> addToBlackListRes = await TencentImSDKPlugin.v2TIMManager .getFriendshipManager() .addToBlackList( userIDList: [] //需要加入黑名单的好友id列表 ); if (addToBlackListRes.code == 0) { // 添加成功 addToBlackListRes.data?.forEach((element) { element.resultCode;//此条记录的错误码 element.resultInfo;//此条记录的操作结果描述 element.userID;//被操作的用户id }); } "},"api/v2timfriendshipmanager/deletefromblacklist.html":{"url":"api/v2timfriendshipmanager/deletefromblacklist.html","title":"deleteFromBlackList","summary":"把用户从黑名单中删除√","keywords":"","body":"deleteFromBlackList 功能介绍 把用户从黑名单中删除 参数详解 参数名称 参数类型 是否必填 描述 userIDList List 是 需要移出黑名单的好友id列表 返回值 V2TimValueCallback> { code : int desc : String data : List//把用户从黑名单中删除请求的结果信息 } 返回值详解 名称 数值类型 描述 code int 请求结果错误码 desc String 请求结果描述 data ListV2TimFriendOperationResult > 把用户从黑名单中删除请求的结果信息 代码示例 //把用户从黑名单中删除 V2TimValueCallback> deleteFromBlackListRes = await TencentImSDKPlugin.v2TIMManager .getFriendshipManager() .deleteFromBlackList( userIDList: [] //需要移出黑名单的好友id列表 ); if (deleteFromBlackListRes.code == 0) { // 删除成功 deleteFromBlackListRes.data?.forEach((element) { element.resultCode;//此条记录的错误码 element.resultInfo;//此条记录的操作结果描述 element.userID;//被操作的用户id }); } "},"api/v2timfriendshipmanager/getblacklist.html":{"url":"api/v2timfriendshipmanager/getblacklist.html","title":"getBlackList","summary":"获取黑名单列表√","keywords":"","body":"getBlackList 功能介绍 获取黑名单列表 参数详解 此API无参数 返回值 V2TimValueCallback> { code : int desc : String data : List//获取的黑名单列表 } 返回值详解 名称 数值类型 描述 code int 请求结果错误码 desc String 请求结果描述 data ListV2TimFriendInfo > 获取的黑名单列表 代码示例 //获取黑名单列表 V2TimValueCallback> getBlackListRes = await TencentImSDKPlugin.v2TIMManager .getFriendshipManager() .getBlackList(); if (getBlackListRes.code == 0) { // 查询成功 getBlackListRes.data?.forEach((element) { element.friendCustomInfo;//用户自定义属性 element.friendGroups;//用户的好友分组 element.friendRemark;//用户备注 element.userID;//此条记录用户id element.userProfile?.allowType; //用户的好友验证方式 0:允许所有人加我好友 1:不允许所有人加我好友 2:加我好友需我确认 element.userProfile?.birthday; //用户生日 element.userProfile?.customInfo; //用户的自定义状态 element.userProfile?.faceUrl; //用户头像 url element.userProfile?.gender; //用户的性别 1:男 2:女 element.userProfile?.level; //用户的等级 element.userProfile?.nickName; //用户昵称 element.userProfile?.role; //用户的角色 element.userProfile?.selfSignature; //用户的签名 element.userProfile?.userID; //用户 ID }); } "},"api/v2timfriendshipmanager/createfriendgroup.html":{"url":"api/v2timfriendshipmanager/createfriendgroup.html","title":"createFriendGroup","summary":"新建好友分组√","keywords":"","body":"createFriendGroup 功能介绍 新建好友分组 参数详解 参数名称 参数类型 是否必填 描述 groupName String 是 新建的分组名称 userIDList List 否 要添加到分组中的好友 userID 列表 返回值 V2TimValueCallback> { code : int desc : String data : List } 返回值详解 名称 数值类型 描述 code int 请求结果错误码 desc String 请求结果描述 data ListV2TimFriendOperationResult > 新建结果列表 代码示例 // 新建好友分组 V2TimValueCallback> createFriendGroupRes = await TencentImSDKPlugin.v2TIMManager .getFriendshipManager() .createFriendGroup( userIDList: [],//要添加到分组中的好友 userID 列表 groupName: \"\",//新建的分组名称 ); if (createFriendGroupRes.code == 0) { // 新建请求发送成功 createFriendGroupRes.data?.forEach((element) { element.resultCode;//此条操作的错误码 element.resultInfo;//此条操作的结果描述 element.userID;//此条被操作的用户id }); } "},"api/v2timfriendshipmanager/deletefriendsfromfriendgroup.html":{"url":"api/v2timfriendshipmanager/deletefriendsfromfriendgroup.html","title":"deleteFriendsFromFriendGroup","summary":"从好友分组中删除好友√","keywords":"","body":"deleteFriendsFromFriendGroup 功能介绍 从好友分组中删除好友 参数详解 参数名称 参数类型 是否必填 描述 groupName String 是 需要删除的群组名称 userIDList List 是 需要删除的用户id列表 返回值 V2TimValueCallback> { code : int desc : String data : List//操作结果说明列表 } 返回值详解 名称 数值类型 描述 code int 请求结果错误码 desc String 请求结果描述 data ListV2TimFriendOperationResult > 操作结果说明列表 代码示例 // 从好友分组中删除好友（只是将好友移出此列表，不删除好友关系） V2TimValueCallback> deleteFriendsFromFriendGroupRes = await TencentImSDKPlugin.v2TIMManager .getFriendshipManager() .deleteFriendsFromFriendGroup(groupName: \"\", //需要删除的群组名称 userIDList: [] //需要删除的用户id列表 ); if (deleteFriendsFromFriendGroupRes.code == 0) { // 添加成功 deleteFriendsFromFriendGroupRes.data?.forEach((element) { element.resultCode; //此条记录的错误码 element.resultInfo; //此条记录操作结果说明 element.userID; //此条记录被操作的用户id }); } # dart "},"api/v2timfriendshipmanager/getfriendgroups.html":{"url":"api/v2timfriendshipmanager/getfriendgroups.html","title":"getFriendGroups","summary":"获取分组信息√","keywords":"","body":"getFriendGroups 功能介绍 修改好友分组的名称 groupNameList 传入 null 获得所有分组信息。 参数详解 参数名称 参数类型 是否必填 描述 groupNameList List 是 要获取信息的好友分组名称列表 返回值 V2TimValueCallback> { code : int desc : String data : List// 查询到的分组信息 } 返回值详解 名称 数值类型 描述 code int 请求结果错误码 desc String 请求结果描述 data ListV2TimFriendGroup > 查询到的分组信息 代码示例 // 获取分组信息 V2TimValueCallback> getFriendGroupsRes = await TencentImSDKPlugin.v2TIMManager .getFriendshipManager() .getFriendGroups(groupNameList: []);//要获取信息的好友分组名称列表 if (getFriendGroupsRes.code == 0) { // 查询成功 getFriendGroupsRes.data?.forEach((element) { element.friendCount;//此组的好友数 element.friendIDList;//此组的好友id列表 element.name;//此组的名称 }); } "},"api/v2timfriendshipmanager/deletefriendgroup.html":{"url":"api/v2timfriendshipmanager/deletefriendgroup.html","title":"deleteFriendGroup","summary":"删除好友分组√","keywords":"","body":"deleteFriendGroup 功能介绍 删除好友分组 参数详解 参数名称 参数类型 是否必填 描述 groupNameList List 是 需要删除的群组名称 返回值 V2TimCallback { code : int desc : String } 返回值详解 名称 数值类型 描述 code int 请求结果错误码 desc String 请求结果描述 代码示例 // 删除好友分组 V2TimCallback deleteFriendGroupRes = await TencentImSDKPlugin.v2TIMManager .getFriendshipManager() .deleteFriendGroup(groupNameList: []);//需要删除的群组名称 if (deleteFriendGroupRes.code == 0) { // 删除成功 } "},"api/v2timfriendshipmanager/renamefriendgroup.html":{"url":"api/v2timfriendshipmanager/renamefriendgroup.html","title":"renameFriendGroup","summary":"修改好友分组的名称√","keywords":"","body":"renameFriendGroup 功能介绍 修改好友分组的名称 参数详解 参数名称 参数类型 是否必填 描述 oldName String 是 旧的分组名称 newName String 是 新的分组名称 返回值 V2TimCallback { code : int desc : String } 返回值详解 名称 数值类型 描述 code int 请求结果错误码 desc String 请求结果描述 代码示例 //修改好友分组的名称 V2TimCallback renameFriendGroupRes = await TencentImSDKPlugin.v2TIMManager .getFriendshipManager() .renameFriendGroup( oldName: \"\", //旧的分组名称 newName: \"\", //新的分组名称 ); if (renameFriendGroupRes.code == 0) { // 修改成功 } "},"api/v2timfriendshipmanager/addfriendstofriendgroup.html":{"url":"api/v2timfriendshipmanager/addfriendstofriendgroup.html","title":"addFriendsToFriendGroup","summary":"添加好友到一个好友分组√","keywords":"","body":"addFriendsToFriendGroup 功能介绍 添加好友到一个好友分组 参数详解 参数名称 参数类型 是否必填 描述 groupName String 是 分组名称 userIDList List 是 需要加入分组的好友id列表 返回值 V2TimValueCallback> { code : int desc : String data : List//添加分组请求的结果信息 } 返回值详解 名称 数值类型 描述 code int 请求结果错误码 desc String 请求结果描述 data ListV2TimFriendOperationResult > 添加分组请求的结果信息 代码示例 //添加好友到一个好友分组 V2TimValueCallback> addFriendsToFriendGroupRes = await TencentImSDKPlugin.v2TIMManager .getFriendshipManager() .addFriendsToFriendGroup( groupName: \"\", //分组名称 userIDList: [] //需要加入分组的好友id ); if (addFriendsToFriendGroupRes.code == 0) { // 添加成功 addFriendsToFriendGroupRes.data?.forEach((element) { element.resultCode;//此条记录的错误码 element.resultInfo;//此条记录的操作结果描述 element.userID;//此条记录被操作的用户id }); } "},"api/v2timfriendshipmanager/setfriendinfo.html":{"url":"api/v2timfriendshipmanager/setfriendinfo.html","title":"setFriendInfo","summary":"设置指定好友资料√","keywords":"","body":"setFriendInfo 功能介绍 设置指定好友资料 参数详解 参数名称 参数类型 是否必填 描述 userID String 是 需要修改的用户id friendRemark String 否 修改的好友备注 friendCustomInfo StriMap 否 修改的好友自定义信息 返回值 V2TimCallback { code : int desc : String } 返回值详解 名称 数值类型 描述 code int 请求结果错误码 desc String 请求结果描述 代码示例 //设置指定好友资料 V2TimCallback setFriendInfoRes = await TencentImSDKPlugin.v2TIMManager .getFriendshipManager() .setFriendInfo( userID: \"userID\",//需要修改的用户id friendRemark: \"\",//修改的好友备注 friendCustomInfo: {\"custom\": \"custom\"});//修改的好友自定义信息 旗舰版支持此属性 if (setFriendInfoRes.code == 0) { // 修改成功 } "},"api/v2timofflinepushmanager/":{"url":"api/v2timofflinepushmanager/","title":"V2TIMOfflinePushManager","summary":"提供离线推送相关的接口","keywords":"","body":"V2TIMOfflinePushManager V2TIMOfflinePushManager功能介绍 提供离线推送相关的接口 API目录 API 描述 doBackground APP 检测到应用退后台时可以调用此接口 doForeground APP 检测到应用进前台时可以调用此接口 setOfflinePushConfig 设置离线推送配置信息 "},"api/v2timofflinepushmanager/dobackground.html":{"url":"api/v2timofflinepushmanager/dobackground.html","title":"doBackground","summary":"APP 检测到应用退后台时可以调用此接口√","keywords":"","body":"doBackground 功能介绍 APP 检测到应用退后台时可以调用此接口 监听应用退后台方式可见文档。 如果配置了离线推送，会收到厂商的离线推送通道下发的通知栏消息。 参数详解 参数名称 参数类型 是否必填 描述 unreadCount int 是 会话未读数量 返回值 V2TimCallback { code : int desc : String } 返回值详解 名称 数值类型 描述 code int 请求结果错误码 desc String 请求结果描述 代码示例 //APP 检测到应用退后台时可以调用此接口 V2TimCallback doBackgroundRes = await TencentImSDKPlugin.v2TIMManager .getOfflinePushManager() .doBackground(unreadCount: 0); if (doBackgroundRes.code == 0) { //调用成功后的逻辑 } "},"api/v2timofflinepushmanager/doforeground.html":{"url":"api/v2timofflinepushmanager/doforeground.html","title":"doForeground","summary":"APP 检测到应用进前台时可以调用此接口√","keywords":"","body":"doForeground 功能介绍 APP 检测到应用退后台时可以调用此接口 监听应用进前台方式可见文档。 如果配置了离线推送，会收到厂商的离线推送通道下发的通知栏消息。 参数详解 此API无参数 返回值 V2TimCallback { code : int desc : String } 返回值详解 名称 数值类型 描述 code int 请求结果错误码 desc String 请求结果描述 代码示例 //doForeground V2TimCallback doForegroundRes = await TencentImSDKPlugin.v2TIMManager .getOfflinePushManager() .doForeground(); if (doForegroundRes.code == 0) { //调用成功后的逻辑 } "},"api/v2timofflinepushmanager/setofflinepushconfig.html":{"url":"api/v2timofflinepushmanager/setofflinepushconfig.html","title":"setOfflinePushConfig","summary":"设置离线推送配置信息√","keywords":"","body":"setOfflinePushConfig 功能介绍 设置离线推送配置信息 参数详解 参数名称 参数类型 是否必填 描述 businessID double 是 businessID 为对应厂商的证书 ID token String 是 应合规要求，在用户同意隐私协议登录成功后，分别初始化注册各个厂商推送服务，并在注册结果回调处保存注册成功后的 token， isTPNSToken bool 否 传false即可。 返回值 V2TimCallback { code : int desc : String } 返回值详解 名称 数值类型 描述 code int 请求结果错误码 desc String 请求结果描述 代码示例 //设置离线推送配置信息 V2TimCallback setOfflinePushConfigRes = await TencentImSDKPlugin .v2TIMManager .getOfflinePushManager() .setOfflinePushConfig( businessID: 0,//businessID 为对应厂商的证书 ID token: \"\",//应合规要求，在用户同意隐私协议登录成功后，分别初始化注册各个厂商推送服务，并在注册结果回调处保存注册成功后的 token isTPNSToken: false);//传false即可。 if (setOfflinePushConfigRes.code == 0) { // 设置成功 } "},"api/guan-jian-lei/":{"url":"api/guan-jian-lei/","title":"关键类","keywords":"","body":"关键类 关键类包含内容说明 IM API中使用到的数据类型 关键类目录 描述 Group 群组相关类型 User 用户相关类型 Message 消息相关类型 Listener 监听器相关类型 Topic 话题相关类型 V2TimValueCallback 携带请求结果与返回数据的类 V2TimCallback 只携带请求结果的类 "},"api/guan-jian-lei/group/":{"url":"api/guan-jian-lei/group/","title":"Group","summary":"群组相关类型","keywords":"","body":"Group Group包含内容说明 群组相关类型 Group包含类型目录 类型名称 描述 V2TimGroupMember 群组用户信息（只包含ID与角色） V2TimGroupMemberInfoResult 查询群组用户信息结果 V2TimGroupAtInfo 群组@信息 V2TimGroupInfo 群资料 V2TimGroupApplicationResult 加群申请列表 V2TimGroupApplication 群申请信息 V2TimGroupMemberChangeInfo 群tips，成员变更信息 V2TimGroupInfoResult 获取群组资料结果 V2TimGroupChangeInfo 群 tips，群变更信息 V2TimGroupMemberSearchParam 群成员搜索参数 V2TimTopicOperationResult 话题操作结果（添加、删除等） V2TimGroupMemberOperationResult 邀请其他人入群的操作结果 V2TimGroupTipsElem 群 tips 消息会存消息列表，群里所有的人都会展示，比如 xxx 进群，xxx 退群，xxx 群资料被修改了等 V2TimGroupSearchParam 群搜索参数 V2TimGroupMessageReadMemberList 群消息已读群成员列表 V2GroupMemberInfoSearchResult 查询群组用户信息单元结果 V2TimGroupMemberFullInfo 群组成员详细信息 V2TimGroupMemberInfo 群成员基本资料 EnumUtils 根据GroupMemberRoleTypeEnum生成GroupMemberRoleType "},"api/guan-jian-lei/group/v2timgroupmember.html":{"url":"api/guan-jian-lei/group/v2timgroupmember.html","title":"V2TimGroupMember","summary":"群组用户信息","keywords":"","body":"V2TimGroupMember 关键类描述 群组用户信息 参数 userID 参数类型 : String 参数描述 : 群成员id role 参数类型 : GroupMemberRoleTypeEnum 参数描述 : 群成员角色 toJson 参数类型 : Map toJson() 参数描述 : 返回群组用户信息的JSON格式 "},"api/guan-jian-lei/group/v2timgroupmemberinforesult.html":{"url":"api/guan-jian-lei/group/v2timgroupmemberinforesult.html","title":"V2TimGroupMemberInfoResult","summary":"查询群组用户信息结果","keywords":"","body":"V2TimGroupMemberInfoResult 关键类描述 查询群组用户信息结果 参数 nextSeq 参数类型 : String 参数描述 : 分页拉取的 seq 如果为 0 表示拉取结束 memberInfoList 参数类型 : ListV2TimGroupMemberFullInfo > 参数描述 : 用户信息列表 toJson 参数类型 : Map toJson() 参数描述 : 返回查询群组用户信息结果的JSON格式 "},"api/guan-jian-lei/group/v2timgroupatinfo.html":{"url":"api/guan-jian-lei/group/v2timgroupatinfo.html","title":"V2TimGroupAtInfo","summary":"群组@ 信息","keywords":"","body":"V2TimGroupAtInfo 关键类描述 群组@ 信息 参数 seq 参数类型 : String 参数描述 : @ 消息序列号，即带有 “@我” 或者 “@所有人” 标记的消息的序列号 memberInfoList 参数类型 : int 参数描述 : @ 提醒类型 0:@我 1:@所有人 2:@我并@所有人 toJson 参数类型 : Map toJson() 参数描述 : 返回群组@ 信息的JSON格式 "},"api/guan-jian-lei/group/v2timgroupinfo.html":{"url":"api/guan-jian-lei/group/v2timgroupinfo.html","title":"V2TimGroupInfo","summary":"群资料","keywords":"","body":"V2TimGroupInfo 关键类描述 群资料 参数 groupID 参数类型 : String 参数描述 : 群组 ID 自定义群组 ID 必须为可打印 ASCII 字符（0x20-0x7e），最长48个字节，且前缀不能为 @TGS（避免与默认分配的群组 ID 混淆） groupType 参数类型 : String 参数描述 : 群类型 groupName 参数类型 : String 参数描述 : 群名称 notification 参数类型 : String 参数描述 : 群公告 群公告最长300字节 introduction 参数类型 : String 参数描述 : 群简介 群简介最长240字节 faceUrl 参数类型 : String 参数描述 : 群头像 群头像 URL 最长100字节 isAllMuted 参数类型 : bool 参数描述 : 是否全员禁言 isSupportTopic 参数类型 : bool 参数描述 : 社群是否支持创建话题 只在群类型为 Community 时有效 owner 参数类型 : String 参数描述 : 群主 createTime 参数类型 : int 参数描述 : 群创建时间 groupAddOpt 参数类型 : int 参数描述 : 加群是否需要管理员审批，工作群（Work）不能主动加入，不支持此设置项 lastInfoTime 参数类型 : int 参数描述 : 群最近一次群资料修改时间 lastMessageTime 参数类型 : int 参数描述 : 群最近一次发消息时间 memberCount 参数类型 : int 参数描述 : 已加入的群成员数量 onlineCount 参数类型 : int 参数描述 : 在线的群成员数量 role 参数类型 : int 参数描述 : 当前用户在此群组中的角色，切换角色请调用 setGroupMemberRole 接口 recvOpt 参数类型 : int 参数描述 : 当前用户在此群组中的消息接收选项,修改群消息接收选项请调用 setGroupReceiveMessageOpt 接口 joinTime 参数类型 : int 参数描述 : 当前用户在此群中的加入时间，不支持设置，系统自动生成 customInfo 参数类型 : Map 参数描述 : 设置群自定义字段 需要两个步骤： 1.在 控制台 (功能配置 -> 群自定义字段) 配置群自定义字段的 key 值，Key 为 String 类型，长度不超过 16 字节。 2.调用 setGroupInfo 接口设置该字段，长度不超过 512 字节。 toJson 参数类型 : Map toJson() 参数描述 : 返回群资料的JSON格式 "},"api/guan-jian-lei/group/v2timgroupapplicationresult.html":{"url":"api/guan-jian-lei/group/v2timgroupapplicationresult.html","title":"V2TimGroupApplicationResult","summary":"加群申请列表","keywords":"","body":"V2TimGroupApplicationResult 关键类描述 加群申请列表 参数 unreadCount 参数类型 : int 参数描述 : 未读的申请数量 groupApplicationList 参数类型 : ListV2TimGroupApplication > 参数描述 : 加群申请的列表 toJson 参数类型 : Map toJson() 参数描述 : 返回加群申请列表的JSON格式 "},"api/guan-jian-lei/group/v2timgroupapplication.html":{"url":"api/guan-jian-lei/group/v2timgroupapplication.html","title":"V2TimGroupApplication","summary":"群申请信息","keywords":"","body":"V2TimGroupApplication 关键类描述 群申请信息 参数 groupID 参数类型 : String 参数描述 : 群组 ID fromUser 参数类型 : String 参数描述 : 请求者 userID fromUserNickName 参数类型 : String 参数描述 : 请求者昵称 fromUserFaceUrl 参数类型 : String 参数描述 : 请求者头像 toUser 参数类型 : String 参数描述 : 判决者id，有人请求加群:0，邀请其他人加群:被邀请人用户 ID addTime 参数类型 : int 参数描述 : 申请时间 requestMsg 参数类型 : String 参数描述 : 申请或邀请附加信息 handledMsg 参数类型 : String 参数描述 : 审批信息：同意或拒绝信息 type 参数类型 : int 参数描述 : 请求类型 0:申请入群 1:邀请入群 handleStatus 参数类型 : int 参数描述 : 处理标志 0:未处理 1:被他人处理 2:自己已处理 handleResult 参数类型 : int 参数描述 : 处理结果 0:拒绝申请 1:同意申请 toJson 参数类型 : Map toJson() 参数描述 : 返回群申请信息的JSON格式 "},"api/guan-jian-lei/group/v2timgroupmemberchangeinfo.html":{"url":"api/guan-jian-lei/group/v2timgroupmemberchangeinfo.html","title":"V2TIMGroupMemberChangeInfo","summary":"群tips，成员变更信息","keywords":"","body":"V2TIMGroupMemberChangeInfo 关键类描述 群tips，成员变更信息 参数 userID 参数类型 : String 参数描述 : 变更用户 muteTime 参数类型 : int 参数描述 : 禁言时间（秒，表示还剩多少秒可以发言） toJson 参数类型 : Map toJson() 参数描述 : 返回群tips，成员变更信息的JSON格式 "},"api/guan-jian-lei/group/v2timgroupinforesult.html":{"url":"api/guan-jian-lei/group/v2timgroupinforesult.html","title":"V2TimGroupInfoResult","summary":"获取群组资料结果","keywords":"","body":"V2TimGroupInfoResult 关键类描述 获取群组资料结果 参数 resultCode 参数类型 : int 参数描述 : 结果 0：成功；非0：失败 resultMessage 参数类型 : String 参数描述 : 如果获取失败，会返回错误信息 groupInfo 参数类型 : V2TimGroupInfo 参数描述 : 如果获取成功，会返回对应的 info toJson 参数类型 : Map toJson() 参数描述 : 返回获取群组资料结果的JSON格式 "},"api/guan-jian-lei/group/v2timgroupchangeinfo.html":{"url":"api/guan-jian-lei/group/v2timgroupchangeinfo.html","title":"V2TimGroupChangeInfo","summary":"群 tips，群变更信息","keywords":"","body":"V2TimGroupChangeInfo 关键类描述 群 tips，群变更信息 参数 type 参数类型 : int 参数描述 : 变更类型 1:群名修改 2:群简介修改 3:群公告修改 4:群头像修改 5:群主变更 6:群自定义字段变更 8:全员禁言字段变更 value 参数类型 : String 参数描述 : 根据变更类型表示不同的值,例如 type = 1，value 表示群新的 groupName key 参数类型 : String 参数描述 : 变更自定义字段的 key 值（type = 6 生效） 因为历史遗留原因，如果只修改了群自定义字段，当前消息不会存漫游和数据库 boolValue 参数类型 : bool 参数描述 : 根据变更类型表示不同的值，当前只有 type = 8 时有效 toJson 参数类型 : Map toJson() 参数描述 : 返回群 tips，群变更信息的JSON格式 "},"api/guan-jian-lei/group/v2timgroupmembersearchparam.html":{"url":"api/guan-jian-lei/group/v2timgroupmembersearchparam.html","title":"V2TimGroupMemberSearchParam","summary":"群成员搜索参数","keywords":"","body":"V2TimGroupMemberSearchParam 关键类描述 群成员搜索参数 参数 keywordList 参数类型 : List 参数描述 : 搜索关键字列表，最多支持5个 groupIDList 参数类型 : List 参数描述 : 指定群 ID 列表，若为 null 则搜索全部群中的群成员 isSearchMemberUserID 参数类型 : bool 参数描述 : 设置是否搜索群成员 userID，默认为true isSearchMemberNickName 参数类型 : bool 参数描述 : 设置是否搜索群成员昵称，默认为true isSearchMemberRemark 参数类型 : bool 参数描述 : 设置是否搜索群成员备注，默认为true isSearchMemberNameCard 参数类型 : bool 参数描述 : 设置是否搜索群成员名片，默认为true toJson 参数类型 : Map toJson() 参数描述 : 返回群成员搜索参数的JSON格式 "},"api/guan-jian-lei/group/v2timtopicoperationresult.html":{"url":"api/guan-jian-lei/group/v2timtopicoperationresult.html","title":"V2TimTopicOperationResult","summary":"话题操作结果（添加、删除等）","keywords":"","body":"V2TimTopicOperationResult 关键类描述 话题操作结果（添加、删除等） 参数 topicID 参数类型 : String 参数描述 : 话题 ID errorCode 参数类型 : int 参数描述 : 返回码 errorMessage 参数类型 : String 参数描述 : 返回信息 toJson 参数类型 : Map toJson() 参数描述 : 返回话题操作结果的JSON格式 "},"api/guan-jian-lei/group/v2timgroupmemberoperationresult.html":{"url":"api/guan-jian-lei/group/v2timgroupmemberoperationresult.html","title":"V2TimGroupMemberOperationResult","summary":"邀请其他人入群的操作结果","keywords":"","body":"V2TimGroupMemberOperationResult 关键类描述 邀请其他人入群的操作结果 参数 memberID 参数类型 : String 参数描述 : 被操作成员 ID result 参数类型 : int 参数描述 : 返回状态 0:操作失败 1:操作成功 2:无效操作，加群时已经是群成员，移除群组时不在群内 3:等待处理，邀请入群时等待对方处理 4:操作失败，创建群指定初始群成员列表或邀请入群时，被邀请者加入的群总数超限 toJson 参数类型 : Map toJson() 参数描述 : 返回邀请其他人入群的操作结果的JSON格式 "},"api/guan-jian-lei/group/v2timgrouptipselem.html":{"url":"api/guan-jian-lei/group/v2timgrouptipselem.html","title":"V2TimGroupTipsElem","summary":"群 tips 消息会存消息列表，群里所有的人都会展示，比如 xxx 进群，xxx 退群，xxx 群资料被修改了等","keywords":"","body":"V2TimGroupTipsElem 关键类描述 群 tips 消息会存消息列表，群里所有的人都会展示，比如 xxx 进群，xxx 退群，xxx 群资料被修改了等 参数 groupID 参数类型 : String 参数描述 : 群组 ID type 参数类型 : int 参数描述 : 群Tips类型 1:主动入群（memberList 加入群组，非 Work 群有效） 2:被邀请入群（opMember 邀请 memberList 入群，Work 群有效） 3:退出群 (opMember 退出群组) 4:踢出群 (opMember 把 memberList 踢出群组) 5:设置管理员 (opMember 把 memberList 设置为管理员) 6:取消管理员 (opMember 取消 memberList 管理员身份) 7:群资料变更 (opMember 修改群资料： groupName & introduction & notification & faceUrl & owner & custom) 8:群成员资料变更 (opMember 修改群成员资料：muteTime) opMember 参数类型 : V2TimGroupMemberInfo 参数描述 : 操作者群成员资料 memberList 参数类型 : ListV2TimGroupMemberInfo > 参数描述 : 被操作人列表 groupChangeInfoList 参数类型 : ListV2TimGroupChangeInfo > 参数描述 : 群信息变更 memberChangeInfoList 参数类型 : ListV2TimGroupMemberChangeInfo > 参数描述 : 成员变更 memberCount 参数类型 : int 参数描述 : 当前群人数 toJson 参数类型 : Map toJson() 参数描述 : 返回查询群组用户信息结果的JSON格式 "},"api/guan-jian-lei/group/v2timgroupsearchparam.html":{"url":"api/guan-jian-lei/group/v2timgroupsearchparam.html","title":"V2TimGroupSearchParam","summary":"群搜索参数","keywords":"","body":"V2TimGroupSearchParam 关键类描述 群搜索参数 参数 keywordList 参数类型 : List 参数描述 : 搜索关键字列表，最多支持5个。 isSearchGroupID 参数类型 : bool 参数描述 : 设置是否搜索群 ID，默认为true isSearchGroupName 参数类型 : bool 参数描述 : 设置是否搜索群名称，默认为true toJson 参数类型 : Map toJson() 参数描述 : 返回群搜索参数的JSON格式 "},"api/guan-jian-lei/group/v2timgroupmessagereadmemberlist.html":{"url":"api/guan-jian-lei/group/v2timgroupmessagereadmemberlist.html","title":"V2TimGroupMessageReadMemberList","summary":"群消息已读或未读群成员列表","keywords":"","body":"V2TimGroupMessageReadMemberList 关键类描述 群消息已读或未读群成员列表 参数 nextSeq 参数类型 : String 参数描述 : 分页拉取的 seq 如果为 0 表示拉取结束 isFinished 参数类型 : bool 参数描述 : 成员列表是否已经拉取完毕 memberInfoList 参数类型 : ListV2TimGroupMemberInfo > 参数描述 : 群消息已读或未读群成员列表 toJson 参数类型 : Map toJson() 参数描述 : 返回群消息已读群成员列表的JSON格式 "},"api/guan-jian-lei/group/v2groupmemberinfosearchresult.html":{"url":"api/guan-jian-lei/group/v2groupmemberinfosearchresult.html","title":"V2GroupMemberInfoSearchResult","summary":"查询群组用户信息结果","keywords":"","body":"V2GroupMemberInfoSearchResult 关键类描述 查询群组用户信息结果 参数 groupMemberSearchResultItems 参数类型 : Map 参数描述 : 群组成员搜索结果单元 toJson 参数类型 : Map toJson() 参数描述 : 返回查询群组用户信息结果的JSON格式 "},"api/guan-jian-lei/group/v2timgroupmemberfullinfo.html":{"url":"api/guan-jian-lei/group/v2timgroupmemberfullinfo.html","title":"V2TimGroupMemberFullInfo","summary":"群组成员详细信息","keywords":"","body":"V2TimGroupMemberFullInfo 关键类描述 群组成员详细信息 参数 userID 参数类型 : String 参数描述 : 群成员 userID role 参数类型 : int 参数描述 : 群成员角色 1:群成员 2:群管理员 3:群主 muteUntil 参数类型 : int 参数描述 : 群成员禁言结束时间戳 joinTime 参数类型 : int 参数描述 : 群成员入群时间，自动生成，不可修改。 customInfo 参数类型 : Map 参数描述 : 群成员自定义字段 nickName 参数类型 : String 参数描述 : 群成员昵称 nameCard 参数类型 : String 参数描述 : 群成员名片 friendRemark 参数类型 : String 参数描述 : 好友备注 faceUrl 参数类型 : String 参数描述 : 用户头像 url toJson 参数类型 : Map toJson() 参数描述 : 返回群组成员详细信息的JSON格式 "},"api/guan-jian-lei/group/v2timgroupmemberinfo.html":{"url":"api/guan-jian-lei/group/v2timgroupmemberinfo.html","title":"V2TimGroupMemberInfo","summary":"群成员基本资料","keywords":"","body":"V2TimGroupMemberInfo 关键类描述 群成员基本资料 参数 userID 参数类型 : String 参数描述 : 用户 ID nickName 参数类型 : String 参数描述 : 用户昵称 nameCard 参数类型 : String 参数描述 : 群成员名片 friendRemark 参数类型 : String 参数描述 : 用户好友备注 faceUrl 参数类型 : String 参数描述 : 用户头像 toJson 参数类型 : Map toJson() 参数描述 : 返回群成员基本资料的JSON格式 "},"api/guan-jian-lei/group/enumutils.html":{"url":"api/guan-jian-lei/group/enumutils.html","title":"EnumUtils","summary":"根据GroupMemberRoleTypeEnum生成GroupMemberRoleType","keywords":"","body":"EnumUtils 关键类描述 根据GroupMemberRoleTypeEnum生成GroupMemberRoleType 参数 convertGroupMemberRoleTypeEnum 参数类型 : GroupMemberRoleTypeEnum 参数描述 : 根据GroupMemberRoleTypeEnum生成GroupMemberRoleType 200:群成员 300:群管理员 400:群主 "},"api/guan-jian-lei/user/":{"url":"api/guan-jian-lei/user/","title":"User","summary":"用户相关类","keywords":"","body":"User User包含内容说明 用户相关类型 User包含类型目录 类型名称 描述 V2TimUserInfo 用户信息属性 V2TimUserStatus 用户状态信息属性 V2TimUserFullInfo 用户全量信息属性 V2TimFriendGroup 用户好友分组信息 V2TimFriendCheckResult 好友关系链检查结果 V2TimFriendApplicationResult 好友申请列表 V2TimFriendApplication 好友申请信息 V2TimFriendSearchParam 搜索用户参数 V2TimFriendOperationResult 好友操作结果（添加、删除、加黑名单、添加分组等） V2TimFriendInfoResult 好友资料获取结果 V2TimFriendInfo 好友资料 "},"api/guan-jian-lei/user/v2timuserinfo.html":{"url":"api/guan-jian-lei/user/v2timuserinfo.html","title":"V2TimUserInfo","summary":"用户信息属性","keywords":"","body":"V2TimUserInfo 关键类描述 用户信息属性 参数 userID 参数类型 : String 参数描述 : 用户 ID nickName 参数类型 : String 参数描述 : 用户昵称 faceUrl 参数类型 : String 参数描述 : 用户头像 toJson 参数类型 : Map toJson() 参数描述 : 返回用户信息的JSON格式 "},"api/guan-jian-lei/user/v2timuserstatus.html":{"url":"api/guan-jian-lei/user/v2timuserstatus.html","title":"V2TimUserStatus","summary":"用户状态信息属性","keywords":"","body":"V2TimUserStatus 关键类描述 用户状态信息属性 参数 userID 参数类型 : String 参数描述 : 用户 ID statusType 参数类型 : int 参数描述 : 用户状态 0:未知状态 1:在线状态 2:离线状态 3:未登录（如主动调用 logout 接口，或者账号注册后还未登录） customStatus 参数类型 : String 参数描述 : 用户的自定义状态 toJson 参数类型 : Map toJson() 参数描述 : 返回用户状态信息的JSON格式 "},"api/guan-jian-lei/user/v2timuserfullinfo.html":{"url":"api/guan-jian-lei/user/v2timuserfullinfo.html","title":"V2TimUserFullInfo","summary":"用户全量信息属性","keywords":"","body":"V2TimUserFullInfo 关键类描述 用户全量信息属性 参数 userID 参数类型 : String 参数描述 : 用户 ID nickName 参数类型 : String 参数描述 : 用户昵称 faceUrl 参数类型 : String 参数描述 : 用户头像 url selfSignature 参数类型 : String 参数描述 : 用户的签名 gender 参数类型 : int 参数描述 : 用户的性别 1:男 2:女 allowType 参数类型 : int 参数描述 : 用户的好友验证方式 0:允许所有人加我好友 1:不允许所有人加我好友 2:加我好友许我确认 customInfo 参数类型 : Map 参数描述 : 用户的自定义状态 role 参数类型 : int 参数描述 : 用户的角色 level 参数类型 : int 参数描述 : 用户的等级 birthday 参数类型 : int 参数描述 : 用户生日 toJson 参数类型 : Map toJson() 参数描述 : 返回用户全量信息的JSON格式 "},"api/guan-jian-lei/user/v2timfriendgroup.html":{"url":"api/guan-jian-lei/user/v2timfriendgroup.html","title":"V2TimFriendGroup","summary":"用户好友分组信息","keywords":"","body":"V2TimFriendGroup 关键类描述 用户好友分组信息 参数 name 参数类型 : String 参数描述 : 好友分组名称 friendCount 参数类型 : int 参数描述 : 分组成员数量 friendIDList 参数类型 : List 参数描述 : 分组成员列表 toJson 参数类型 : Map toJson() 参数描述 : 返回用户好友分组信息的JSON格式 "},"api/guan-jian-lei/user/v2timfriendcheckresult.html":{"url":"api/guan-jian-lei/user/v2timfriendcheckresult.html","title":"V2TimFriendCheckResult","summary":"好友关系链检查结果","keywords":"","body":"V2TimFriendCheckResult 关键类描述 好友关系链检查结果 参数 userID 参数类型 : String 参数描述 : 用户 ID resultCode 参数类型 : int 参数描述 : 返回码 resultInfo 参数类型 : String 参数描述 : 返回信息 resultType 参数类型 : int 参数描述 : 与查询用户的关系类型 0:不是好友 1:对方在我的好友列表中 2:我在对方的好友列表中 3:互为好友 toJson 参数类型 : Map toJson() 参数描述 : 返回好友关系链检查结果的JSON格式 "},"api/guan-jian-lei/user/v2timfriendapplicationresult.html":{"url":"api/guan-jian-lei/user/v2timfriendapplicationresult.html","title":"V2TimFriendApplicationResult","summary":"好友申请列表","keywords":"","body":"V2TimFriendApplicationResult 关键类描述 好友申请列表 参数 unreadCount 参数类型 : int 参数描述 : 好友申请未读数量 friendApplicationList 参数类型 : ListV2TimFriendApplication > 参数描述 : 好友申请列表 toJson 参数类型 : Map toJson() 参数描述 : 返回好友申请列表的JSON格式 "},"api/guan-jian-lei/user/v2timfriendapplication.html":{"url":"api/guan-jian-lei/user/v2timfriendapplication.html","title":"V2TimFriendApplication","summary":"好友申请信息","keywords":"","body":"V2TimFriendApplication 关键类描述 好友申请信息 参数 userID 参数类型 : String 参数描述 : 用户 ID nickName 参数类型 : String 参数描述 : 用户昵称 faceUrl 参数类型 : String 参数描述 : 用户头像 addTime 参数类型 : int 参数描述 : 添加时间 addSource 参数类型 : String 参数描述 : 来源 addWording 参数类型 : String 参数描述 : 加好友附言 type 参数类型 : int 参数描述 : 好友申请类型 0:别人发给我的 1:我发给别人的 2:别人发给我的 和 我发给别人的。仅拉取时有效 toJson 参数类型 : Map toJson() 参数描述 : 返回好友申请信息的JSON格式 "},"api/guan-jian-lei/user/v2timfriendsearchparam.html":{"url":"api/guan-jian-lei/user/v2timfriendsearchparam.html","title":"V2TimFriendSearchParam","summary":"搜索用户参数","keywords":"","body":"V2TimFriendSearchParam 关键类描述 搜索用户参数 参数 keywordList 参数类型 : List 参数描述 : 搜索的关键字列表，关键字列表最多支持 5 个 isSearchUserID 参数类型 : bool 参数描述 : 设置是否搜索 userID 默认为true isSearchNickName 参数类型 : bool 参数描述 : 是否设置搜索昵称 默认为true isSearchRemark 参数类型 : bool 参数描述 : 是否设置搜索备注 默认为true toJson 参数类型 : Map toJson() 参数描述 : 返回搜索用户参数的JSON格式 "},"api/guan-jian-lei/user/v2timfriendoperationresult.html":{"url":"api/guan-jian-lei/user/v2timfriendoperationresult.html","title":"V2TimFriendOperationResult","summary":"好友操作结果（添加、删除、加黑名单、添加分组等）","keywords":"","body":"V2TimFriendOperationResult 关键类描述 好友操作结果（添加、删除、加黑名单、添加分组等） 参数 userID 参数类型 : String 参数描述 : 用户 ID resultCode 参数类型 : int 参数描述 : 返回码 resultInfo 参数类型 : String 参数描述 : 返回信息 toJson 参数类型 : Map toJson() 参数描述 : 返回好友操作结果的JSON格式 "},"api/guan-jian-lei/user/v2timfriendinforesult.html":{"url":"api/guan-jian-lei/user/v2timfriendinforesult.html","title":"V2TimFriendInfoResult","summary":"好友资料获取结果","keywords":"","body":"V2TimFriendInfoResult 关键类描述 好友资料获取结果 参数 resultCode 参数类型 : int 参数描述 : 返回码 resultInfo 参数类型 : String 参数描述 : 返回结果表述 relation 参数类型 : int 参数描述 : 好友类型 0:不是好友 1:对方在我的好友列表中 2:我在对方的好友列表中 3:互为好友 friendInfo 参数类型 : V2TimFriendInfo 参数描述 : 好友个人资料，如果不是好友，除了 userID 字段，其他字段都为空 toJson 参数类型 : Map toJson() 参数描述 : 返回好友资料获取结果的JSON格式 "},"api/guan-jian-lei/user/v2timfriendinfo.html":{"url":"api/guan-jian-lei/user/v2timfriendinfo.html","title":"V2TimFriendInfo","summary":"好友资料","keywords":"","body":"V2TimFriendInfo 关键类描述 好友资料 参数 userID 参数类型 : String 参数描述 : 好友 ID friendRemark 参数类型 : String 参数描述 : 好友备注 friendGroups 参数类型 : List 参数描述 : 好友所在分组列表 friendCustomInfo 参数类型 : Map 参数描述 : 好友自定义字段 首先要在 控制台 (功能配置 -> 好友自定义字段) 配置好友自定义字段，然后再调用该接口进行设置，key 值不需要加 Tag_SNS_Custom_ 前缀。 userProfile 参数类型 : V2TimUserFullInfo 参数描述 : 好友个人资料 toJson 参数类型 : Map toJson() 参数描述 : 返回好友资料的JSON格式 "},"api/guan-jian-lei/message/":{"url":"api/guan-jian-lei/message/","title":"Message","summary":"消息相关类型","keywords":"","body":"Message Message包含内容说明 消息相关类型 Message包含类型目录 类型名称 描述 V2TimMessage 消息属性 V2TimVideoElem 视频消息单体属性 V2TimTextElem 文本消息单体属性 V2TimSoundElem 语音消息单体属性 OfflinePushInfo 消息的离线推送信息 V2TimOfflinePushInfo 自定义消息离线推送 V2TimMergerElem 合并消息单体属性 V2TimLocationElem 地理位置单体属性 V2TimFileElem 文件消息单体属性 V2TimFaceElem 表情消息单体属性 V2TimCustomElem 自定义消息单体属性 V2TimConversationResult 会话列表拉取结果 V2TimConversation 会话对象属性 V2TimConversationListFilter 会话列表过滤器 V2TimMsgCreateInfoResult 创建信息结果 V2TimReceiveMessageOptInfo 用户接收消息设置的属性 V2TimSignalingInfo 信令消息属性 V2TimMessageSearchResultItem 会话搜索结果单体属性 V2TimMessageSearchResult 会话搜索结果 V2TimMessageSearchParam 消息搜索参数 V2TimMessageReceipt 消息已读回执 V2TimMessageChangeInfo 消息修改信息 "},"api/guan-jian-lei/message/v2timmessage.html":{"url":"api/guan-jian-lei/message/v2timmessage.html","title":"V2TimMessage","summary":"消息属性","keywords":"","body":"V2TimMessage 关键类描述 消息属性 参数 msgID 参数类型 : String 参数描述 : 消息 ID（消息创建的时候为 nil，消息发送的时候会生成） timestamp 参数类型 : int 参数描述 : 消息时间戳 progress 参数类型 : int 参数描述 : 消息中文件上传进度 取值范围为0-100 sender 参数类型 : String 参数描述 : 消息发送者 nickName 参数类型 : String 参数描述 : 消息发送者昵称 friendRemark 参数类型 : String 参数描述 : 消息发送者好友备注 faceUrl 参数类型 : String 参数描述 : 消息发送者头像 nameCard 参数类型 : String 参数描述 : 如果是群组消息，nameCard 为发送者的群名片 groupID 参数类型 : String 参数描述 : 如果是群组消息，groupID 为会话群组 ID，否则为 nil userID 参数类型 : String 参数描述 : 如果是单聊消息，userID 为会话用户 ID，否则为 nil， 假设自己和 userA 聊天，无论是自己发给 userA 的消息还是 userA 发给自己的消息，这里的 userID 均为 userA status 参数类型 : int 参数描述 : 消息发送状态 1:消息发送中 2:消息发送成功 3:消息发送失败 4:消息被删除 5:导入到本地的消息 6:被撤销的消息 elemType 参数类型 : int 参数描述 : 消息类型 0:未知消息 1:文本消息 2:自定义消息 3:图片消息 4:语音消息 5:视频消息 6:文件消息 7:地理位置消息 8:表情消息 9:群 Tips 消息 10:合并消息 textElem 参数类型 : V2TimTextElem 参数描述 : 消息类型 为 V2TIM_ELEM_TYPE_TEXT，textElem 会存储文本消息内容 customElem 参数类型 : V2TimCustomElem 参数描述 : 消息类型 为 V2TIM_ELEM_TYPE_CUSTOM，customElem 会存储自定义消息内容 imageElem 参数类型 : V2TimImageElem 参数描述 : 消息类型 为 V2TIM_ELEM_TYPE_IMAGE，imageElem 会存储图片消息内容 soundElem 参数类型 : V2TimSoundElem 参数描述 : 消息类型 为 V2TIM_ELEM_TYPE_SOUND，soundElem 会存储语音消息内容 videoElem 参数类型 : V2TimVideoElem 参数描述 : 消息类型 为 V2TIM_ELEM_TYPE_VIDEO，videoElem 会存储视频消息内容 fileElem 参数类型 : V2TimFileElem 参数描述 : 消息类型 为 V2TIM_ELEM_TYPE_FILE，fileElem 会存储文件消息内容 locationElem 参数类型 : V2TimLocationElem 参数描述 : 消息类型 为 V2TIM_ELEM_TYPE_LOCATION，locationElem 会存储地理位置消息内容 faceElem 参数类型 : V2TimFaceElem 参数描述 : 消息类型 为 V2TIM_ELEM_TYPE_FACE，faceElem 会存储表情消息内容 groupTipsElem 参数类型 : V2TimGroupTipsElem 参数描述 : 消息类型 为 V2TIM_ELEM_TYPE_GROUP_TIPS，groupTipsElem 会存储群 tips 消息内容 mergerElem 参数类型 : V2TimMergerElem 参数描述 : 消息类型 为 V2TIM_ELEM_TYPE_MERGER，mergerElem 会存储转发消息内容 localCustomData 参数类型 : String 参数描述 : 消息自定义数据（本地保存，不会发送到对端，程序卸载重装后失效） localCustomInt 参数类型 : int 参数描述 : 消息自定义数据,可以用来标记语音、视频消息是否已经播放（本地保存，不会发送到对端，程序卸载重装后失效） cloudCustomData 参数类型 : String 参数描述 : 消息自定义数据（云端保存，会发送到对端，程序卸载重装后还能拉取到） isSelf 参数类型 : bool 参数描述 : 消息发送者是否是自己 isRead 参数类型 : bool 参数描述 : 消息自己是否已读 isPeerRead 参数类型 : bool 参数描述 : 消息对方是否已读（只有 C2C 消息有效） 该字段为true的条件是消息 timestamp priority 参数类型 : int 参数描述 : 消息优先级（只有 onRecvNewMessage 收到的 V2TIMMessage 获取有效） offlinePushInfo 参数类型 : V2TimOfflinePushInfo 参数描述 : 消息的离线推送信息 groupAtUserList 参数类型 : List 参数描述 : 群消息中被 @ 的用户 UserID 列表（即该消息都 @ 了哪些人） seq 参数类型 : bool 参数描述 : 群聊中的消息序列号云端生成，在群里是严格递增且唯一的, 单聊中的序列号是本地生成，不能保证严格递增且唯一。 random 参数类型 : int 参数描述 : 消息随机码 isExcludedFromUnreadCount 参数类型 : bool 参数描述 : 消息是否不计入会话未读数：默认为 NO，表明需要计入会话未读数，设置为 YES，表明不需要计入会话未读数（5.3.425 及以上版本支持） isExcludedFromLastMessage 参数类型 : bool 参数描述 : 消息是否不计入会话 lastMsg：默认为 NO，表明需要计入会话 lastMsg，设置为 YES，表明不需要计入会话 lastMsg（5.4.666 及以上版本支持） messageFromWeb 参数类型 : String 参数描述 : WEB端传递到flutter端的文本数据 id 参数类型 : String 参数描述 : 创建的消息id needReadReceipt 参数类型 : bool 参数描述 : 消息是否需要已读回执（6.1 以上版本有效，需要您购买旗舰版套餐） 群消息在使用该功能之前，需要先到 IM 控制台设置已读回执支持的群类型 toJson 参数类型 : Map toJson() 参数描述 : 返回消息属性的JSON格式 "},"api/guan-jian-lei/message/v2timvideoelem.html":{"url":"api/guan-jian-lei/message/v2timvideoelem.html","title":"V2TimVideoElem","summary":"视频消息单体属性","keywords":"","body":"V2TimVideoElem 关键类描述 视频消息单体属性 参数 videoPath 参数类型 : String 参数描述 : 视频文件路径（只有发送方才能获取到） UUID 参数类型 : String 参数描述 : 视频 ID,内部标识，可用于外部缓存 key videoSize 参数类型 : int 参数描述 : 视频大小 duration 参数类型 : int 参数描述 : 视频时长 snapshotPath 参数类型 : String 参数描述 : 封面截图文件路径（只有发送方才能获取到） snapshotUUID 参数类型 : String 参数描述 : 封面截图 ID,内部标识，可用于外部缓存 key snapshotSize 参数类型 : int 参数描述 : 截图 size snapshotWidth 参数类型 : int 参数描述 : 封面截图宽 snapshotHeight 参数类型 : int 参数描述 : 封面截图高 videoUrl 参数类型 : String 参数描述 : 视频文件的 URL 下载地址 snapshotUrl 参数类型 : String 参数描述 : 封面截图的 URL 下载地址 localVideoUrl 参数类型 : String 参数描述 : 视频下载后的本地路径 localSnapshotUrl 参数类型 : String 参数描述 : 封面截图下载后的本地路径 toJson 参数类型 : Map toJson() 参数描述 : 返回视频消息单体属性的JSON格式 "},"api/guan-jian-lei/message/v2timtextelem.html":{"url":"api/guan-jian-lei/message/v2timtextelem.html","title":"V2TimTextElem","summary":"文本消息单体属性","keywords":"","body":"V2TimTextElem 关键类描述 文本消息单体属性 参数 text 参数类型 : String 参数描述 : 消息文本 toJson 参数类型 : Map toJson() 参数描述 : 返回文本消息单体属性的JSON格式 "},"api/guan-jian-lei/message/v2timsoundelem.html":{"url":"api/guan-jian-lei/message/v2timsoundelem.html","title":"V2TimSoundElem","summary":"语音消息单体属性","keywords":"","body":"V2TimSoundElem 关键类描述 语音消息单体属性 参数 path 参数类型 : String 参数描述 : 语音文件路径（只有发送方才能获取到） UUID 参数类型 : String 参数描述 : 语音消息内部 ID dataSize 参数类型 : int 参数描述 : 语音数据大小 duration 参数类型 : int 参数描述 : 语音长度（秒） url 参数类型 : String 参数描述 : 语音文件的 URL 下载地址 localUrl 参数类型 : String 参数描述 : 语音下载后的本地路径 toJson 参数类型 : Map toJson() 参数描述 : 返回语音消息单体属性的JSON格式 "},"api/guan-jian-lei/message/offlinepushinfo.html":{"url":"api/guan-jian-lei/message/offlinepushinfo.html","title":"OfflinePushInfo","summary":"消息的离线推送信息","keywords":"","body":"OfflinePushInfo 关键类描述 消息的离线推送信息 参数 title 参数类型 : String 参数描述 : 离线推送展示的标题。 desc 参数类型 : String 参数描述 : 离线推送展示的内容。 自定义消息进行离线推送，必须设置此字段内容。 disablePush 参数类型 : bool 参数描述 : 是否关闭推送（默认开启推送）。 ext 参数类型 : String 参数描述 : 离线推送扩展字段 iOS: 收到离线推送的一方可以在 UIApplicationDelegate -> didReceiveRemoteNotification -> userInfo 拿到这个字段，用这个字段可以做 UI 跳转逻辑 iOSSound 参数类型 : String 参数描述 : 离线推送声音设置（仅对 iOS 生效） 当 iOSSound = kIOSOfflinePushNoSound，表示接收时不会播放声音。 当 iOSSound = kIOSOfflinePushDefaultSound，表示接收时播放系统声音。 如果要自定义 iOSSound，需要先把语音文件链接进 Xcode 工程，然后把语音文件名（带后缀）设置给 iOSSound。 ignoreIOSBadge 参数类型 : bool 参数描述 : 离线推送忽略 badge 计数（仅对 iOS 生效）， 如果设置为 YES，在 iOS 接收端，这条消息不会使 APP 的应用图标未读计数增加。 androidOPPOChannelID 参数类型 : String 参数描述 : 离线推送设置 OPPO 手机推送的 ChannelID, 仅支持 8.0 系统及以上。（应用配置接入 OPPO 推送的必须要设置） toJson 参数类型 : Map toJson() 参数描述 : 返回消息的离线推送信息的JSON格式 "},"api/guan-jian-lei/message/v2timofflinepushinfo.html":{"url":"api/guan-jian-lei/message/v2timofflinepushinfo.html","title":"V2TimOfflinePushInfo","summary":"自定义消息离线推送","keywords":"","body":"V2TimOfflinePushInfo 关键类描述 自定义消息离线推送 参数 title 参数类型 : String 参数描述 : 离线推送展示的标题。 desc 参数类型 : String 参数描述 : 离线推送展示的内容。 自定义消息进行离线推送，必须设置此字段内容。 disablePush 参数类型 : bool 参数描述 : 是否关闭推送（默认开启推送）。 iOSSound 参数类型 : String 参数描述 : 离线推送声音设置（仅对 iOS 生效） 当 iOSSound = kIOSOfflinePushNoSound，表示接收时不会播放声音。 当 iOSSound = kIOSOfflinePushDefaultSound，表示接收时播放系统声音。 如果要自定义 iOSSound，需要先把语音文件链接进 Xcode 工程，然后把语音文件名（带后缀）设置给 iOSSound。 ignoreIOSBadge 参数类型 : bool 参数描述 : 离线推送忽略 badge 计数（仅对 iOS 生效）， 如果设置为 YES，在 iOS 接收端，这条消息不会使 APP 的应用图标未读计数增加。 androidOPPOChannelID 参数类型 : String 参数描述 : 离线推送设置 OPPO 手机推送的 ChannelID, 仅支持 8.0 系统及以上。（应用配置接入 OPPO 推送的必须要设置） androidVIVOClassification 参数类型 : String 参数描述 : 离线推送设置 vivo 手机推送消息的类型，0：运营消息，1：系统消息。默认取值为 1。（应用配置接入 vivo 推送可以根据需要修改设置） androidSound 参数类型 : String 参数描述 : 离线推送声音设置（仅对 Android 生效, 仅 imsdk 6.1 及以上版本支持） 只有华为和谷歌手机支持设置铃音提示，小米铃音设置请您参照：https://dev.mi.com/console/doc/detail?pId=1278%23\\_3\\_0 AndroidSound: Android 工程里 raw 目录中的铃声文件名，不需要后缀名。 toJson 参数类型 : Map toJson() 参数描述 : 返回自定义消息离线推送的JSON格式 "},"api/guan-jian-lei/message/v2timmergerelem.html":{"url":"api/guan-jian-lei/message/v2timmergerelem.html","title":"V2TimMergerElem","summary":"合并消息单体属性","keywords":"","body":"V2TimMergerElem 关键类描述 合并消息单体属性 参数 isLayersOverLimit 参数类型 : bool 参数描述 : 合并嵌套层数是否超过 100 层 合并消息里面又包含合并消息我们称之为合并嵌套，合并嵌套层数不能超过 100 层。 如果超过限制，layersOverLimit 会返回true，title 和 abstractList 会返回 null，downloadMergerMessage 会返回 ERR_MERGER_MSG_LAYERS_OVER_LIMIT 错误码。 title 参数类型 : String 参数描述 : 合并消息 title abstractList 参数类型 : List 参数描述 : 合并消息摘要列表 toJson 参数类型 : Map toJson() 参数描述 : 返回合并消息单体属性的JSON格式 "},"api/guan-jian-lei/message/v2timlocationelem.html":{"url":"api/guan-jian-lei/message/v2timlocationelem.html","title":"V2TimLocationElem","summary":"地理位置单体属性","keywords":"","body":"V2TimLocationElem 关键类描述 地理位置单体属性 参数 desc 参数类型 : String 参数描述 : 地理位置描述信息 longitude 参数类型 : double 参数描述 : 经度，发送消息时设置 latitude 参数类型 : double 参数描述 : 纬度，发送消息时设置 toJson 参数类型 : Map toJson() 参数描述 : 返回地理位置单体属性的JSON格式 "},"api/guan-jian-lei/message/v2timfileelem.html":{"url":"api/guan-jian-lei/message/v2timfileelem.html","title":"V2TimFileElem","summary":"文件消息单体属性","keywords":"","body":"V2TimFileElem 关键类描述 文件消息单体属性 参数 path 参数类型 : String 参数描述 : 文件路径（只有发送方才能获取到） fileName 参数类型 : String 参数描述 : 文件显示名称 UUID 参数类型 : String 参数描述 : 文件 ID,内部标识，可用于外部缓存 key url 参数类型 : String 参数描述 : 文件的 URL 下载地址 fileSize 参数类型 : int 参数描述 : 文件大小 localUrl 参数类型 : String 参数描述 : 文件下载后的本地路径 toJson 参数类型 : Map toJson() 参数描述 : 返回文件消息单体属性的JSON格式 "},"api/guan-jian-lei/message/v2timfaceelem.html":{"url":"api/guan-jian-lei/message/v2timfaceelem.html","title":"V2TimFaceElem","summary":"表情消息单体属性","keywords":"","body":"V2TimFaceElem 关键类描述 表情消息单体属性 参数 index 参数类型 : String 参数描述 : 表情索引，用户自定义 表情消息由 TIMFaceElem 定义，SDK 并不提供表情包，如果开发者有表情包，可使用 index 存储表情在表情包中的索引，由用户自定义，或者直接使用 data 存储表情二进制信息以及字符串 key，都由用户自定义，SDK 内部只做透传。 index 和 data 只需要传入一个即可，ImSDK 只是透传这两个数据。 data 参数类型 : String 参数描述 : 额外数据，用户自定义 toJson 参数类型 : Map toJson() 参数描述 : 返回表情消息单体属性的JSON格式 "},"api/guan-jian-lei/message/v2timcustomelem.html":{"url":"api/guan-jian-lei/message/v2timcustomelem.html","title":"V2TimCustomElem","summary":"自定义消息单体属性","keywords":"","body":"V2TimCustomElem 关键类描述 自定义消息单体属性 参数 data 参数类型 : String 参数描述 : 自定义消息二进制数据 desc 参数类型 : String 参数描述 : 自定义消息描述信息 extension 参数类型 : String 参数描述 : 自定义消息扩展字段 toJson 参数类型 : Map toJson() 参数描述 : 返回自定义消息单体属性的JSON格式 "},"api/guan-jian-lei/message/v2timconversationresult.html":{"url":"api/guan-jian-lei/message/v2timconversationresult.html","title":"V2TimConversationResult","summary":"会话列表拉取结果","keywords":"","body":"V2TimConversationResult 关键类描述 会话列表拉取结果 参数 nextSeq 参数类型 : String 参数描述 : 分页拉取的游标 isFinished 参数类型 : bool 参数描述 : 会话列表是否已经拉取完毕 true:拉取完毕 false:还有会话需要继续拉取 conversationList 参数类型 : ListV2TimConversation > 参数描述 : 会话列表 toJson 参数类型 : Map toJson() 参数描述 : 返回会话列表拉取结果的JSON格式 "},"api/guan-jian-lei/message/v2timconversation.html":{"url":"api/guan-jian-lei/message/v2timconversation.html","title":"V2TimConversation","summary":"会话对象属性","keywords":"","body":"V2TimConversation 关键类描述 会话对象属性 参数 conversationID 参数类型 : String 参数描述 : 会话唯一 ID，如果是 C2C 单聊，组成方式为 c2c_userID，如果是群聊，组成方式为 group_groupID type 参数类型 : int 参数描述 : 会话类型 1:单聊 2:群聊 userID 参数类型 : String 参数描述 : 如果会话类型为 C2C 单聊，userID 会存储对方的用户ID，否则为 null groupID 参数类型 : String 参数描述 : 如果会话类型为群聊，groupID 会存储当前群的群 ID，否则为 null showName 参数类型 : String 参数描述 : 会话展示名称（群组：群名称 >> 群 ID；C2C：对方好友备注 >> 对方昵称 >> 对方的 userID） faceUrl 参数类型 : String 参数描述 : 会话展示头像（群组：群头像；C2C：对方头像） groupType 参数类型 : String 参数描述 : 如果会话类型为群聊，groupType 为当前群类型，否则为 null unreadCount 参数类型 : int 参数描述 : 话未读消息数量,直播群（AVChatRoom）不支持未读计数，默认为 0 lastMessage 参数类型 : V2TimMessage 参数描述 : 会话最后一条消息 draftText 参数类型 : String 参数描述 : 草稿信息，设置草稿信息请调用 setConversationDraft 接口 draftTimestamp 参数类型 : int 参数描述 : 草稿编辑时间，草稿设置的时候自动生成 isPinned 参数类型 : bool 参数描述 : 是否置顶 recvOpt 参数类型 : int 参数描述 : 消息接收选项 0:在线正常接收消息，离线时会进行离线推送 1:不会接收到消息，离线不会有推送通知 2:在线正常接收消息，离线不会有推送通知 groupAtInfoList 参数类型 : ListV2TimGroupAtInfo > 参数描述 : 群组@信息 orderkey 参数类型 : int 参数描述 : 排序字段 toJson 参数类型 : Map toJson() 参数描述 : 返回会话对象属性的JSON格式 "},"sdkapi/guan-jian-lei/message/v2timconversationlistfilter.html":{"url":"sdkapi/guan-jian-lei/message/v2timconversationlistfilter.html","title":"V2TimConversationListFilter","summary":"会话列表过滤器","keywords":"","body":"V2TimConversationListFilter 关键类描述 会话列表过滤器 参数 conversationType 参数类型 : ConversationType 参数描述 : 会话类型 nextSeq 参数类型 : int 参数描述 : 分页拉取的 seq 如果为 0 表示拉取结束 count 参数类型 : int 参数描述 : 拉取数量 markType 参数类型 : V2TimConversationMarkType 参数描述 : 会话标记类型 groupName 参数类型 : String 参数描述 : 群组名称 toJson 参数类型 : Map toJson() 参数描述 : 返回会话列表过滤器属性的JSON格式 "},"api/guan-jian-lei/message/v2timsdklistener-1.html":{"url":"api/guan-jian-lei/message/v2timsdklistener-1.html","title":"V2TimMsgCreateInfoResult","summary":"创建信息结果","keywords":"","body":"V2TimMsgCreateInfoResult 关键类描述 创建信息结果 参数 id 参数类型 : String 参数描述 : 创建信息的 ID messageInfo 参数类型 : V2TimMessage 参数描述 : 创建信息的内容 toJson 参数类型 : Map toJson() 参数描述 : 返回创建信息结果的JSON格式 "},"api/guan-jian-lei/message/v2timreceivemessageoptinfo.html":{"url":"api/guan-jian-lei/message/v2timreceivemessageoptinfo.html","title":"V2TimReceiveMessageOptInfo","summary":"用户接收消息设置的属性","keywords":"","body":"V2TimReceiveMessageOptInfo 关键类描述 用户接收消息设置的属性 参数 userID 参数类型 : String 参数描述 : 用户 ID c2CReceiveMessageOpt 参数类型 : int 参数描述 : 消息接收选项用户接收消息设置的属性 0:在线正常接收消息，离线时会进行离线推送 1:不会接收到消息，离线不会有推送通知 2:在线正常接收消息，离线不会有推送通知 toJson 参数类型 : Map toJson() 参数描述 : 返回用户接收消息设置的属性的JSON格式 "},"api/guan-jian-lei/message/v2timsignalinginfo.html":{"url":"api/guan-jian-lei/message/v2timsignalinginfo.html","title":"V2TimSignalingInfo","summary":"信令消息属性","keywords":"","body":"V2TimSignalingInfo 关键类描述 信令消息属性 参数 inviteID 参数类型 : String 参数描述 : 邀请用户 ID inviter 参数类型 : String 参数描述 : 邀请人 ID inviteeList 参数类型 : List 参数描述 : 邀请列表 groupID 参数类型 : String 参数描述 : 邀请群组 ID data 参数类型 : String 参数描述 : 邀请信息 timeout 参数类型 : int 参数描述 : 邀请超时时间 actionType 参数类型 : int 参数描述 : 邀请状态类型 1:邀请方发起邀请 2:邀请方取消邀请 3:被邀请方接受邀请 4:被邀请方拒绝邀请 5:邀请超时 isOnlineUserOnly 参数类型 : bool 参数描述 : 是否只邀请在线用户，ios不回返回这条 offlinePushInfo 参数类型 : V2TimOfflinePushInfo 参数描述 : 离线推送信息，ios不回返回这条 toJson 参数类型 : Map toJson() 参数描述 : 返回信令消息属性的JSON格式 "},"api/guan-jian-lei/message/v2timmessagesearchresultitem.html":{"url":"api/guan-jian-lei/message/v2timmessagesearchresultitem.html","title":"V2TimMessageSearchResultItem","summary":"会话搜索结果单体属性","keywords":"","body":"V2TimMessageSearchResultItem 关键类描述 会话搜索结果单体属性 参数 conversationID 参数类型 : String 参数描述 : 会话ID messageCount 参数类型 : int 参数描述 : 当前会话一共搜索到了多少条符合要求的消息 messageList 参数类型 : ListV2TimMessage > 参数描述 : 满足搜索条件的消息列表 如果您本次搜索【指定会话】，那么 messageList 中装载的是本会话中所有满足搜索条件的消息列表。 如果您本次搜索【全部会话】，那么 messageList 中装载的消息条数会有如下两种可能： 如果某个会话中匹配到的消息条数 > 1，则 messageList 为空，您可以在 UI 上显示“ messageCount 条相关记录”。 如果某个会话中匹配到的消息条数 = 1，则 messageList 为匹配到的那条消息，您可以在 UI 上显示之，并高亮匹配关键词。 toJson 参数类型 : Map toJson() 参数描述 : 返回会话搜索结果单体属性的JSON格式 "},"api/guan-jian-lei/message/v2timmessagesearchresult.html":{"url":"api/guan-jian-lei/message/v2timmessagesearchresult.html","title":"V2TimMessageSearchResult","summary":"会话搜索结果","keywords":"","body":"V2TimMessageSearchResult 关键类描述 会话搜索结果 参数 totalCount 参数类型 : String 参数描述 : 如果您本次搜索【指定会话】，那么返回满足搜索条件的消息总数量； 如果您本次搜索【全部会话】，那么返回满足搜索条件的消息所在的所有会话总数量。 messageSearchResultItems 参数类型 : ListV2TimMessageSearchResultItem > 参数描述 : 如果您本次搜索【指定会话】，那么返回结果列表只包含该会话结果； 如果您本次搜索【全部会话】，那么对满足搜索条件的消息根据会话 ID 分组，分页返回分组结果； toJson 参数类型 : Map toJson() 参数描述 : 返回会话搜索结果的JSON格式 "},"api/guan-jian-lei/message/v2timmessagesearchparam.html":{"url":"api/guan-jian-lei/message/v2timmessagesearchparam.html","title":"V2TimMessageSearchParam","summary":"消息搜索参数","keywords":"","body":"V2TimMessageSearchParam 关键类描述 消息搜索参数 参数 conversationID 参数类型 : String 参数描述 : 搜索“全部会话”还是搜索“指定的会话”： 如果设置 conversationID == null，代表搜索全部会话。 如果设置 conversationID != null，代表搜索指定会话。 keywordList 参数类型 : List 参数描述 : 关键字列表，最多支持5个。当消息发送者以及消息类型均未指定时，关键字列表必须非空；否则，关键字列表可以为空。 type 参数类型 : int 参数描述 : 获取历史消息类型 具体见HistoryMsgGetTypeEnum userIDList 参数类型 : List 参数描述 : 指定 userID 发送的消息，最多支持5个。 messageTypeList 参数类型 : List 参数描述 : 指定搜索的消息类型集合，传 null 表示搜索支持的全部类型消息（V2TIMFaceElem 和 V2TIMGroupTipsElem 不支持）取值详情见MessageElemType。 searchTimePosition 参数类型 : int 参数描述 : 搜索的起始时间点。默认为0即代表从现在开始搜索。UTC 时间戳，单位：秒 searchTimePeriod 参数类型 : int 参数描述 : 从起始时间点开始的过去时间范围，单位秒。默认为0即代表不限制时间范围，传24x60x60代表过去一天。 pageSize 参数类型 : int 参数描述 : 每页结果数量：用于分页展示查找结果，如不希望分页可将其设置成 0，但如果结果太多，可能会带来性能问题。默认为100。 pageIndex 参数类型 : int 参数描述 : 分页的页号：用于分页展示查找结果，从零开始起步。 比如：您希望每页展示 10 条结果，请按照如下规则调用： 首次调用：通过参数 pageSize = 10, pageIndex = 0 调用 searchLocalMessage，从结果回调中的 totalCount 可以获知总共有多少条结果。 计算页数：可以获知总页数：totalPage = (totalCount % pageSize == 0) ? (totalCount / pageSize) : (totalCount / pageSize + 1) 。 再次调用：可以通过指定参数 pageIndex （pageIndex toJson 参数类型 : Map toJson() 参数描述 : 返回消息搜索参数的JSON格式 "},"api/guan-jian-lei/message/v2timmessagereceipt.html":{"url":"api/guan-jian-lei/message/v2timmessagereceipt.html","title":"V2TimMessageReceipt","summary":"消息已读回执","keywords":"","body":"V2TimMessageReceipt 关键类描述 消息已读回执 参数 userID 参数类型 : String 参数描述 : 发送次消息的用户id timestamp 参数类型 : int 参数描述 : C2C 对端用户标记会话已读的时间 groupID 参数类型 : String 参数描述 : 群 ID msgID 参数类型 : String 参数描述 : 消息 ID readCount 参数类型 : int 参数描述 : 群消息已读人数 unreadCount 参数类型 : int 参数描述 : 群消息未读人数 toJson 参数类型 : Map toJson() 参数描述 : 返回消息已读回执的JSON格式 "},"api/guan-jian-lei/message/v2timmessagechangeinfo.html":{"url":"api/guan-jian-lei/message/v2timmessagechangeinfo.html","title":"V2TimMessageChangeInfo","summary":"消息修改信息","keywords":"","body":"V2TimMessageChangeInfo 关键类描述 消息修改信息 参数 code 参数类型 : int 参数描述 : 修改结果码 desc 参数类型 : String 参数描述 : 描述信息 message 参数类型 : V2TimMessage 参数描述 : 修改后的信息 toJson 参数类型 : Map toJson() 参数描述 : 返回消息修改信息的JSON格式 "},"api/guan-jian-lei/topic/":{"url":"api/guan-jian-lei/topic/","title":"Topic","summary":"话题相关类型","keywords":"","body":"Topic Topic包含内容说明 话题相关类型 Topic包含类型目录 类型名称 描述 V2TimTopicInfo 话题信息属性 V2TIMTopicInfoResult 查询话题信息结果 "},"api/guan-jian-lei/topic/v2timtopicinfo.html":{"url":"api/guan-jian-lei/topic/v2timtopicinfo.html","title":"V2TimTopicInfo","summary":"话题信息属性","keywords":"","body":"V2TimTopicInfo 关键类描述 话题信息属性 参数 topicID 参数类型 : String 参数描述 : 话题 ID topicName 参数类型 : String 参数描述 : 话题名称 topicFaceUrl 参数类型 : String 参数描述 : 话题头像 introduction 参数类型 : String 参数描述 : 话题介绍 notification 参数类型 : String 参数描述 : 话题公告 isAllMute 参数类型 : bool 参数描述 : 话题全员禁言 selfMuteTime 参数类型 : int 参数描述 : 当前用户在话题中的禁言时间 customString 参数类型 : String 参数描述 : 话题自定义字段 recvOpt 参数类型 : int 参数描述 : 话题消息接收选项，修改话题消息接收选项请调用 setGroupReceiveMessageOpt 接口 0:在线正常接收消息，离线时会进行 APNs 推送 1:不会接收到消息，离线不会有推送通知 2:在线正常接收消息，离线不会有推送通知 draftText 参数类型 : String 参数描述 : 话题草稿 unreadCount 参数类型 : int 参数描述 : 话题消息未读数量 lastMessage 参数类型 : V2TimMessage 参数描述 : 话题最新消息 groupAtInfoList 参数类型 : ListV2TimGroupAtInfo > 参数描述 : 话题 at 信息列表 toJson 参数类型 : Map toJson() 参数描述 : 返回话题信息属性的JSON格式 "},"api/guan-jian-lei/topic/v2timtopicinforesult.html":{"url":"api/guan-jian-lei/topic/v2timtopicinforesult.html","title":"V2TIMTopicInfoResult","summary":"查询话题信息结果","keywords":"","body":"V2TIMTopicInfoResult 关键类描述 查询话题信息结果 参数 errorCode 参数类型 : int 参数描述 : 结果 0：成功；非0：失败 errorMessage 参数类型 : String 参数描述 : 如果获取失败，会返回错误信息 topicInfo 参数类型 : V2TimTopicInfo 参数描述 : 如果获取成功，会返回对应的话题信息 toJson 参数类型 : Map toJson() 参数描述 : 返回查询话题信息结果的JSON格式 "},"api/guan-jian-lei/listener/":{"url":"api/guan-jian-lei/listener/","title":"Listener","summary":"监听器相关类型","keywords":"","body":"Listener Listener包含内容说明 监听器相关类型 Listener包含类型目录 类型名称 描述 V2TimSDKListener SDK的回调 V2TimGroupListener 群组信息的监听器回调 V2TimConversationListener 聊天的监听器回调 V2TimFriendshipListener 资料关系链回调 V2TimAdvancedMsgListener 高级消息监听器 V2TimSignalingListener 信令消息监听器 "},"api/guan-jian-lei/listener/v2timsdklistener.html":{"url":"api/guan-jian-lei/listener/v2timsdklistener.html","title":"V2TimSDKListener","summary":"SDK的回调","keywords":"","body":"V2TimSDKListener 关键类描述 SDK的监听器回调 参数 onConnectFailed 参数类型 : ErrorCallback 参数描述 : 连接失败的回调函数 onConnectSuccess 参数类型 : VoidCallback 参数描述 : 连接成功的回调函数 onConnecting 参数类型 : VoidCallback 参数描述 : 正在连接的回调函数 onKickedOffline 参数类型 : VoidCallback 参数描述 : 被踢下线的回调函数 onSelfInfoUpdated 参数类型 : V2TimUserFullInfoCallback 参数描述 : 用户信息更新的回调函数 onUserSigExpired 参数类型 : VoidCallback 参数描述 : 用户凭证过期的回调函数 onUserStatusChanged 参数类型 : OnUserStatusChanged 参数描述 : 用户状态改变的回调函数 "},"api/guan-jian-lei/listener/v2timgrouplistener.html":{"url":"api/guan-jian-lei/listener/v2timgrouplistener.html","title":"V2TimGroupListener","summary":"群组信息的监听器回调","keywords":"","body":"V2TimGroupListener 关键类描述 群组信息的监听器回调 参数 onApplicationProcessed 参数类型 : OnApplicationProcessedCallback 参数描述 : 加群请求已经被群主或管理员处理了（只有申请人能够收到） onGrantAdministrator 参数类型 : OnGrantAdministratorCallback 参数描述 : 指定管理员身份 onGroupAttributeChanged 参数类型 : OnGroupAttributeChangedCallback 参数描述 : 群组属性被修改的回调函数 onGroupCreated 参数类型 : OnGroupCreatedCallback 参数描述 : 创建群（主要用于多端同步） onGroupDismissed 参数类型 : OnGroupDismissedCallback 参数描述 : 群组被解散（全员能收到） onGroupInfoChanged 参数类型 : OnGroupInfoChangedCallback 参数描述 : 群信息被修改（全员能收到） onGroupRecycled 参数类型 : OnGroupRecycledCallback 参数描述 : 群组被回收（全员能收到） onMemberEnter 参数类型 : OnMemberEnterCallback 参数描述 : 有用户进入群（全员能够收到） onMemberInfoChanged 参数类型 : OnMemberInfoChangedCallback 参数描述 : 群成员信息被修改（全员能收到） onMemberInvited 参数类型 : OnMemberInvitedCallback 参数描述 : 有用户被拉入某群（全员能够收到） onMemberKicked 参数类型 : OnMemberKickedCallback 参数描述 : 有用户被踢出某群（全员能够收到） onMemberLeave 参数类型 : OnMemberLeaveCallback 参数描述 : 有用户主动离开群（全员能够收到） onQuitFromGroup 参数类型 : OnQuitFromGroupCallback 参数描述 : 主动退出群组（主要用于多端同步，直播群（AVChatRoom）不支持） onReceiveJoinApplication 参数类型 : OnReceiveJoinApplicationCallback 参数描述 : 有新的加群请求（只有群主或管理员会收到） onReceiveRESTCustomData 参数类型 : OnReceiveRESTCustomDataCallback 参数描述 : 收到 RESTAPI 下发的自定义系统消息 onRevokeAdministrator 参数类型 : OnRevokeAdministratorCallback 参数描述 : 取消管理员身份 "},"api/guan-jian-lei/listener/v2timconversationlistener.html":{"url":"api/guan-jian-lei/listener/v2timconversationlistener.html","title":"V2TimConversationListener","summary":"聊天的监听器回调","keywords":"","body":"V2TimConversationListener 关键类描述 聊天的监听器回调 参数 onSyncServerStart 参数类型 : VoidCallback 参数描述 : 同步服务开始的回调函数 onSyncServerFinish 参数类型 : VoidCallback 参数描述 : 同步服务完成的回调函数 onSyncServerFailed 参数类型 : VoidCallback 参数描述 : 同步服务失败的回调函数 onNewConversation 参数类型 : OnNewConversation 参数描述 : 新会话的回调函数 onConversationChanged 参数类型 : OnConversationChangedCallback 参数描述 : 某些会话的关键信息发生变化（未读计数发生变化、最后一条消息被更新等等）的回调函数 onTotalUnreadMessageCountChanged 参数类型 : OnTotalUnreadMessageCountChanged 参数描述 : 会话未读总数改变的回调函数 "},"api/guan-jian-lei/listener/v2timfriendshiplistener.html":{"url":"api/guan-jian-lei/listener/v2timfriendshiplistener.html","title":"V2TimFriendshipListener","summary":"资料关系链回调","keywords":"","body":"V2TimFriendshipListener 关键类描述 资料关系链回调 参数 onFriendApplicationListAdded 参数类型 : OnFriendApplicationListAddedCallback 参数描述 : 好友申请新增通知 两种情况会收到这个回调： 自己申请加别人好友 别人申请加自己好友 onFriendApplicationListDeleted 参数类型 : OnFriendApplicationListDeletedCallback 参数描述 : 好友申请删除通知 四种情况会收到这个回调： 调用 deleteFriendApplication 主动删除好友申请 调用 refuseFriendApplication 拒绝好友申请 调用 acceptFriendApplication 同意好友申请 申请加别人好友被拒绝 onFriendApplicationListRead 参数类型 : OnFriendApplicationListReadCallback 参数描述 : 好友申请已读通知，如果调用 setFriendApplicationRead 设置好友申请列表已读，会收到这个回调（主要用于多端同步） onFriendListAdded 参数类型 : OnFriendListAddedCallback 参数描述 : 好友新增通知 onFriendListDeleted 参数类型 : OnFriendListDeletedCallback 参数描述 : 好友删除通知 两种情况会收到这个回调： 自己删除好友（单向和双向删除都会收到回调） 好友把自己删除（双向删除会收到） onBlackListAdd 参数类型 : OnBlackListAddCallback 参数描述 : 黑名单新增通知 onBlackListDeleted 参数类型 : OnBlackListDeletedCallback 参数描述 : 黑名单删除通知 onFriendInfoChanged 参数类型 : OnFriendInfoChangedCallback 参数描述 : 好友资料变更通知 "},"api/guan-jian-lei/listener/v2timadvancedmsglistener.html":{"url":"api/guan-jian-lei/listener/v2timadvancedmsglistener.html","title":"V2TimAdvancedMsgListener","summary":"高级消息监听器","keywords":"","body":"V2TimAdvancedMsgListener 关键类描述 高级消息监听器 参数 onRecvC2CReadReceipt 参数类型 : OnRecvC2CReadReceiptCallback 参数描述 : C2C 对端用户会话已读通知（如果对端用户调用 markC2CMessageAsRead 接口，自己会收到该回调，回调只会携带对端 userID 和对端已读 timestamp 信息） onRecvMessageRevoked 参数类型 : OnRecvMessageRevokedCallback 参数描述 : 收到消息撤回 onRecvNewMessage 参数类型 : OnRecvNewMessageCallback 参数描述 : 收到新消息 onSendMessageProgress 参数类型 : OnSendMessageProgressCallback 参数描述 : 上传消息进度事件 onRecvMessageModified 参数类型 : OnRecvMessageModified 参数描述 : 消息内容被修改 onRecvMessageReadReceipts 参数类型 : OnRecvMessageReadReceipts 参数描述 : 消息已读回执通知（如果自己发的消息支持已读回执，消息接收端调用了 sendMessageReadReceipts 接口，自己会收到该回调) "},"api/guan-jian-lei/listener/v2timsignalinglistener.html":{"url":"api/guan-jian-lei/listener/v2timsignalinglistener.html","title":"V2TimSignalingListener","summary":"信令消息监听器","keywords":"","body":"V2TimSignalingListener 关键类描述 信令消息监听器 参数 onReceiveNewInvitation 参数类型 : OnReceiveNewInvitationCallback 参数描述 : 收到邀请的回调 onInviteeAccepted 参数类型 : OnInviteeAcceptedCallback 参数描述 : 被邀请者接受邀请 onInviteeRejected 参数类型 : OnInviteeRejectedCallback 参数描述 : 被邀请者拒绝邀请 onInvitationCancelled 参数类型 : OnInvitationCancelledCallback 参数描述 : 邀请被取消 onInvitationTimeout 参数类型 : OnInvitationTimeoutCallback 参数描述 : 邀请超时 "},"api/guan-jian-lei/v2timvaluecallback.html":{"url":"api/guan-jian-lei/v2timvaluecallback.html","title":"V2TimValueCallback","summary":"携带请求结果与返回数据的类","keywords":"","body":"V2TimValueCallback 关键类描述 携带请求结果与返回数据的类 参数 code 参数类型 : int 参数描述 : 请求结果的错误码 data 参数类型 : T（根据不同接口而不同） 参数描述 : 请求结果携带的数据 desc 参数类型 : String 参数描述 : 请求结果的描述 toJson 参数类型 : Map toJson() 参数描述 : 返回携带请求结果与返回数据的类的JSON格式 "},"api/guan-jian-lei/v2timcallback.html":{"url":"api/guan-jian-lei/v2timcallback.html","title":"V2TimCallback","summary":"只携带请求结果的回调函数","keywords":"","body":"V2TimCallback 关键类描述 只携带请求结果的回调函数 参数 code 参数类型 : int 参数描述 : 请求结果的错误码 desc 参数类型 : String 参数描述 : 请求结果的描述 toJson 参数类型 : Map toJson() 参数描述 : 返回只携带请求结果的类的JSON格式 "},"api/enums/":{"url":"api/enums/","title":"Enums","summary":"IM API中使用到的枚举类型","keywords":"","body":"Enums Enums包含内容说明 IM API中使用到的枚举类型 枚举类型目录 枚举类型名称 说明 AllowType 设置用户信息时中，是否允许其他人加你好友 ConversationType 会话类型 V2TimConversationMarkType 会话标记类型 FriendApplicationTypeEnum 加好友类型 FriendResponseTypeEnum 建立好友关系时选择单向/双向好友关系 FriendTypeEnum 好友类型 GroupAddOptTypeEnum 群加群方式 GroupApplicationTypeEnum 入群申请类型 GroupMemberFilterTypeEnum 群成员过滤类型 GetGroupMessageReadMemberListFilter 获取群消息已读（未读）成员列表type GroupApplicationHandleResult 申请加群处理结果 GroupApplicationHandleStatus 加群申请处理状态 GroupChangeInfoType 群信息变化类型 GroupMemberRoleTypeEnum 群成员类型 GroupMemberRoleType 群成员类型 GroupTipsElemType 群通知消息类型 GroupType 群组类型 HistoryMessageGetType 获取历史消息类型 ListenerType 事件监听类型 LogLevelEnum 日志等级 MessageElemType 消息类型 MessagePriority 消息优先级 MessageStatus 消息状态 ReceiveMsgOptEnum 用户接收消息设置类型 SimpleMsgListenerType 简单消息监听器类型 UserStatusType 用户在线状态 V2TIM_IMAGE_TYPE 图片类型 V2TIMKeywordListMatchType 搜索信息匹配方法类型 "},"api/enums/allowtype.html":{"url":"api/enums/allowtype.html","title":"AllowType","summary":"设置用户信息时中，是否允许其他人加你好友","keywords":"","body":"AllowType 枚举类型介绍 设置用户信息时中，是否允许其他人加你好友 枚举值列表 枚举值名称 枚举类型描述 枚举值 V2TIM_FRIEND_ALLOW_ANY 允许任何人添加好友 0 V2TIM_FRIEND_NEED_CONFIRM 添加好友需要验证 1 V2TIM_FRIEND_DENY_ANY 拒绝任何人添加好友 2 "},"api/enums/conversationtype.html":{"url":"api/enums/conversationtype.html","title":"ConversationType","summary":"会话类型","keywords":"","body":"ConversationType 枚举类型介绍 会话类型 枚举值列表 枚举值名称 枚举类型描述 枚举值 V2TIM_C2C 单聊 1 V2TIM_GROUP 群聊 2 "},"sdkapi/enums/v2timconversationmarktype.html":{"url":"sdkapi/enums/v2timconversationmarktype.html","title":"V2TimConversationMarkType","summary":"会话标记类型","keywords":"","body":"V2TimConversationMarkType 枚举类型介绍 会话标记类型 枚举值列表 枚举值名称 枚举类型描述 枚举值 V2TIM_CONVERSATION_MARK_TYPE_STAR 会话标星 0 V2TIM_CONVERSATION_MARK_TYPE_UNREAD 会话标记未读（重要会话） 1 V2TIM_CONVERSATION_MARK_TYPE_FOLD 会话折叠 2 V2TIM_CONVERSATION_MARK_TYPE_HIDE 会话隐藏 3 "},"api/enums/friendapplicationtypeenum.html":{"url":"api/enums/friendapplicationtypeenum.html","title":"FriendApplicationTypeEnum","summary":"加好友类型","keywords":"","body":"FriendApplicationTypeEnum 枚举类型介绍 加好友类型 枚举值列表 枚举值名称 枚举类型描述 枚举值 V2TIM_FRIEND_APPLICATION_COME_IN 别人发给我的加好友请求 1 V2TIM_FRIEND_APPLICATION_SEND_OUT 我发给别人的加好友请求 2 V2TIM_FRIEND_APPLICATION_BOTH 别人发给我的和我发给别人的加好友请求，仅在拉取时有效 3 "},"api/enums/friendresponsetypeenum.html":{"url":"api/enums/friendresponsetypeenum.html","title":"FriendResponseTypeEnum","summary":"建立好友关系时选择单向/双向好友关系","keywords":"","body":"FriendResponseTypeEnum 枚举类型介绍 建立好友关系时选择建立单向/双向好友关系 枚举值列表 枚举值名称 枚举类型描述 枚举值 V2TIM_FRIEND_ACCEPT_AGREE 同意添加单向好友 0 V2TIM_FRIEND_ACCEPT_AGREE_AND_ADD 同意并添加为双向好友 1 "},"api/enums/friendtypeenum.html":{"url":"api/enums/friendtypeenum.html","title":"FriendTypeEnum","summary":"好友类型","keywords":"","body":"FriendTypeEnum 枚举类型介绍 好友类型 枚举值列表 枚举值名称 枚举类型描述 枚举值 V2TIM_FRIEND_TYPE_SINGLE 单向好友 1 V2TIM_FRIEND_TYPE_BOTH 互为好友 2 "},"api/enums/groupaddopttypeenum.html":{"url":"api/enums/groupaddopttypeenum.html","title":"GroupAddOptTypeEnum","summary":"群加群方式","keywords":"","body":"GroupAddOptTypeEnum 枚举类型介绍 群加群方式 枚举值列表 枚举值名称 枚举类型描述 枚举值 V2TIM_GROUP_ADD_FORBID 禁止加群 0 V2TIM_GROUP_ADD_AUTH 需要管理员审批 1 V2TIM_GROUP_ADD_ANY 任何人可以加入 2 "},"api/enums/groupapplicationtypeenum.html":{"url":"api/enums/groupapplicationtypeenum.html","title":"GroupApplicationTypeEnum","summary":"入群申请类型","keywords":"","body":"GroupApplicationTypeEnum 枚举类型介绍 入群申请类型 枚举值列表 枚举值名称 枚举类型描述 枚举值 V2TIM_GROUP_APPLICATION_GET_TYPE_JOIN 申请入群 0 V2TIM_GROUP_APPLICATION_GET_TYPE_INVITE 被邀请入群 1 "},"api/enums/groupmemberfiltertypeenum.html":{"url":"api/enums/groupmemberfiltertypeenum.html","title":"GroupMemberFilterTypeEnum","summary":"群成员过滤类型","keywords":"","body":"GroupMemberFilterTypeEnum 枚举类型介绍 群成员过滤类型 枚举值列表 枚举值名称 枚举类型描述 枚举值 V2TIM_GROUP_MEMBER_FILTER_ALL 全部成员 0 V2TIM_GROUP_MEMBER_FILTER_OWNER 群主 1 V2TIM_GROUP_MEMBER_FILTER_ADMIN 管理员 2 V2TIM_GROUP_MEMBER_FILTER_COMMON 普通成员 4 "},"api/enums/getgroupmessagereadmemberlistfilter.html":{"url":"api/enums/getgroupmessagereadmemberlistfilter.html","title":"GetGroupMessageReadMemberListFilter","summary":"获取群消息已读（未读）成员列表type","keywords":"","body":"GetGroupMessageReadMemberListFilter 枚举类型介绍 获取群消息已读（未读）成员列表type 枚举值列表 枚举值名称 枚举类型描述 枚举值 V2TIM_GROUP_MESSAGE_READ_MEMBERS_FILTER_READ 已读成员 0 V2TIM_GROUP_MESSAGE_READ_MEMBERS_FILTER_UNREAD 未读成员 1 "},"api/enums/groupapplicationhandleresult.html":{"url":"api/enums/groupapplicationhandleresult.html","title":"GroupApplicationHandleResult","summary":"申请加群处理结果","keywords":"","body":"GroupApplicationHandleResult 枚举类型介绍 申请加群处理结果 枚举值列表 枚举值名称 枚举类型描述 枚举值 V2TIM_GROUP_APPLICATION_HANDLE_RESULT_REFUSE 拒绝申请 0 V2TIM_GROUP_APPLICATION_HANDLE_RESULT_AGREE 同意申请 1 "},"api/enums/groupapplicationhandlestatus.html":{"url":"api/enums/groupapplicationhandlestatus.html","title":"GroupApplicationHandleStatus","summary":"加群申请处理状态","keywords":"","body":"GroupApplicationHandleStatus 枚举类型介绍 加群申请处理状态 枚举值列表 枚举值名称 枚举类型描述 枚举值 V2TIM_GROUP_APPLICATION_HANDLE_STATUS_UNHANDLED 未处理 0 V2TIM_GROUP_APPLICATION_HANDLE_STATUS_HANDLED_BY_OTHER 被他人处理 1 V2TIM_GROUP_APPLICATION_HANDLE_STATUS_HANDLED_BY_SELF 被自己处理 2 "},"api/enums/groupchangeinfotype.html":{"url":"api/enums/groupchangeinfotype.html","title":"GroupChangeInfoType","summary":"群信息变化类型","keywords":"","body":"GroupChangeInfoType 枚举类型介绍 群信息变化类型 枚举值列表 枚举值名称 枚举类型描述 枚举值 V2TIM_GROUP_INFO_CHANGE_TYPE_NAME 群名修改 1 V2TIM_GROUP_INFO_CHANGE_TYPE_INTRODUCTION 群简介修改 2 V2TIM_GROUP_INFO_CHANGE_TYPE_NOTIFICATION 群公告修改 3 V2TIM_GROUP_INFO_CHANGE_TYPE_FACE_URL 群头像修改 4 V2TIM_GROUP_INFO_CHANGE_TYPE_OWNER 群主变更 5 V2TIM_GROUP_INFO_CHANGE_TYPE_CUSTOM 群自定义字段变更 6 V2TIM_GROUP_INFO_CHANGE_TYPE_SHUT_UP_ALL 全员禁言字段变更 7 "},"api/enums/groupmemberroletypeenum.html":{"url":"api/enums/groupmemberroletypeenum.html","title":"GroupMemberRoleTypeEnum","summary":"群成员类型","keywords":"","body":"GroupMemberRoleTypeEnum 枚举类型介绍 群成员类型 枚举值列表 枚举值名称 枚举类型描述 枚举值 V2TIM_GROUP_MEMBER_ROLE_MEMBER 群成员 1 V2TIM_GROUP_MEMBER_ROLE_ADMIN 群管理员 2 V2TIM_GROUP_MEMBER_ROLE_OWNER 群主 3 "},"api/enums/groupmemberroletype.html":{"url":"api/enums/groupmemberroletype.html","title":"GroupMemberRoleType","summary":"群成员类型","keywords":"","body":"GroupMemberRoleType 枚举类型介绍 群成员类型 枚举值列表 枚举值名称 枚举类型描述 枚举值 V2TIM_GROUP_MEMBER_ROLE_MEMBER 群成员 200 V2TIM_GROUP_MEMBER_ROLE_ADMIN 群管理员 300 V2TIM_GROUP_MEMBER_ROLE_OWNER 群主 400 "},"api/enums/grouptipselemtype.html":{"url":"api/enums/grouptipselemtype.html","title":"GroupTipsElemType","summary":"群通知消息类型","keywords":"","body":"GroupTipsElemType 枚举类型介绍 群通知消息类型 枚举值列表 枚举值名称 枚举类型描述 枚举值 V2TIM_GROUP_TIPS_TYPE_JOIN 主动入群（memberList 加入群组，非 Work 群有效） 1 V2TIM_GROUP_TIPS_TYPE_INVITE 被邀请入群（opMember 邀请 memberList 入群，Work 群有效） 2 V2TIM_GROUP_TIPS_TYPE_QUIT 退出群组 3 V2TIM_GROUP_TIPS_TYPE_KICKED 踢出群 (opMember 把 memberList 踢出群组) 4 V2TIM_GROUP_TIPS_TYPE_SET_ADMIN 设置管理员 (opMember 把 memberList 设置为管理员) 5 V2TIM_GROUP_TIPS_TYPE_CANCEL_ADMIN 取消管理员 (opMember 取消 memberList 管理员身份) 6 V2TIM_GROUP_TIPS_TYPE_GROUP_INFO_CHANGE 群资料变更 (opMember 修改群资料：groupName & introduction & notification & faceUrl & owner & custom) 7 V2TIM_GROUP_TIPS_TYPE_MEMBER_INFO_CHANGE 群成员资料变更 (opMember 修改群成员资料：muteTime) 8 "},"api/enums/grouptype.html":{"url":"api/enums/grouptype.html","title":"GroupType","summary":"群组类型","keywords":"","body":"GroupType 枚举类型介绍 群组类型 枚举值列表 枚举值名称 枚举类型描述 枚举值 AVChatRoom 直播群 AVChatRoom Meeting 会议群 Meeting Public 公开群 Public Work 工作群 Work Community 社群 Community "},"api/enums/historymsggettypeenum.html":{"url":"api/enums/historymsggettypeenum.html","title":"HistoryMsgGetTypeEnum","summary":"获取历史消息类型","keywords":"","body":"HistoryMsgGetTypeEnum 枚举类型介绍 获取历史消息类型 枚举值列表 枚举值名称 枚举类型描述 枚举值 V2TIM_GET_CLOUD_OLDER_MSG 获取云端更老的消息 1 V2TIM_GET_CLOUD_NEWER_MSG 获取云端更新的消息 2 V2TIM_GET_LOCAL_OLDER_MSG 获取本地更老的消息 3 V2TIM_GET_LOCAL_NEWER_MSG 获取本地更新的消息 4 "},"api/enums/listenertype.html":{"url":"api/enums/listenertype.html","title":"ListenerType","summary":"事件监听类型","keywords":"","body":"ListenerType 枚举类型介绍 事件监听类型 枚举值列表 枚举值名称 枚举类型描述 枚举值 advancedMsgListener 高级消息监听 advancedMsgListener conversationListener 会话监听 conversationListener friendListener 好友关系链监听 friendListener groupListener 群组监听 groupListener initSDKListener 初始化监听 initSDKListener signalingListener 信令监听 signalingListener simpleMsgListener 基本消息监听 simpleMsgListener "},"api/enums/loglevelenum.html":{"url":"api/enums/loglevelenum.html","title":"LogLevelEnum","summary":"日志登记","keywords":"","body":"LogLevelEnum 枚举类型介绍 日志登记 枚举值列表 枚举值名称 枚举类型描述 枚举值 V2TIM_LOG_NONE 无日志 0 V2TIM_LOG_ALL 全量日志 2 V2TIM_LOG_DEBUG 输出 DEBUG，INFO，WARNING，ERROR 级别的 log 3 V2TIM_LOG_INFO 输出 INFO，WARNING，ERROR 级别的 log 4 V2TIM_LOG_WARN 输出 WARNING，ERROR 级别的 log 5 V2TIM_LOG_ERROR 输出 ERROR 级别的 log 6 "},"api/enums/messageelemtype.html":{"url":"api/enums/messageelemtype.html","title":"MessageElemType","summary":"消息类型","keywords":"","body":"MessageElemType 枚举类型介绍 消息类型 枚举值列表 枚举值名称 枚举类型描述 枚举值 V2TIM_ELEM_TYPE_NONE 没有元素 0 V2TIM_ELEM_TYPE_TEXT 文本消息 1 V2TIM_ELEM_TYPE_CUSTOM 自定义消息 2 V2TIM_ELEM_TYPE_IMAGE 图片消息 3 V2TIM_ELEM_TYPE_SOUND 语音消息 4 V2TIM_ELEM_TYPE_VIDEO 视频消息 5 V2TIM_ELEM_TYPE_FILE 文件消息 6 V2TIM_ELEM_TYPE_LOCATION 地理位置消息 7 V2TIM_ELEM_TYPE_FACE 表情消息 8 V2TIM_ELEM_TYPE_GROUP_TIPS 群 Tips 消息（存消息列表） 9 V2TIM_ELEM_TYPE_MERGER 合并消息 10 "},"api/enums/messagepriority.html":{"url":"api/enums/messagepriority.html","title":"MessagePriority","summary":"消息优先级","keywords":"","body":"MessagePriority 枚举类型介绍 消息优先级 枚举值列表 枚举值名称 枚举类型描述 枚举值 V2TIM_PRIORITY_DEFAULT 默认为普通优先级 0 V2TIM_PRIORITY_HIGH 高优先级，一般用于礼物等重要消息 1 V2TIM_PRIORITY_NORMAL 普通优先级，一般用于普通消息 2 V2TIM_PRIORITY_LOW 低优先级，一般用于点赞消息 3 "},"api/enums/messagestatus.html":{"url":"api/enums/messagestatus.html","title":"MessageStatus","summary":"消息状态","keywords":"","body":"MessageStatus 枚举类型介绍 消息状态 枚举值列表 枚举值名称 枚举类型描述 枚举值 V2TIM_MSG_STATUS_SENDING 消息发送中 1 V2TIM_MSG_STATUS_SEND_SUCC 消息发送成功 2 V2TIM_MSG_STATUS_SEND_FAIL 消息发送失败 3 V2TIM_MSG_STATUS_HAS_DELETED 消息被删除 4 V2TIM_MSG_STATUS_LOCAL_IMPORTED 导入到本地的消息 5 V2TIM_MSG_STATUS_LOCAL_REVOKED 被撤销的消息 6 "},"api/enums/receivemsgoptenum.html":{"url":"api/enums/receivemsgoptenum.html","title":"ReceiveMsgOptEnum","summary":"用户接收消息设置类型","keywords":"","body":"ReceiveMsgOptEnum 枚举类型介绍 用户接收消息设置类型 枚举值列表 枚举值名称 枚举类型描述 枚举值 V2TIM_RECEIVE_MESSAGE 在线正常接收消息，离线时会进行离线推送 0 V2TIM_NOT_RECEIVE_MESSAGE 不会接收到消息 1 V2TIM_RECEIVE_NOT_NOTIFY_MESSAGE 在线正常接收消息，离线不会有推送通知 2 "},"api/enums/simplemsglistenertype.html":{"url":"api/enums/simplemsglistenertype.html","title":"SimpleMsgListenerType","summary":"简单消息监听器类型","keywords":"","body":"SimpleMsgListenerType 枚举类型介绍 简单消息监听器类型 枚举值列表 枚举值名称 枚举类型描述 枚举值 onRecvC2CTextMessage 监听文本消息 0 onRecvC2CCustomMessage 监听自定义消息 1 onRecvGroupTextMessage 监听群组文本消息 2 onRecvGroupCustomMessage 监听群组自定义消息 3 "},"api/enums/userstatustype.html":{"url":"api/enums/userstatustype.html","title":"UserStatusType","summary":"用户在线状态","keywords":"","body":"UserStatusType 枚举类型介绍 用户在线状态 枚举值列表 枚举值名称 枚举类型描述 枚举值 V2TIM_USER_STATUS_ONLINE 在线状态 1 V2TIM_USER_STATUS_OFFLINE 离线状态 2 V2TIM_USER_STATUS_UNLOGINED 未登录过 3 "},"api/enums/v2timkeywordlistmatchtype.html":{"url":"api/enums/v2timkeywordlistmatchtype.html","title":"V2TIMKeywordListMatchType","summary":"搜索信息匹配方法类型","keywords":"","body":"V2TIMKeywordListMatchType 枚举类型介绍 搜索信息匹配方法类型 枚举值列表 枚举值名称 枚举类型描述 枚举值 KEYWORD_LIST_MATCH_TYPE_OR 或 搜索 0 KEYWORD_LIST_MATCH_TYPE_AND 与 搜索 1 "},"api/callbacks/":{"url":"api/callbacks/","title":"Callbacks","summary":"IM API中使用到的回调函数类型","keywords":"","body":"Callbacks Callbacks包含内容说明 IM API中使用到的回调函数类型 回调函数目录 回调函数名称 说明 VoidCallback 无返回参数的回调函数 ErrorCallback 请求失败的回调函数 OnApplicationProcessedCallback 加群请求已经被群主或管理员处理了（只有申请人能够收到） OnBlackListAddCallback 黑名单列表新增用户的回调 OnBlackListDeletedCallback 黑名单列表删除用户的回调 OnConversationChangedCallback 某些会话的关键信息发生变化 OnFriendApplicationListAddedCallback 好友请求数量增加的回调 OnFriendApplicationListDeletedCallback 好友请求数量减少的回调 OnFriendApplicationListReadCallback 好友请求已读的回调 OnFriendInfoChangedCallback 好友信息改变的回调 OnFriendListAddedCallback 好友列表增加人员的回调 OnFriendListDeletedCallback 好友列表减少人员的回调 OnGrantAdministratorCallback 指定管理员身份 OnGroupAttributeChangedCallback 收到群属性更新的回调 OnGroupCreatedCallback 创建群（主要用于多端同步） OnGroupDismissedCallback 群被解散了（全员能收到） OnGroupInfoChangedCallback 群信息被修改（全员能收到） OnGroupRecycledCallback 群被回收（全员能收到） OnInvitationCancelledCallback 邀请被取消的回调 OnInvitationTimeoutCallback 邀请超时的回调 OnInviteeAcceptedCallback 邀请被接受的回调 OnInviteeRejectedCallback 邀请被拒绝的回调 OnMemberEnterCallback 有用户加入群（全员能够收到） OnMemberInfoChangedCallback 群成员信息被修改，仅支持禁言通知（全员能收到） OnMemberInvitedCallback 某些人被拉入某群（全员能够收到） OnMemberKickedCallback 某些人被踢出某群（全员能够收到） OnMemberLeaveCallback 有用户离开群（全员能够收到） OnNewConversation 有新的会话 OnQuitFromGroupCallback 主动退出群组（主要用于多端同步，直播群（AVChatRoom）不支持） OnReceiveJoinApplicationCallback 有新的加群请求（只有群主或管理员会收到） OnReceiveNewInvitationCallback 获取新的邀请的回调 OnReceiveRESTCustomDataCallback 收到 RESTAPI 下发的自定义系统消息 OnRecvC2CReadReceiptCallback C2C 对端用户会话已读通知 OnRecvMessageModified 消息内容被修改 OnRecvMessageReadReceipts 消息已读回执通知 OnRecvMessageRevokedCallback 收到消息撤回的通知 OnRecvNewMessageCallback 收到新消息 OnRevokeAdministratorCallback 取消管理员身份 OnSendMessageProgressCallback 文件上传进度回调 OnTotalUnreadMessageCountChanged 会话未读总数变更通知 OnUserStatusChanged 用户状态变更通知 V2TimUserFullInfoCallback 登录用户的资料发生了更新更新 "},"api/callbacks/voidcallback.html":{"url":"api/callbacks/voidcallback.html","title":"VoidCallback","summary":"无返回参数的回调函数","keywords":"","body":"VoidCallback 功能介绍 无返回参数的回调函数 回调函数模版 VoidCallback = void Function() 参数详解 此回调函数无返回值 代码示例 // 1. 从即时通信 IM 控制台获取应用 SDKAppID。 int sdkAppID = 0; // 2. 添加 V2TimSDKListener 的事件监听器，sdkListener 是 V2TimSDKListener 的实现类 V2TimSDKListener sdkListener = V2TimSDKListener( onConnectSuccess: () { // SDK 已经成功连接到腾讯云服务器 }, onConnecting: () { // SDK 正在连接到腾讯云服务器 }, onKickedOffline: () { // 当前用户被踢下线，此时可以 UI 提示用户，并再次调用 V2TIMManager 的 login() 函数重新登录。 }, onUserSigExpired: () { // 在线时票据过期：此时您需要生成新的 userSig 并再次调用 V2TIMManager 的 login() 函数重新登录。 }, ); // 3.初始化SDK TencentImSDKPlugin.v2TIMManager.initSDK( sdkAppID: sdkAppID, // SDKAppID loglevel: LogLevelEnum.V2TIM_LOG_ALL, // 日志登记等级 listener: sdkListener, // 事件监听器 ); "},"api/callbacks/errorcallback.html":{"url":"api/callbacks/errorcallback.html","title":"ErrorCallback","summary":"请求失败的回调函数","keywords":"","body":"ErrorCallback 功能介绍 请求失败的回调函数 回调函数模版 ErrorCallback = void Function( int code, String error ) 参数详解 参数名称 参数类型 参数描述 code int 请求结果错误码 error String 请求结果错误描述 代码示例 // 1. 从即时通信 IM 控制台获取应用 SDKAppID。 int sdkAppID = 0; // 2. 添加 V2TimSDKListener 的事件监听器，sdkListener 是 V2TimSDKListener 的实现类 V2TimSDKListener sdkListener = V2TimSDKListener( onConnectFailed: (code, error) { print(code);//请求结果错误码 print(error);//请求结果错误描述 },// 连接失败的回调函数 ); // 3.初始化 TencentImSDKPlugin.v2TIMManager.initSDK( sdkAppID: sdkAppID, loglevel: LogLevelEnum.V2TIM_LOG_ALL,// 日志登记等级 listener: sdkListener, ); "},"api/callbacks/onapplicationprocessedcallback.html":{"url":"api/callbacks/onapplicationprocessedcallback.html","title":"OnApplicationProcessedCallback","summary":"加群请求已经被群主或管理员处理了（只有申请人能够收到）","keywords":"","body":"OnApplicationProcessedCallback 功能介绍 加群请求已经被群主或管理员处理了（只有申请人能够收到） 回调函数模版 OnApplicationProcessedCallback = void Function( String groupID, V2TimGroupMemberInfo opUser, bool isAgreeJoin, String opReason ) 参数详解 参数名称 参数类型 参数描述 groupID String 群 ID opUser V2TimGroupMemberInfo 处理人 isAgreeJoin bool 是否同意加群 opReason String 处理原因 代码示例 //设置群组监听器 V2TimGroupListener listener = V2TimGroupListener( onApplicationProcessed: (String groupID, V2TimGroupMemberInfo opUser, bool isAgreeJoin, String opReason) async { //加群请求已经被群主或管理员处理了（只有申请人能够收到） //groupID 群 ID //opUser 处理人 //isAgreeJoin 是否同意加群 //opReason 处理原因 }, ); //添加群组监听器 TencentImSDKPlugin.v2TIMManager.addGroupListener(listener: listener); "},"api/callbacks/onblacklistaddcallback.html":{"url":"api/callbacks/onblacklistaddcallback.html","title":"OnBlackListAddCallback","summary":"黑名单列表新增用户的回调","keywords":"","body":"OnBlackListAddCallback 功能介绍 黑名单列表新增用户的回调 回调函数模版 OnBlackListAddCallback = void Function( List infoList ) 参数详解 参数名称 参数类型 参数描述 infoList ListV2TimFriendInfo > 新增的用户信息列表 代码示例 //设置关系链监听器 V2TimFriendshipListener listener = V2TimFriendshipListener( onBlackListAdd: (List infoList) async { //黑名单列表新增用户的回调 //infoList 新增的用户信息列表 } ); TencentImSDKPlugin.v2TIMManager .getFriendshipManager() .addFriendListener(listener: listener); //添加关系链监听器 "},"api/callbacks/onblacklistdeletedcallback.html":{"url":"api/callbacks/onblacklistdeletedcallback.html","title":"OnBlackListDeletedCallback","summary":"黑名单列表删除用户的回调","keywords":"","body":"OnBlackListDeletedCallback 功能介绍 黑名单列表删除用户的回调 回调函数模版 OnBlackListDeletedCallback = void Function( List userList ) 参数详解 参数名称 参数类型 参数描述 userList List 被删除的用户id列表 代码示例 //设置关系链监听器 V2TimFriendshipListener listener = V2TimFriendshipListener( onBlackListDeleted: (List userList) async { //黑名单列表删除的回调 //userList 被删除的用户id列表 } ); TencentImSDKPlugin.v2TIMManager .getFriendshipManager() .addFriendListener(listener: listener); //添加关系链监听器 "},"api/callbacks/onconversationchangedcallback.html":{"url":"api/callbacks/onconversationchangedcallback.html","title":"OnConversationChangedCallback","summary":"某些会话的关键信息发生变化","keywords":"","body":"OnConversationChangedCallback 功能介绍 某些会话的关键信息发生变化 未读计数发生变化、最后一条消息被更新等等，可以根据会话的 lastMessage 的 timestamp 重新对会话列表做排序 回调函数模版 OnConversationChangedCallback = void Function( List conversationList ) 参数详解 参数名称 参数类型 参数描述 conversationList ListV2TimConversation > 改变的会话列表 代码示例 //设置会话监听器 V2TimConversationListener listener = V2TimConversationListener( onConversationChanged: (List conversationList) => { //某些会话的关键信息发生变化未读计数发生变化、最后一条消息被更新等等），可以根据会话的 lastMessage -> timestamp 重新对会话列表做排序 //conversationList 改变的会话列表 } ); //添加会话监听器 TencentImSDKPlugin.v2TIMManager .getConversationManager() .addConversationListener(listener: listener); //需要新增的会话监听器 "},"api/callbacks/onfriendapplicationlistaddedcallback.html":{"url":"api/callbacks/onfriendapplicationlistaddedcallback.html","title":"OnFriendApplicationListAddedCallback","summary":"好友请求数量增加的回调","keywords":"","body":"OnFriendApplicationListAddedCallback 功能介绍 好友请求数量增加的回调 回调函数模版 OnFriendApplicationListAddedCallback = void Function( List applicationList ) 参数详解 参数名称 参数类型 参数描述 applicationList ListV2TimFriendApplication > 新增的好友请求信息列表 代码示例 //设置关系链监听器 V2TimFriendshipListener listener = V2TimFriendshipListener( onFriendApplicationListAdded: (List applicationList) async { //好友请求数量增加的回调 //applicationList 新增的好友请求信息列表 } ); TencentImSDKPlugin.v2TIMManager .getFriendshipManager() .addFriendListener(listener: listener); //添加关系链监听器 "},"api/callbacks/onfriendapplicationlistdeletedcallback.html":{"url":"api/callbacks/onfriendapplicationlistdeletedcallback.html","title":"OnFriendApplicationListDeletedCallback","summary":"好友请求数量减少的回调","keywords":"","body":"OnFriendApplicationListDeletedCallback 功能介绍 好友请求数量减少的回调 回调函数模版 OnFriendApplicationListDeletedCallback = void Function( List userIDList ) 参数详解 参数名称 参数类型 参数描述 userIDList List 减少的好友请求的请求用户id列表 代码示例 //设置关系链监听器 V2TimFriendshipListener listener = V2TimFriendshipListener( onFriendApplicationListDeleted: (List userIDList) async { //好友请求数量减少的回调 //减少的好友请求的请求用户id列表 } ); TencentImSDKPlugin.v2TIMManager .getFriendshipManager() .addFriendListener(listener: listener); //添加关系链监听器 "},"api/callbacks/onfriendapplicationlistreadcallback.html":{"url":"api/callbacks/onfriendapplicationlistreadcallback.html","title":"OnFriendApplicationListReadCallback","summary":"好友请求已读的回调","keywords":"","body":"OnFriendApplicationListReadCallback 功能介绍 好友请求已读的回调 回调函数模版 OnFriendApplicationListReadCallback = void Function() 参数详解 该回调函数无参数 代码示例 //设置关系链监听器 V2TimFriendshipListener listener = V2TimFriendshipListener( onFriendApplicationListRead: () async { //好友请求已读的回调 } ); TencentImSDKPlugin.v2TIMManager .getFriendshipManager() .addFriendListener(listener: listener); //添加关系链监听器 "},"api/callbacks/onfriendinfochangedcallback.html":{"url":"api/callbacks/onfriendinfochangedcallback.html","title":"OnFriendInfoChangedCallback","summary":"好友信息改变的回调","keywords":"","body":"OnFriendInfoChangedCallback 功能介绍 好友信息改变的回调 回调函数模版 OnFriendInfoChangedCallback = void Function( List infoList ) 参数详解 参数名称 参数类型 参数描述 infoList ListV2TimFriendInfo > 好友信息改变的好友列表 代码示例 //设置关系链监听器 V2TimFriendshipListener listener = V2TimFriendshipListener( onFriendInfoChanged: (List infoList) async { //好友信息改变的回调 //infoList 好友信息改变的好友列表 } ); TencentImSDKPlugin.v2TIMManager .getFriendshipManager() .addFriendListener(listener: listener); //添加关系链监听器 "},"api/callbacks/onfriendlistaddedcallback.html":{"url":"api/callbacks/onfriendlistaddedcallback.html","title":"OnFriendListAddedCallback","summary":"好友列表增加人员的回调","keywords":"","body":"OnFriendListAddedCallback 功能介绍 好友列表增加人员的回调 回调函数模版 OnFriendListAddedCallback = void Function( List users ) 参数详解 参数名称 参数类型 参数描述 users ListV2TimFriendInfo > 新增的好友信息列表 代码示例 //设置关系链监听器 V2TimFriendshipListener listener = V2TimFriendshipListener( onFriendListAdded: (List users) async { //好友列表增加人员的回调 //users 新增的好友信息列表 } ); TencentImSDKPlugin.v2TIMManager .getFriendshipManager() .addFriendListener(listener: listener); //添加关系链监听器 "},"api/callbacks/onfriendlistdeletedcallback.html":{"url":"api/callbacks/onfriendlistdeletedcallback.html","title":"OnFriendListDeletedCallback","summary":"好友列表减少人员的回调","keywords":"","body":"OnFriendListDeletedCallback 功能介绍 好友列表减少人员的回调 回调函数模版 OnFriendListDeletedCallback = void Function( List userList ) 参数详解 参数名称 参数类型 参数描述 userList List 减少的好友id列表 代码示例 //设置关系链监听器 V2TimFriendshipListener listener = V2TimFriendshipListener( onFriendListDeleted: (List userList) async { //好友列表减少人员的回调 //userList 减少的好友id列表 } ); TencentImSDKPlugin.v2TIMManager .getFriendshipManager() .addFriendListener(listener: listener); //添加关系链监听器 "},"api/callbacks/ongrantadministratorcallback.html":{"url":"api/callbacks/ongrantadministratorcallback.html","title":"OnGrantAdministratorCallback","summary":"指定管理员身份","keywords":"","body":"OnGrantAdministratorCallback 功能介绍 指定管理员身份 回调函数模版 OnGrantAdministratorCallback = void Function( String groupID, V2TimGroupMemberInfo opUser, List memberList ) 参数详解 参数名称 参数类型 参数描述 groupID String 群 ID opUser V2TimGroupMemberInfo 处理人 memberList ListV2TimGroupMemberInfo > 被处理的群成员 代码示例 //设置群组监听器 V2TimGroupListener listener = V2TimGroupListener( onGrantAdministrator: (String groupID, V2TimGroupMemberInfo opUser, List memberList) async { //指定管理员身份 //groupID 群 ID //opUser 处理人 //memberList 被处理的群成员 } ); //添加群组监听器 TencentImSDKPlugin.v2TIMManager.addGroupListener(listener: listener); "},"api/callbacks/ongroupattributechangedcallback.html":{"url":"api/callbacks/ongroupattributechangedcallback.html","title":"OnGroupAttributeChangedCallback","summary":"收到群属性更新的回调","keywords":"","body":"OnGroupAttributeChangedCallback 功能介绍 收到群属性更新的回调 回调函数模版 OnGroupAttributeChangedCallback = void Function( String groupID, Map groupAttributeMap ) 参数详解 参数名称 参数类型 参数描述 groupID String 群 ID groupAttributeMap Map 群的所有属性 代码示例 //设置群组监听器 V2TimGroupListener listener = V2TimGroupListener( onGroupAttributeChanged: (String groupID, Map groupAttributeMap) async { //收到群属性更新的回调 //groupID 群 ID //groupAttributeMap 群的所有属性 } ); //添加群组监听器 TencentImSDKPlugin.v2TIMManager.addGroupListener(listener: listener); "},"api/callbacks/ongroupcreatedcallback.html":{"url":"api/callbacks/ongroupcreatedcallback.html","title":"OnGroupCreatedCallback","summary":"创建群（主要用于多端同步）","keywords":"","body":"OnGroupCreatedCallback 功能介绍 创建群（主要用于多端同步） 回调函数模版 OnGroupCreatedCallback = void Function( String groupID ) 参数详解 参数名称 参数类型 参数描述 groupID String 群 ID 代码示例 //设置群组监听器 V2TimGroupListener listener = V2TimGroupListener( onGroupCreated: (String groupID) async { //创建群（主要用于多端同步） //groupID 群 ID } ); //添加群组监听器 TencentImSDKPlugin.v2TIMManager.addGroupListener(listener: listener); "},"api/callbacks/ongroupdismissedcallback.html":{"url":"api/callbacks/ongroupdismissedcallback.html","title":"OnGroupDismissedCallback","summary":"群被解散了（全员能收到）","keywords":"","body":"OnGroupDismissedCallback 功能介绍 群被解散了（全员能收到） 回调函数模版 OnGroupDismissedCallback = void Function( String groupID, V2TimGroupMemberInfo opUser ) 参数详解 参数名称 参数类型 参数描述 groupID String 群 ID opUser V2TimGroupMemberInfo 处理人 代码示例 //设置群组监听器 V2TimGroupListener listener = V2TimGroupListener( onGroupDismissed: (String groupID, V2TimGroupMemberInfo opUser) async { //群被解散了（全员能收到） //groupID 群 ID //opUser 处理人 } ); //添加群组监听器 TencentImSDKPlugin.v2TIMManager.addGroupListener(listener: listener); "},"api/callbacks/ongroupinfochangedcallback.html":{"url":"api/callbacks/ongroupinfochangedcallback.html","title":"OnGroupInfoChangedCallback","summary":"群信息被修改（全员能收到）","keywords":"","body":"OnGroupInfoChangedCallback 功能介绍 群信息被修改（全员能收到） 回调函数模版 OnGroupInfoChangedCallback = void Function( String groupID, List changeInfos ) 参数详解 参数名称 参数类型 参数描述 groupID String 群 ID changeInfos ListV2TimGroupChangeInfo > 修改的群信息 代码示例 //设置群组监听器 V2TimGroupListener listener = V2TimGroupListener( onGroupInfoChanged: (String groupID, List changeInfos) async { //群成员信息被修改，仅支持禁言通知（全员能收到）。 //groupID 群 ID //changeInfos 修改的群信息 } ); //添加群组监听器 TencentImSDKPlugin.v2TIMManager.addGroupListener(listener: listener); "},"api/callbacks/ongrouprecycledcallback.html":{"url":"api/callbacks/ongrouprecycledcallback.html","title":"OnGroupRecycledCallback","summary":"群被回收（全员能收到）","keywords":"","body":"OnGroupRecycledCallback 功能介绍 群被回收（全员能收到） 回调函数模版 OnGroupRecycledCallback = void Function( String groupID, V2TimGroupMemberInfo opUser ) 参数详解 参数名称 参数类型 参数描述 groupID String 群 ID opUser V2TimGroupMemberInfo 处理人 代码示例 //设置群组监听器 V2TimGroupListener listener = V2TimGroupListener( onGroupRecycled: (String groupID, V2TimGroupMemberInfo opUser) async { //群被回收（全员能收到） //groupID 群 ID //opUser 处理人 } ); //添加群组监听器 TencentImSDKPlugin.v2TIMManager.addGroupListener(listener: listener); "},"api/callbacks/oninvitationcancelledcallback.html":{"url":"api/callbacks/oninvitationcancelledcallback.html","title":"OnInvitationCancelledCallback","summary":"邀请被取消的回调","keywords":"","body":"OnInvitationCancelledCallback 功能介绍 邀请被取消的回调 回调函数模版 OnInvitationCancelledCallback = void Function( String inviteID, String inviter, String data ) 参数详解 参数名称 参数类型 参数描述 inviteID String 邀请消息信令id inviter String 邀请人id data String 邀请被取消时的自定义data 代码示例 //设置信令监听器 V2TimSignalingListener listener = V2TimSignalingListener( onInvitationCancelled: (String inviteID, String inviter, String data) async { //邀请被取消的回调 //inviteID 邀请消息信令id //inviter 邀请人id //data 邀请被取消时的自定义data } ); TencentImSDKPlugin.v2TIMManager .getSignalingManager() .addSignalingListener(listener: listener); //添加信令监听器 "},"api/callbacks/oninvitationtimeoutcallback.html":{"url":"api/callbacks/oninvitationtimeoutcallback.html","title":"OnInvitationTimeoutCallback","summary":"邀请超时的回调","keywords":"","body":"OnInvitationTimeoutCallback 功能介绍 邀请超时的回调 回调函数模版 OnInvitationTimeoutCallback = void Function( String inviteID, List inviteeList ) 参数详解 参数名称 参数类型 参数描述 inviteID String 邀请消息信令id inviteeList List 被邀请人的id列表 代码示例 //设置信令监听器 V2TimSignalingListener listener = V2TimSignalingListener( onInvitationTimeout: (String inviteID, List inviteeList) async { //邀请超时的回调 //inviteID 邀请消息信令id //inviteeList 被邀请人的列表 } ); TencentImSDKPlugin.v2TIMManager .getSignalingManager() .addSignalingListener(listener: listener); //添加信令监听器 "},"api/callbacks/oninviteeacceptedcallback.html":{"url":"api/callbacks/oninviteeacceptedcallback.html","title":"OnInviteeAcceptedCallback","summary":"邀请被接受的回调","keywords":"","body":"OnInviteeAcceptedCallback 功能介绍 邀请被接受的回调 回调函数模版 OnInviteeAcceptedCallback = void Function( String inviteID, String invitee, String data ) 参数详解 参数名称 参数类型 参数描述 inviteID String 邀请消息信令id invitee String 被邀请人id data String 接受邀请时的自定义data 代码示例 //设置信令监听器 V2TimSignalingListener listener = V2TimSignalingListener( onInviteeAccepted: (String inviteID, String invitee, String data) async { //邀请被接受的回调 //inviteID 邀请消息信令id //invitee 被邀请人id //data 接受邀请时的自定义data } ); TencentImSDKPlugin.v2TIMManager .getSignalingManager() .addSignalingListener(listener: listener); //添加信令监听器 "},"api/callbacks/oninviteerejectedcallback.html":{"url":"api/callbacks/oninviteerejectedcallback.html","title":"OnInviteeRejectedCallback","summary":"邀请被拒绝的回调","keywords":"","body":"OnInviteeRejectedCallback 功能介绍 邀请被拒绝的回调 回调函数模版 OnInviteeRejectedCallback = void Function( String inviteID, String invitee, String data ) 参数详解 参数名称 参数类型 参数描述 inviteID String 邀请消息信令id invitee String 被邀请人id data String 拒绝邀请时的自定义data 代码示例 //设置信令监听器 V2TimSignalingListener listener = V2TimSignalingListener( onInviteeRejected: (String inviteID, String invitee, String data) async { //邀请被拒绝的回调 //inviteID 邀请消息信令id //invitee 被邀请人id //data 拒绝邀请时的自定义data } ); TencentImSDKPlugin.v2TIMManager .getSignalingManager() .addSignalingListener(listener: listener); //添加信令监听器 "},"api/callbacks/onmemberentercallback.html":{"url":"api/callbacks/onmemberentercallback.html","title":"OnMemberEnterCallback","summary":"有用户加入群（全员能够收到）","keywords":"","body":"OnMemberEnterCallback 功能介绍 有用户加入群（全员能够收到） 回调函数模版 OnMemberEnterCallback = void Function( String groupID, List memberList ) 参数详解 参数名称 参数类型 参数描述 groupID String 群 ID memberList ListV2TimGroupMemberInfo > 加入的成员 代码示例 //设置群组监听器 V2TimGroupListener listener = V2TimGroupListener( onMemberEnter: (String groupID, List memberList) async { //有用户加入群（全员能够收到） //groupID 群 ID //memberList 加入的成员 } ); //添加群组监听器 TencentImSDKPlugin.v2TIMManager.addGroupListener(listener: listener); "},"api/callbacks/onmemberinfochangedcallback.html":{"url":"api/callbacks/onmemberinfochangedcallback.html","title":"OnMemberInfoChangedCallback","summary":"群成员信息被修改，仅支持禁言通知（全员能收到）","keywords":"","body":"OnMemberInfoChangedCallback 功能介绍 群成员信息被修改，仅支持禁言通知（全员能收到） 回调函数模版 OnMemberInfoChangedCallback = void Function( String groupID, List v2TIMGroupMemberChangeInfoList ) 参数详解 参数名称 参数类型 参数描述 groupID String 群 ID v2TIMGroupMemberChangeInfoList ListV2TimGroupMemberChangeInfo > 被修改的群成员信息 代码示例 //设置群组监听器 V2TimGroupListener listener = V2TimGroupListener( onMemberInfoChanged: (String groupID, List v2TIMGroupMemberChangeInfoList) async { //群成员信息被修改，仅支持禁言通知（全员能收到）。 //groupID 群 ID //v2TIMGroupMemberChangeInfoList 被修改的群成员信息 } ); //添加群组监听器 TencentImSDKPlugin.v2TIMManager.addGroupListener(listener: listener); "},"api/callbacks/onmemberinvitedcallback.html":{"url":"api/callbacks/onmemberinvitedcallback.html","title":"OnMemberInvitedCallback","summary":"些人被拉入某群（全员能够收到）","keywords":"","body":"OnMemberInvitedCallback 功能介绍 些人被拉入某群（全员能够收到） 回调函数模版 OnMemberInvitedCallback = void Function( String groupID, V2TimGroupMemberInfo opUser, List memberList ) 参数详解 参数名称 参数类型 参数描述 groupID String 群 ID opUser V2TimGroupMemberInfo 处理人 memberList ListV2TimGroupMemberInfo > 被拉进群成员 代码示例 //设置群组监听器 V2TimGroupListener listener = V2TimGroupListener( onMemberInvited: (String groupID, V2TimGroupMemberInfo opUser, List memberList) async { //某些人被拉入某群（全员能够收到） //groupID 群 ID //opUser 处理人 //memberList 被拉进群成员 } ); //添加群组监听器 TencentImSDKPlugin.v2TIMManager.addGroupListener(listener: listener); "},"api/callbacks/onmemberkickedcallback.html":{"url":"api/callbacks/onmemberkickedcallback.html","title":"OnMemberKickedCallback","summary":"某些人被踢出某群（全员能够收到）","keywords":"","body":"OnMemberKickedCallback 功能介绍 某些人被踢出某群（全员能够收到） 回调函数模版 OnMemberInvitedCallback = void Function( String groupID, V2TimGroupMemberInfo opUser, List memberList ) 参数详解 参数名称 参数类型 参数描述 groupID String 群 ID opUser V2TimGroupMemberInfo 处理人 memberList ListV2TimGroupMemberInfo > 被踢成员 代码示例 //设置群组监听器 V2TimGroupListener listener = V2TimGroupListener( onMemberKicked: (String groupID, V2TimGroupMemberInfo opUser, List memberList) async { //某些人被踢出某群（全员能够收到） //groupID 群 ID //opUser 处理人 //memberList 被踢成员 } ); //添加群组监听器 TencentImSDKPlugin.v2TIMManager.addGroupListener(listener: listener); "},"api/callbacks/onmemberleavecallback.html":{"url":"api/callbacks/onmemberleavecallback.html","title":"OnMemberLeaveCallback","summary":"有用户主动离开群（全员能够收到）","keywords":"","body":"OnMemberLeaveCallback 功能介绍 有用户主动离开群（全员能够收到） 回调函数模版 OnMemberLeaveCallback = void Function( String groupID, V2TimGroupMemberInfo member ) 参数详解 参数名称 参数类型 参数描述 groupID String 群 ID member V2TimGroupMemberInfo 离开的成员 代码示例 //设置群组监听器 V2TimGroupListener listener = V2TimGroupListener( onMemberLeave: (String groupID, V2TimGroupMemberInfo member) async { //有用户离开群（全员能够收到） //groupID 群 ID //member 离开的成员 } ); //添加群组监听器 TencentImSDKPlugin.v2TIMManager.addGroupListener(listener: listener); "},"api/callbacks/onnewconversation.html":{"url":"api/callbacks/onnewconversation.html","title":"OnNewConversation","summary":"有新的会话","keywords":"","body":"OnNewConversation 功能介绍 有新的会话 比如收到一个新同事发来的单聊消息、或者被拉入了一个新的群组中，可以根据会话的 lastMessage的 timestamp 重新对会话列表做排序 回调函数模版 OnNewConversation = void Function( List conversationList ) 参数详解 参数名称 参数类型 参数描述 conversationList ListV2TimConversation > 新的会话列表 代码示例 //设置群组监听器 V2TimGroupListener listener = V2TimGroupListener( onNewConversation: (List conversationList) => { //有新的会话（比如收到一个新同事发来的单聊消息、或者被拉入了一个新的群组中），可以根据会话的 lastMessage -> timestamp 重新对会话列表做排序 //conversationList 新的会话列表 } ); //添加群组监听器 TencentImSDKPlugin.v2TIMManager.addGroupListener(listener: listener); "},"api/callbacks/onquitfromgroupcallback.html":{"url":"api/callbacks/onquitfromgroupcallback.html","title":"OnQuitFromGroupCallback","summary":"主动退出群组（主要用于多端同步，直播群（AVChatRoom）不支持）","keywords":"","body":"OnQuitFromGroupCallback 功能介绍 主动退出群组（主要用于多端同步，直播群（AVChatRoom）不支持） 回调函数模版 OnQuitFromGroupCallback = void Function( String groupID ) 参数详解 参数名称 参数类型 参数描述 groupID String 群 ID 代码示例 //设置群组监听器 V2TimGroupListener listener = V2TimGroupListener( onQuitFromGroup: (String groupID) async { //主动退出群组（主要用于多端同步，直播群（AVChatRoom）不支持） //groupID 群 ID } ); //添加群组监听器 TencentImSDKPlugin.v2TIMManager.addGroupListener(listener: listener); "},"api/callbacks/onreceivejoinapplicationcallback.html":{"url":"api/callbacks/onreceivejoinapplicationcallback.html","title":"OnReceiveJoinApplicationCallback","summary":"有新的加群请求（只有群主或管理员会收到）","keywords":"","body":"OnReceiveJoinApplicationCallback 功能介绍 有新的加群请求（只有群主或管理员会收到） 回调函数模版 OnReceiveJoinApplicationCallback = void Function( String groupID, V2TimGroupMemberInfo member, String opReason ) 参数详解 参数名称 参数类型 参数描述 groupID String 群 ID member V2TimGroupMemberInfo 申请人 opReason String 申请原因 代码示例 //设置群组监听器 V2TimGroupListener listener = V2TimGroupListener( onReceiveJoinApplication: (String groupID, V2TimGroupMemberInfo member, String opReason) async { //有新的加群请求（只有群主或管理员会收到） //groupID 群 ID //member 申请人 //opReason 申请原因 } ); //添加群组监听器 TencentImSDKPlugin.v2TIMManager.addGroupListener(listener: listener); "},"api/callbacks/onreceivenewinvitationcallback.html":{"url":"api/callbacks/onreceivenewinvitationcallback.html","title":"OnReceiveNewInvitationCallback","summary":"获取新的邀请的回调","keywords":"","body":"OnReceiveNewInvitationCallback 功能介绍 获取新的邀请的回调 回调函数模版 OnReceiveNewInvitationCallback = void Function( String inviteID, String inviter, String groupID, List inviteeList, String data ) 参数详解 参数名称 参数类型 参数描述 inviteID String 邀请消息信令id inviter String 邀请人id groupID String 发出邀请的群组id inviteeList List 被邀请人的列表 data String 邀请时的自定义data 代码示例 //设置群组监听器 V2TimGroupListener listener = V2TimGroupListener( onReceiveNewInvitation: (String inviteID, String inviter, String groupID, List inviteeList, String data) async { //获取新的邀请的回调 //inviteID 邀请消息信令id //inviter 邀请人id //groupID 发出邀请的群组id //inviteeList 被邀请人的列表 //data 邀请时的自定义data } ); //添加群组监听器 TencentImSDKPlugin.v2TIMManager.addGroupListener(listener: listener); "},"api/callbacks/onreceiverestcustomdatacallback.html":{"url":"api/callbacks/onreceiverestcustomdatacallback.html","title":"OnReceiveRESTCustomDataCallback","summary":"收到 RESTAPI 下发的自定义系统消息","keywords":"","body":"OnReceiveRESTCustomDataCallback 功能介绍 有新的加群请求（只有群主或管理员会收到） 回调函数模版 OnReceiveRESTCustomDataCallback = void Function( String groupID, String customData ) 参数详解 参数名称 参数类型 参数描述 groupID String 群 ID customData String 自定义数据 代码示例 //设置群组监听器 V2TimGroupListener listener = V2TimGroupListener( onReceiveRESTCustomData: (String groupID, String customData) async { //收到 RESTAPI 下发的自定义系统消息 //groupID 群 ID //customData 自定义数据 } ); //添加群组监听器 TencentImSDKPlugin.v2TIMManager.addGroupListener(listener: listener); "},"api/callbacks/onrecvc2creadreceiptcallback.html":{"url":"api/callbacks/onrecvc2creadreceiptcallback.html","title":"OnRecvC2CReadReceiptCallback","summary":"C2C 对端用户会话已读通知","keywords":"","body":"OnRecvC2CReadReceiptCallback 功能介绍 C2C 对端用户会话已读通知 如果对端用户调用 markC2CMessageAsRead 接口，自己会收到该回调 回调函数模版 OnRecvC2CReadReceiptCallback = void Function( List receiptList ) 参数详解 参数名称 参数类型 参数描述 receiptList ListV2TimMessageReceipt > 消息已读列表 代码示例 //创建消息监听器 V2TimAdvancedMsgListener listener = V2TimAdvancedMsgListener( onRecvC2CReadReceipt: (List receiptList) { //C2C 对端用户会话已读通知（如果对端用户调用 markC2CMessageAsRead 接口，自己会收到该回调，回调只会携带对端 userID 和对端已读 timestamp 信息） //receiptList 消息已读列表 for (V2TimMessageReceipt element in receiptList) { element.groupID; // 群id element.msgID; // 已读回执消息 ID element.readCount; // 群消息最新已读数 element.unreadCount; // 群消息最新未读数 element.userID; // C2C 消息对方 ID } ); // 添加高级消息的事件监听器 TencentImSDKPlugin.v2TIMManager .getMessageManager() .addAdvancedMsgListener(listener: listener); "},"api/callbacks/onrecvmessagemodified.html":{"url":"api/callbacks/onrecvmessagemodified.html","title":"OnRecvMessageModified","summary":"消息内容被修改","keywords":"","body":"OnRecvMessageModified 功能介绍 消息内容被修改 回调函数模版 OnRecvMessageModified = void Function( V2TimMessage message ) 参数详解 参数名称 参数类型 参数描述 message V2TimMessage 被修改之后的消息对象 代码示例 //设置会话监听器 V2TimGroupListener listener = V2TimGroupListener( onRecvMessageModified: (V2TimMessage message) { // 消息内容被修改 // message 为被修改之后的消息对象 }, ); //添加会话监听器 TencentImSDKPlugin.v2TIMManager.addGroupListener(listener: listener); "},"api/callbacks/onrecvmessagereadreceipts.html":{"url":"api/callbacks/onrecvmessagereadreceipts.html","title":"OnRecvMessageReadReceipts","summary":"消息已读回执通","keywords":"","body":"OnRecvMessageReadReceipts 功能介绍 消息已读回执通 如果自己发送的消息支持已读回执，消息接收端调用 sendMessageReadReceipts，自己会收到该通知 回调函数模版 OnRecvMessageReadReceipts = void Function( List receiptList ) 参数详解 参数名称 参数类型 参数描述 message ListV2TimMessageReceipt > 消息已读列表 代码示例 //设置会话监听器 V2TimGroupListener listener = V2TimGroupListener( onRecvMessageReadReceipts: (List receiptList) { //消息已读回执通知（如果自己发送的消息支持已读回执，消息接收端调用 sendMessageReadReceipts，自己会收到该通知） //receiptList 消息已读列表 for (V2TimMessageReceipt element in receiptList) { element.groupID; // 群id element.msgID; // 已读回执消息 ID element.readCount; // 群消息最新已读数 element.unreadCount; // 群消息最新未读数 element.userID; // C2C 消息对方 ID } }, ); //添加会话监听器 TencentImSDKPlugin.v2TIMManager.addGroupListener(listener: listener); "},"api/callbacks/onrecvmessagerevokedcallback.html":{"url":"api/callbacks/onrecvmessagerevokedcallback.html","title":"OnRecvMessageRevokedCallback","summary":"收到消息撤回的通知","keywords":"","body":"OnRecvMessageRevokedCallback 功能介绍 收到消息撤回的通知 回调函数模版 OnRecvMessageRevokedCallback = void Function( String messageid ) 参数详解 参数名称 参数类型 参数描述 messageid String 撤回消息的id 代码示例 //设置会话监听器 V2TimGroupListener listener = V2TimGroupListener( onRecvMessageRevoked: (String messageid) { // 收到消息撤回的通知 // messageid 撤回消息的id }, ); //添加会话监听器 TencentImSDKPlugin.v2TIMManager.addGroupListener(listener: listener); "},"api/callbacks/onrecvnewmessagecallback.html":{"url":"api/callbacks/onrecvnewmessagecallback.html","title":"OnRecvNewMessageCallback","summary":"收到新消息","keywords":"","body":"OnRecvNewMessageCallback 功能介绍 收到新消息 回调函数模版 OnRecvNewMessageCallback = void Function( V2TimMessage message ) 参数详解 参数名称 参数类型 参数描述 message V2TimMessage 收到的新消息 代码示例 //设置会话监听器 V2TimGroupListener listener = V2TimGroupListener( onRecvNewMessage: (V2TimMessage message) async { // 收到新消息 // 处理文本消息 if (message.elemType == MessageElemType.V2TIM_ELEM_TYPE_TEXT) { message.textElem?.text; } // 使用自定义消息 if (message.elemType == MessageElemType.V2TIM_ELEM_TYPE_CUSTOM) { message.customElem?.data; message.customElem?.desc; message.customElem?.extension; } // 使用图片消息 if (message.elemType == MessageElemType.V2TIM_ELEM_TYPE_IMAGE) { message.imageElem ?.path; // 图片上传时的路径，消息发送者才会有这个字段，消息发送者可用这个字段将图片预先上屏，优化上屏体验。 message.imageElem?.imageList?.forEach((element) { // 遍历大图、原图、缩略图 // 解析图片属性 element?.height; element?.localUrl; element?.size; element?.type; // 大图 缩略图 原图 element?.url; element?.uuid; element?.width; }); } // 处理视频消息 if (message.elemType == MessageElemType.V2TIM_ELEM_TYPE_VIDEO) { // 解析视频消息属性，封面、播放地址、宽高、大小等。 message.videoElem?.UUID; message.videoElem?.duration; message.videoElem?.localSnapshotUrl; message.videoElem?.localVideoUrl; message.videoElem?.snapshotHeight; message.videoElem?.snapshotPath; // ... } // 处理音频消息 if (message.elemType == MessageElemType.V2TIM_ELEM_TYPE_SOUND) { // 解析语音消息 播放地址，本地地址，大小，时长等。 message.soundElem?.UUID; message.soundElem?.dataSize; message.soundElem?.duration; message.soundElem?.localUrl; message.soundElem?.url; // ... } // 处理文件消息 if (message.elemType == MessageElemType.V2TIM_ELEM_TYPE_FILE) { // 解析文件消息 文件名、文件大小、url等 message.fileElem?.UUID; message.fileElem?.fileName; message.fileElem?.fileSize; message.fileElem?.localUrl; message.fileElem?.path; message.fileElem?.url; } // 处理位置消息 if (message.elemType == MessageElemType.V2TIM_ELEM_TYPE_LOCATION) { // 解析地理位置消息，经纬度、描述等 message.locationElem?.desc; message.locationElem?.latitude; message.locationElem?.longitude; } // 处理表情消息 if (message.elemType == MessageElemType.V2TIM_ELEM_TYPE_FACE) { message.faceElem?.data; message.faceElem?.index; } // 处理群组tips文本消息 if (message.elemType == MessageElemType.V2TIM_ELEM_TYPE_GROUP_TIPS) { message.groupTipsElem?.groupID; // 所属群组 message.groupTipsElem?.type; // 群Tips类型 message.groupTipsElem?.opMember; // 操作人资料 message.groupTipsElem?.memberList; // 被操作人资料 message.groupTipsElem?.groupChangeInfoList; // 群信息变更详情 message.groupTipsElem?.memberChangeInfoList; // 群成员变更信息 message.groupTipsElem?.memberCount; // 当前群在线人数 } // 处理合并消息消息 if (message.elemType == MessageElemType.V2TIM_ELEM_TYPE_MERGER) { message.mergerElem?.abstractList; message.mergerElem?.isLayersOverLimit; message.mergerElem?.title; V2TimValueCallback> download = await TencentImSDKPlugin.v2TIMManager .getMessageManager() .downloadMergerMessage( msgID: message.msgID!, ); if (download.code == 0) { List? messageList = download.data; } } if (message.textElem?.nextElem != null) { //通过第一个 Elem 对象的 nextElem 方法获取下一个 Elem 对象，如果下一个 Elem 对象存在，会返回 Elem 对象实例，如果不存在，会返回 null。 } }, ); //添加会话监听器 TencentImSDKPlugin.v2TIMManager.addGroupListener(listener: listener); "},"api/callbacks/onrevokeadministratorcallback.html":{"url":"api/callbacks/onrevokeadministratorcallback.html","title":"OnRevokeAdministratorCallback","summary":"取消管理员身份","keywords":"","body":"OnRevokeAdministratorCallback 功能介绍 取消管理员身份 回调函数模版 OnRevokeAdministratorCallback = void Function( String groupID, V2TimGroupMemberInfo opUser, List memberList ) 参数详解 参数名称 参数类型 参数描述 groupID String 群 ID opUser V2TimGroupMemberInfo 处理人 memberList ListV2TimGroupMemberInfo > 被处理的群成员 代码示例 //设置群组监听器 V2TimGroupListener listener = V2TimGroupListener( onRevokeAdministrator: (String groupID, V2TimGroupMemberInfo opUser, List memberList) async { //取消管理员身份 //groupID 群 ID //opUser 处理人 //memberList 被处理的群成员 } ); //添加群组监听器 TencentImSDKPlugin.v2TIMManager.addGroupListener(listener: listener); "},"api/callbacks/onsendmessageprogresscallback.html":{"url":"api/callbacks/onsendmessageprogresscallback.html","title":"OnSendMessageProgressCallback","summary":"文件上传进度回调","keywords":"","body":"OnSendMessageProgressCallback 功能介绍 文件上传进度回调 回调函数模版 OnSendMessageProgressCallback = void Function( V2TimMessage message, int progress ) 参数详解 参数名称 参数类型 参数描述 message V2TimMessage 上传文件的消息属性 progress int 文件上传进度 0-100 代码示例 //设置会话监听器 V2TimGroupListener listener = V2TimGroupListener( onSendMessageProgress: (V2TimMessage message, int progress) { //文件上传进度回调 //message 上传文件的消息属性 //progress文件上传进度 0-100 } ); //添加会话监听器 TencentImSDKPlugin.v2TIMManager.addGroupListener(listener: listener); "},"api/callbacks/ontotalunreadmessagecountchanged.html":{"url":"api/callbacks/ontotalunreadmessagecountchanged.html","title":"OnTotalUnreadMessageCountChanged","summary":"会话未读总数变更通知","keywords":"","body":"OnTotalUnreadMessageCountChanged 功能介绍 会话未读总数变更通知 未读总数会减去设置为免打扰的会话的未读数 回调函数模版 OnTotalUnreadMessageCountChanged = void Function( int totalUnreadCount ) 参数详解 参数名称 参数类型 参数描述 totalUnreadCount int 会话未读总数 代码示例 //设置群组监听器 V2TimGroupListener listener = V2TimGroupListener( onTotalUnreadMessageCountChanged: (int totalUnreadCount) => { //会话未读总数变更通知，未读总数会减去设置为免打扰的会话的未读数 //totalUnreadCount 会话未读总数 } ); //添加群组监听器 TencentImSDKPlugin.v2TIMManager.addGroupListener(listener: listener); "},"api/callbacks/onuserstatuschanged.html":{"url":"api/callbacks/onuserstatuschanged.html","title":"OnUserStatusChanged","summary":"用户状态变更通知","keywords":"","body":"OnUserStatusChanged 功能介绍 用户状态变更通知 订阅过的用户发生了状态变更（包括在线状态和自定义状态），会触发该回调 在 IM 控制台打开了好友状态通知开关，即使未主动订阅，当好友状态发生变更时，也会触发该回调 同一个账号多设备登录，当其中一台设备修改了自定义状态，所有设备都会收到该回调 回调函数模版 OnUserStatusChanged = void Function( List userStatusList ) 参数详解 参数名称 参数类型 参数描述 userStatusList ListV2TimUserStatus > 用户状态变化的用户列表 代码示例 // 1. 从即时通信 IM 控制台获取应用 SDKAppID。 int sdkAppID = 0; // 2. 添加 V2TimSDKListener 的事件监听器，sdkListener 是 V2TimSDKListener 的实现类 V2TimSDKListener sdkListener = V2TimSDKListener( onUserStatusChanged: (List userStatusList) { //用户状态变更通知 //userStatusList 用户状态变化的用户列表 //收到通知的情况：订阅过的用户发生了状态变更（包括在线状态和自定义状态），会触发该回调 //在 IM 控制台打开了好友状态通知开关，即使未主动订阅，当好友状态发生变更时，也会触发该回调 //同一个账号多设备登录，当其中一台设备修改了自定义状态，所有设备都会收到该回调 } ); // 3.初始化SDK TencentImSDKPlugin.v2TIMManager.initSDK( sdkAppID: sdkAppID, // SDKAppID loglevel: LogLevelEnum.V2TIM_LOG_ALL, // 日志登记等级 listener: sdkListener, // 事件监听器 ); "},"api/callbacks/v2timuserfullinfocallback.html":{"url":"api/callbacks/v2timuserfullinfocallback.html","title":"V2TimUserFullInfoCallback","summary":"登录用户的资料发生了更新更新","keywords":"","body":"V2TimUserFullInfoCallback 功能介绍 登录用户的资料发生了更新更新 回调函数模版 V2TimUserFullInfoCallback = void Function( V2TimUserFullInfo info ) 参数详解 参数名称 参数类型 参数描述 info V2TimUserFullInfo 登录用户的资料 代码示例 // 1. 从即时通信 IM 控制台获取应用 SDKAppID。 int sdkAppID = 0; // 2. 添加 V2TimSDKListener 的事件监听器，sdkListener 是 V2TimSDKListener 的实现类 V2TimSDKListener sdkListener = V2TimSDKListener( onSelfInfoUpdated: (V2TimUserFullInfo info) { // 登录用户的资料发生了更新 // info登录用户的资料 } ); // 3.初始化SDK TencentImSDKPlugin.v2TIMManager.initSDK( sdkAppID: sdkAppID, // SDKAppID loglevel: LogLevelEnum.V2TIM_LOG_ALL, // 日志登记等级 listener: sdkListener, // 事件监听器 ); "}}