{"./":{"url":"./","title":"Flutter","keywords":"","body":"Flutter 即时通信 IM 为您准备了 Flutter 的 API 调用示例，您可以访问 GitHub 获取源码。扫描下方二维码即可体验 API 调用示例 Demo： 功能概览 模块名称 模块功能简介 V2TIMManager IM SDK 主核心类，负责 IM SDK 的初始化、登录、消息收发，建群退群等功能。 V2TIMMessageManager 提供高级消息处理相关接口 V2TIMGroupManager 群组高级接口，包含了群组的高级功能，例如群成员邀请、非群成员申请进群等操作接口。 V2TIMSignalingManager 提供了信令操作相关接口 V2TIMConversationManager 会话接口，包含了会话的获取，删除和更新的逻辑 V2TIMFriendshipManager 关系链接口，包含了好友的添加和删除，黑名单的添加和删除等逻辑 V2TIMOfflinePushManager 提供离线推送相关的接口 关键类 IM API中使用到的数据类型 Enums IM API中使用到的枚举类型 callbacks IM API中使用到的回调函数类型 相关链接 IM-flutter 首页 IM-flutter 快速入门 IM-flutter github案例 "},"api/v2timmanager/":{"url":"api/v2timmanager/","title":"V2TIMManager","summary":"IM SDK 主核心类，负责 IM SDK 的初始化、登录、消息收发，建群退群等功能。","keywords":"","body":"V2TIMManager V2TIMManager功能介绍 IM SDK 主核心类，负责 IM SDK 的初始化、登录、消息收发，建群退群等功能。 API目录 API 描述 addGroupListener 添加群组监听器 dismissGroup 解散群组 getConversationManager 会话功能入口 getFriendshipManager 关系链功能入口 getGroupManager 高级群组功能入口 getLoginStatus 获取登录状态 getLoginUser 获取当前登录用户的 UserID getMessageManager 高级消息功能入口 getOfflinePushManager 离线推送功能入口 getServerTime 获取服务器当前时间 getSignalingManager 信令入口 getUsersInfo 获取用户资料 getUserStatus 获取用户在线状态 getVersion 获取版本号 initSDK 初始化 SDK joinGroup 加入群组 quitGroup 退出群组 login 用户登录 logout 用户登出 removeGroupListener 移除群组监听器 setAPNSListener 设置苹果系统离线推送专用监听器 setGroupListener 设置群组监听器 setSelfInfo 修改个人资料 setSelfStatus 设置当前登录用户在线状态 unInitSDK 反初始化 SDK "},"api/v2timmanager/initsdk.html":{"url":"api/v2timmanager/initsdk.html","title":"initSDK","summary":"初始化 SDK√","keywords":"","body":"initSDK 功能介绍 初始化 SDK 初始化 SDK 需要操作以下步骤： 准备 SDKAppID。 设置 LogLevelEnum。 设置 V2TimSDKListener。 调用 initSDK 初始化 SDK。 参数详解 参数名称 参数类型 是否必填 描述 sdkAppID int 是 应用ID，可在控制台中获取 loglevel LogLevelEnum 是 配置信息 listener V2TimSDKListener 是 SDK监听器 返回值 V2TimValueCallback { code : int desc : String data : bool } 返回值详解 名称 数值类型 描述 code int 请求结果错误码 desc String 请求结果描述 data bool 初始化结果 代码示例 // 1. 从即时通信 IM 控制台获取应用 SDKAppID。 int sdkAppID = 0; // 2. 添加 V2TimSDKListener 的事件监听器，sdkListener 是 V2TimSDKListener 的实现类 V2TimSDKListener sdkListener = V2TimSDKListener( onConnectFailed: (int code, String error) { // 连接失败的回调函数 // code 错误码 // error 错误信息 }, onConnectSuccess: () { // SDK 已经成功连接到腾讯云服务器 }, onConnecting: () { // SDK 正在连接到腾讯云服务器 }, onKickedOffline: () { // 当前用户被踢下线，此时可以 UI 提示用户，并再次调用 V2TIMManager 的 login() 函数重新登录。 }, onSelfInfoUpdated: (V2TimUserFullInfo info) { // 登录用户的资料发生了更新 // info登录用户的资料 }, onUserSigExpired: () { // 在线时票据过期：此时您需要生成新的 userSig 并再次调用 V2TIMManager 的 login() 函数重新登录。 }, onUserStatusChanged: (List userStatusList) { //用户状态变更通知 //userStatusList 用户状态变化的用户列表 //收到通知的情况：订阅过的用户发生了状态变更（包括在线状态和自定义状态），会触发该回调 //在 IM 控制台打开了好友状态通知开关，即使未主动订阅，当好友状态发生变更时，也会触发该回调 //同一个账号多设备登录，当其中一台设备修改了自定义状态，所有设备都会收到该回调 }, ); // 3.初始化SDK V2TimValueCallback initSDKRes = await TencentImSDKPlugin.v2TIMManager.initSDK( sdkAppID: sdkAppID, // SDKAppID loglevel: LogLevelEnum.V2TIM_LOG_ALL, // 日志登记等级 listener: sdkListener, // 事件监听器 ); if (initSDKRes.code == 0) { //初始化成功 } "},"api/v2timmanager/uninitsdk.html":{"url":"api/v2timmanager/uninitsdk.html","title":"unInitSDK","summary":"反初始化 SDK√","keywords":"","body":"unInitSDK 功能介绍 反初始化 SDK 普通情况下，如果您的应用生命周期跟 IM SDK 生命周期一致，退出应用前可以不进行反初始化。 但有些特殊场景，例如您只在进入特定界面后才初始化 IM SDK，退出界面后不再使用，可以对 IM SDK 进行反初始化。 参数详解 此API无参数 返回值 V2TimValueCallback { code : int desc : String } 返回值详解 名称 数值类型 描述 code int 请求结果错误码 desc String 请求结果描述 代码示例 // 从即时通信 IM 控制台获取应用 SDKAppID。 int sdkAppID = 0; // 添加 V2TimSDKListener 的事件监听器，sdkListener 是 V2TimSDKListener 的实现类 V2TimSDKListener sdkListener = V2TimSDKListener( onConnectFailed: (code, error) {}, // 连接失败的回调函数 onConnectSuccess: () {}, // 连接成功的回调函数 onConnecting: () {}, // 正在连接的回调函数 onKickedOffline: () {}, // 被踢下线的回调函数 onSelfInfoUpdated: (V2TimUserFullInfo info) {}, // 用户信息更新 onUserSigExpired: () {}, // userSig过期，相当于踢下线 ); // 初始化 V2TimValueCallback initSDKRes = await TencentImSDKPlugin.v2TIMManager.initSDK( sdkAppID: sdkAppID, // SDKAppID loglevel: LogLevelEnum.V2TIM_LOG_ALL, // 日志登记等级 listener: sdkListener, // 事件监听器 ); // 在初始化SDK成功之后可调用 // 调用unInitSDK反初始化SDK if (initSDKRes.code == 0) {} V2TimCallback unInitSDKRes = await TencentImSDKPlugin.v2TIMManager.unInitSDK(); if (unInitSDKRes.code == 0) { // 反初始化SDK成功的逻辑 } "},"api/v2timmanager/getversion.html":{"url":"api/v2timmanager/getversion.html","title":"getVersion","summary":"获取版本号√","keywords":"","body":"getVersion 功能介绍 获取版本号 参数详解 此API无参数 返回值 V2TimValueCallback { code : int desc : String data : String//版本号 } 返回值详解 名称 数值类型 描述 code int 请求结果错误码 desc String 请求结果描述 data String 版本号 代码示例 //获取版本号 V2TimValueCallback getVersionRes = await TencentImSDKPlugin.v2TIMManager.getVersion(); if (getVersionRes.code == 0) { //获取成功 getVersionRes.data; //版本号 } "},"api/v2timmanager/getservertime.html":{"url":"api/v2timmanager/getservertime.html","title":"getServerTime","summary":"获取服务器当前时间√","keywords":"","body":"getServerTime 功能介绍 获取服务器当前时间 注意： web不支持该接口 参数详解 此API无参数 返回值 V2TimValueCallback { code : int desc : String data : int//服务器当前时间 } 返回值详解 名称 数值类型 描述 code int 请求结果错误码 desc String 请求结果描述 data int 服务器当前时间 代码示例 //获取服务器当前时间 V2TimValueCallback getServerTimeRes = await TencentImSDKPlugin.v2TIMManager.getServerTime(); if (getServerTimeRes.code == 0) { //获取成功 getServerTimeRes.data;//服务器当前时间 } "},"api/v2timmanager/login.html":{"url":"api/v2timmanager/login.html","title":"login","summary":"用户登录√","keywords":"","body":"login 功能介绍 用户登录 首次登录一个 IM 帐号时，不需要先注册这个帐号。在登录成功后，IM 自动完成这个帐号的注册。 您需要在以下场景调用 login 接口： App 启动后首次使用 IM SDK 的功能。 登录时票据过期：login 接口的回调会返回 ERR_USER_SIG_EXPIRED（6206） 或 ERR_SVR_ACCOUNT_USERSIG_EXPIRED（70001） 错误码，此时请您生成新的 userSig 重新登录。 在线时票据过期：用户在线期间也可能收到 onUserSigExpired 回调，此时需要您生成新的 userSig 并重新登录。 在线时被踢下线：用户在线情况下被踢，IM SDK 会通过 onKickedOffline 回调通知给您，此时可以在 UI 提示用户，并调用 login 重新登录。 以下场景无需调用 login 接口： 用户的网络断开并重新连接后，不需要调用 login 函数，IM SDK 会自动上线。 当一个登录过程在进行时，不需要进行重复登录。 注意： 1. 调用 IM SDK 接口成功登录后，将会开始计算 DAU，请根据业务场景合理调用登录接口，避免出现 DAU 过高的情况。 2. 在一个 App 中，IM SDK 不支持多个帐号同时在线，如果同时登录多个帐号，只有最后登录的帐号在线。 参数详解 参数名称 参数类型 是否必填 描述 userID String 是 登录用户唯一标识 userSig String 是 登录票据，计算方法请参考 UserSig 后台 API。 返回值 V2TimCallback { code : int desc : String } 返回值详解 名称 数值类型 描述 code int 请求结果错误码 desc String 请求结果描述 代码示例 String userID = \"your user id\"; // 用户设置的userID String userSig = \"userSig from your server\"; // 用户计算出的userSig V2TimCallback loginRes = await TencentImSDKPlugin.v2TIMManager .login(userID: userID, userSig: userSig); if (loginRes.code == 0) { // 登录成功逻辑 } else { // 登录失败逻辑 } "},"api/v2timmanager/logout.html":{"url":"api/v2timmanager/logout.html","title":"logout","summary":"登出√","keywords":"","body":"logout 功能介绍 登出 退出登录，如果切换账号，需要 logout 回调成功或者失败后才能再次 login，否则login可能会失败。 普通情况下，如果您的应用生命周期跟 IM SDK 生命周期一致，退出应用前可以不登出，直接退出即可。 但有些特殊场景，例如您只在进入特定界面后才使用 IM SDK，退出界面后不再使用，此时可以调用logout 接口登出 SDK。登出成功后，不会再收到其他人发送的新消息。注意这种情况下，登出成功后还需要调 unInitSDK 对 SDK 进行反初始化。 如果您希望在应用中实现帐号切换的需求，只需要每次切换帐号时调用 login 即可。 参数详解 此API无参数 返回值 V2TimValueCallback { code : int desc : String } 返回值详解 名称 数值类型 描述 code int 请求结果错误码 desc String 请求结果描述 代码示例 // 在用户登陆成功之后可调用 // 调用logout登出当前用户账号 V2TimCallback logoutRes = await TencentImSDKPlugin.v2TIMManager.logout(); if (logoutRes.code == 0) { // 登出成功的逻辑 } "},"api/v2timmanager/getloginuser.html":{"url":"api/v2timmanager/getloginuser.html","title":"getLoginUser","summary":"获取登录用户的UserID√","keywords":"","body":"getLoginUser 功能介绍 获取登录用户的UserID 在登录成功后，通过调用getLoginUser获取登录用户的UserID。 如果登录失败，获取的登录用户 UserID 为空。 参数详解 此API无参数 返回值 V2TimValueCallback { code : int desc : String data : String } 返回值详解 名称 数值类型 描述 code int 请求结果错误码 desc String 请求结果描述 data String 登录用户的UserID 代码示例 // 在用户登陆成功之后可调用 // 调用getLoginUser获取登录成功的用户 UserID V2TimValueCallback getLoginUserRes = await TencentImSDKPlugin.v2TIMManager.getLoginUser(); if (getLoginUserRes.code == 0) { //获取成功 getLoginUserRes.data; // getLoginUserRes.data为查询到的登录用户的UserID } "},"api/v2timmanager/getloginstatus.html":{"url":"api/v2timmanager/getloginstatus.html","title":"getLoginStatus","summary":"获取登录状态√","keywords":"","body":"getLoginStatus 功能介绍 获取登录状态 如果用户已经处于已登录和登录中状态，请勿再频繁调用登录接口登录。 参数详解 此API无参数 返回值 V2TimValueCallback { code : int desc : String data : int } 返回值详解 名称 数值类型 描述 code int 请求结果错误码 desc String 请求结果描述 data int 登录用户的UserID 代码示例 // 在用户登陆成功之后可调用 // 调用getLoginStatus获取登录成功的用户的状态 V2TimValueCallback getLoginStatusRes = await TencentImSDKPlugin.v2TIMManager.getLoginStatus(); if (getLoginStatusRes.code == 0) { int? status = getLoginStatusRes.data; // getLoginStatusRes.data为用户登录状态值 if (status == 1) { // 已登录 } else if (status == 2) { // 登录中 } else if (status == 3) { // 未登录 } } "},"api/v2timmanager/addgrouplistener.html":{"url":"api/v2timmanager/addgrouplistener.html","title":"addGroupListener","summary":"添加群组监听器√","keywords":"","body":"addGroupListener 功能介绍 添加群组监听器 注意： 会议群（Meeting）和直播群（AVChatRoom）默认无onMemberInfoChanged回调，如需回调请提交工单配置 在web端时，不支持此API 参数详解 参数名称 参数类型 是否必填 描述 listener V2TimGroupListener 是 群组监听器 返回值 void 返回值详解 此方法无返回值 代码示例 //设置群组监听器 V2TimGroupListener listener = V2TimGroupListener( onApplicationProcessed: (String groupID, V2TimGroupMemberInfo opUser, bool isAgreeJoin, String opReason) async { //加群请求已经被群主或管理员处理了（只有申请人能够收到） //groupID 群 ID //opUser 处理人 //isAgreeJoin 是否同意加群 //opReason 处理原因 }, onGrantAdministrator: (String groupID, V2TimGroupMemberInfo opUser, List memberList) async { //指定管理员身份 //groupID 群 ID //opUser 处理人 //memberList 被处理的群成员 }, onGroupAttributeChanged: (String groupID, Map groupAttributeMap) async { //收到群属性更新的回调 //groupID 群 ID //groupAttributeMap 群的所有属性 }, onGroupCreated: (String groupID) async { //创建群（主要用于多端同步） //groupID 群 ID }, onGroupDismissed: (String groupID, V2TimGroupMemberInfo opUser) async { //群被解散了（全员能收到） //groupID 群 ID //opUser 处理人 }, onGroupInfoChanged: (String groupID, List changeInfos) async { //群信息被修改（全员能收到） //groupID 群 ID //changeInfos 修改的群信息 }, onGroupRecycled: (String groupID, V2TimGroupMemberInfo opUser) async { //群被回收（全员能收到） //groupID 群 ID //opUser 处理人 }, onMemberEnter: (String groupID, List memberList) async { //有用户加入群（全员能够收到） //groupID 群 ID //memberList 加入的成员 }, onMemberInfoChanged: (String groupID, List v2TIMGroupMemberChangeInfoList) async { //群成员信息被修改，仅支持禁言通知（全员能收到）。 //groupID 群 ID //v2TIMGroupMemberChangeInfoList 被修改的群成员信息 }, onMemberInvited: (String groupID, V2TimGroupMemberInfo opUser, List memberList) async { //某些人被拉入某群（全员能够收到） //groupID 群 ID //opUser 处理人 //memberList 被拉进群成员 }, onMemberKicked: (String groupID, V2TimGroupMemberInfo opUser, List memberList) async { //某些人被踢出某群（全员能够收到） //groupID 群 ID //opUser 处理人 //memberList 被踢成员 }, onMemberLeave: (String groupID, V2TimGroupMemberInfo member) async { //有用户离开群（全员能够收到） //groupID 群 ID //member 离开的成员 }, onQuitFromGroup: (String groupID) async { //主动退出群组（主要用于多端同步，直播群（AVChatRoom）不支持） //groupID 群 ID }, onReceiveJoinApplication: (String groupID, V2TimGroupMemberInfo member, String opReason) async { //有新的加群请求（只有群主或管理员会收到） //groupID 群 ID //member 申请人 //opReason 申请原因 }, onReceiveRESTCustomData: (String groupID, String customData) async { //收到 RESTAPI 下发的自定义系统消息 //groupID 群 ID //customData 自定义数据 }, onRevokeAdministrator: (String groupID, V2TimGroupMemberInfo opUser, List memberList) async { //取消管理员身份 //groupID 群 ID //opUser 处理人 //memberList 被处理的群成员 }, ); //添加群组监听器 TencentImSDKPlugin.v2TIMManager.addGroupListener(listener: listener); "},"api/v2timmanager/removegrouplistener.html":{"url":"api/v2timmanager/removegrouplistener.html","title":"removeGroupListener","summary":"移除群组监听器√","keywords":"","body":"removeGroupListener 功能介绍 移除群组监听器 参数详解 参数名称 参数类型 是否必填 描述 listener V2TimGroupListener 是 需要移除的群组监听器 返回值 void 返回值详解 此方法无返回值 代码示例 //设置群组监听器 V2TimGroupListener listener = V2TimGroupListener( onApplicationProcessed: (String groupID, V2TimGroupMemberInfo opUser, bool isAgreeJoin, String opReason) async { //加群请求已经被群主或管理员处理了（只有申请人能够收到） //groupID 群 ID //opUser 处理人 //isAgreeJoin 是否同意加群 //opReason 处理原因 }, onGrantAdministrator: (String groupID, V2TimGroupMemberInfo opUser, List memberList) async { //指定管理员身份 //groupID 群 ID //opUser 处理人 //memberList 被处理的群成员 }, onGroupAttributeChanged: (String groupID, Map groupAttributeMap) async { //收到群属性更新的回调 //groupID 群 ID //groupAttributeMap 群的所有属性 }, onGroupCreated: (String groupID) async { //创建群（主要用于多端同步） //groupID 群 ID }, onGroupDismissed: (String groupID, V2TimGroupMemberInfo opUser) async { //群被解散了（全员能收到） //groupID 群 ID //opUser 处理人/ }, onGroupInfoChanged: (String groupID, List changeInfos) async { //群信息被修改（全员能收到） //groupID 群 ID //changeInfos 修改的群信息 }, onGroupRecycled: (String groupID, V2TimGroupMemberInfo opUser) async { //群被回收（全员能收到） //groupID 群 ID //opUser 处理人 }, onMemberEnter: (String groupID, List memberList) async { //有用户加入群（全员能够收到） //groupID 群 ID //memberList 加入的成员 }, onMemberInfoChanged: (String groupID, List v2TIMGroupMemberChangeInfoList) async { //群成员信息被修改，仅支持禁言通知（全员能收到）。 //groupID 群 ID //v2TIMGroupMemberChangeInfoList 被修改的群成员信息 }, onMemberInvited: (String groupID, V2TimGroupMemberInfo opUser, List memberList) async { //某些人被拉入某群（全员能够收到） //groupID 群 ID //opUser 处理人 //memberList 被拉进群成员 }, onMemberKicked: (String groupID, V2TimGroupMemberInfo opUser, List memberList) async { //某些人被踢出某群（全员能够收到） //groupID 群 ID //opUser 处理人 //memberList 被踢成员 }, onMemberLeave: (String groupID, V2TimGroupMemberInfo member) async { //有用户离开群（全员能够收到） //groupID 群 ID //member 离开的成员 }, onQuitFromGroup: (String groupID) async { //主动退出群组（主要用于多端同步，直播群（AVChatRoom）不支持） //groupID 群 ID }, onReceiveJoinApplication: (String groupID, V2TimGroupMemberInfo member, String opReason) async { //有新的加群请求（只有群主或管理员会收到） //groupID 群 ID //member 申请人 //opReason 申请原因 }, onReceiveRESTCustomData: (String groupID, String customData) async { //收到 RESTAPI 下发的自定义系统消息 //groupID 群 ID //customData 自定义数据 }, onRevokeAdministrator: (String groupID, V2TimGroupMemberInfo opUser, List memberList) async { //取消管理员身份 //groupID 群 ID //opUser 处理人 //memberList 被处理的群成员 }, ); //添加群组监听器 TencentImSDKPlugin.v2TIMManager.addGroupListener(listener: listener); //添加成功之后可移除群组监听器 TencentImSDKPlugin.v2TIMManager.removeGroupListener(listener: listener);//需要移除的群组监听器 "},"api/v2timmanager/joingroup.html":{"url":"api/v2timmanager/joingroup.html","title":"joinGroup","summary":"加入群组√","keywords":"","body":"joinGroup 功能介绍 加入群组 工作群（Work）：不能主动入群，只能通过群成员调用 V2TIMManager.getGroupManager().inviteUserToGroup() 接口邀请入群。 公开群（Public）：申请入群后，需要管理员审批，管理员在收到 V2TIMGroupListener 的 onReceiveJoinApplication 回调后调用 V2TIMManager.getGroupManager().getGroupApplicationList() 接口处理加群请求。 其他群：可以直接入群。 注意： 当在web端时，加入直播群时groupType字段必填 参数详解 参数名称 参数类型 是否必填 描述 groupID String 是 需要加入群组 ID message String 是 加群申请信息 groupType GroupType 否 群类型 返回值 V2TimCallback { code : int desc : String } 返回值详解 名称 数值类型 描述 code int 请求结果错误码 desc String 请求结果描述 代码示例 // 加入群组 V2TimCallback joinGroupRes = await TencentImSDKPlugin.v2TIMManager .joinGroup( groupID: \"groupID\",// 需要加入群组 ID message: \"hello\", // 加群申请信息 groupType: \"Public\");// 群类型 if (joinGroupRes.code == 0) { // 加入成功 } "},"api/v2timmanager/quitgroup.html":{"url":"api/v2timmanager/quitgroup.html","title":"quitGroup","summary":"退出群组√","keywords":"","body":"quitGroup 功能介绍 退出群组 退群者会收到 onQuitFromGroup 回调。 群组内其他成员会收到 onMemberLeave 回调。 注意： 对于陌生人社交群（Public）、临时会议群（Meeting）、社群（Community）和直播群（AVChatRoom），群主不可以退群，只能 解散群组。 参数详解 参数名称 参数类型 是否必填 描述 groupID String 是 需要退出的群组 ID 返回值 V2TimCallback { code : int desc : String } 返回值详解 名称 数值类型 描述 code int 请求结果错误码 desc String 请求结果描述 代码示例 // 加入群组 V2TimCallback quitGroupRes = await TencentImSDKPlugin.v2TIMManager.quitGroup( groupID: \"groupID\", ); // 需要退出的群组 ID if (quitGroupRes.code == 0) { // 退出成功 } "},"api/v2timmanager/dismissgroup.html":{"url":"api/v2timmanager/dismissgroup.html","title":"dismissGroup","summary":"解散群组√","keywords":"","body":"dismissGroup 功能介绍 解散群组 您可以调用 dismissGroup 解散群组，全员会收到 onGroupDismissed回调。 如果您在服务器端设置了允许自动解散不活跃的群，当群被服务器端自动解散后，SDK 会收到 onGroupRecycled回调。 注意： Work：任何人都无法解散群组。 其他群：群主可以解散群组。 参数详解 参数名称 参数类型 是否必填 描述 groupID String 是 需要加入群组 ID 返回值 V2TimCallback { code : int desc : String } 返回值详解 名称 数值类型 描述 code int 请求结果错误码 desc String 请求结果描述 代码示例 // 解散群组 V2TimCallback dismissGroupRes = await TencentImSDKPlugin.v2TIMManager .dismissGroup(groupID: \"groupID\"); // 需要解散的群组id if (dismissGroupRes.code == 0) { //解散成功 } "},"api/v2timmanager/getusersinfo.html":{"url":"api/v2timmanager/getusersinfo.html","title":"getUsersInfo","summary":"获取用户资料√","keywords":"","body":"getUsersInfo 功能介绍 获取用户资料 获取自己的资料，传入自己的 ID 即可。 注意： userIDList 建议一次最大 100 个，因为数量过多可能会导致数据包太大被后台拒绝，后台限制数据包最大为 1M。 参数详解 参数名称 参数类型 是否必填 描述 userIDList List 是 需要查询的用户id列表 返回值 V2TimValueCallback> { code : int desc : String data : List//查询到的用户资料列表 } 返回值详解 名称 数值类型 描述 code int 请求结果错误码 desc String 请求结果描述 data ListV2TimUserFullInfo > 查询到的用户资料列表 代码示例 //获取用户资料 V2TimValueCallback> getUsersInfoRes = await TencentImSDKPlugin.v2TIMManager.getUsersInfo(userIDList: []);//需要查询的用户id列表 if (getUsersInfoRes.code == 0) { // 查询成功 getUsersInfoRes.data?.forEach((element) { element.allowType;//用户的好友验证方式 0:允许所有人加我好友 1:不允许所有人加我好友 2:加我好友需我确认 element.birthday;//用户生日 element.customInfo;//用户的自定义状态 旗舰版支持修改此属性 element.faceUrl;//用户头像 url element.gender;//用户的性别 1:男 2:女 element.level;//用户的等级 element.nickName;//用户昵称 element.role;//用户的角色 element.selfSignature;//用户的签名 element.userID;//用户 ID }); } "},"api/v2timmanager/getuserstatus.html":{"url":"api/v2timmanager/getuserstatus.html","title":"getUserStatus","summary":"获取用户在线状态√","keywords":"","body":"getUserStatus 功能介绍 获取用户在线状态 注意： 4.0.3版本开始支持 web不支持 参数详解 参数名称 参数类型 是否必填 描述 userIDList List 是 需要查询用户在线状态的用户id列表 返回值 V2TimValueCallback> { code : int desc : String data : List//查询到的用户在线状态列表 } 返回值详解 名称 数值类型 描述 code int 请求结果错误码 desc String 请求结果描述 data ListV2TimUserStatus > 查询到的用户在线状态列表 代码示例 //获取用户在线状态 V2TimValueCallback> getUserStatusRes = await TencentImSDKPlugin.v2TIMManager.getUserStatus(userIDList: []);// 需要查询用户在线状态的用户id列表 if (getUserStatusRes.code == 0) { //查询成功 getUserStatusRes.data?.forEach((element) { element.customStatus;//此条为此API查询的用户在线状态字段 element.statusType;//用户在线状态类型 1:在线状态 2:离线状态 3:未登录（如主动调用 logout 接口，或者账号注册后还未登录） element.userID;//用户id }); } "},"api/v2timmanager/setselfinfo.html":{"url":"api/v2timmanager/setselfinfo.html","title":"setSelfInfo","summary":"修改个人资料√","keywords":"","body":"setSelfInfo 功能介绍 修改个人资料 资料修改成功后，您会收到 onSelfInfoUpdated 回调。 参数详解 参数名称 参数类型 是否必填 描述 userFullInfo V2TimUserFullInfo 是 需要修改的用户的信息 返回值 V2TimCallback { code : int desc : String } 返回值详解 名称 数值类型 描述 code int 请求结果错误码 desc String 请求结果描述 代码示例 //用户资料设置信息 V2TimUserFullInfo userFullInfo = V2TimUserFullInfo( allowType: 0,//用户的好友验证方式 0:允许所有人加我好友 1:不允许所有人加我好友 2:加我好友需我确认 birthday: 0,//用户生日 customInfo: {\"custom\":\"custom\"},//用户的自定义状态 旗舰版支持修改此属性 faceUrl: \"\",//用户头像 url gender: 1,//用户的性别 1:男 2:女 level: 0,//用户的等级 role: 0,//用户的角色 selfSignature: \"\",//用户的签名 userID: \"\",//用户 ID ); V2TimCallback setSelfInfoRes = await TencentImSDKPlugin.v2TIMManager.setSelfInfo(userFullInfo: userFullInfo);//用户资料设置信息 if (setSelfInfoRes.code == 0) { // 修改成功 } "},"api/v2timmanager/setselfstatus.html":{"url":"api/v2timmanager/setselfstatus.html","title":"setSelfStatus","summary":"设置当前登录用户在线状态√","keywords":"","body":"setSelfStatus 功能介绍 设置当前登录用户在线状态 注意： 4.0.3版本开始支持 web不支持 参数详解 参数名称 参数类型 是否必填 描述 status String 是 用户在线状态描述 返回值 V2TimCallback { code : int desc : String } 返回值详解 名称 数值类型 描述 code int 请求结果错误码 desc String 请求结果描述 代码示例 //设置当前登录用户在线状态 V2TimCallback setSelfStatusRes = await TencentImSDKPlugin.v2TIMManager.setSelfStatus(status: \"\");// 用户在线状态描述 if (setSelfStatusRes.code == 0) { //设置成功 } "},"api/v2timmanager/getconversationmanager.html":{"url":"api/v2timmanager/getconversationmanager.html","title":"getConversationManager","summary":"会话功能入口√","keywords":"","body":"getConversationManager 功能介绍 会话功能入口 会话功能方法在核心类 TencentImSDKPlugin.v2TIMManager.getConversationManager()中。 参数详解 此API无参数 返回值 V2TIMConversationManager 返回值详解 名称 数值类型 描述 V2TIMConversationManager V2TIMConversationManager 会话功能入口 代码示例 // 使用getConversationManager获取指定会话的案例 //获取指定会话 V2TimValueCallback getConversationtRes = await TencentImSDKPlugin.v2TIMManager .getConversationManager() .getConversation(conversationID: \"\");//会话唯一 ID，如果是 C2C 单聊，组成方式为 c2c_userID，如果是群聊，组成方式为 group_groupID if (getConversationtRes.code == 0) { //拉取成功 getConversationtRes.data?.conversationID;//会话唯一 ID，如果是单聊，组成方式为 c2c_userID；如果是群聊，组成方式为 group_groupID。 getConversationtRes.data?.draftText;//草稿信息 getConversationtRes.data?.draftTimestamp;//草稿编辑时间，草稿设置的时候自动生成。 getConversationtRes.data?.faceUrl;//会话展示头像，群聊头像：群头像；单聊头像：对方头像。 getConversationtRes.data?.groupAtInfoList;//群会话 @ 信息列表，通常用于展示 “有人@我” 或 “@所有人” 这两种提醒状态。 getConversationtRes.data?.groupID;//当前群聊 ID，如果会话类型为群聊，groupID 会存储当前群的群 ID，否则为 null。 getConversationtRes.data?.groupType;//当前群聊类型，如果会话类型为群聊，groupType 为当前群类型，否则为 null。 getConversationtRes.data?.isPinned;//会话是否置顶 getConversationtRes.data?.lastMessage;//会话最后一条消息 getConversationtRes.data?.orderkey;//会话排序字段 getConversationtRes.data?.recvOpt;//消息接收选项 getConversationtRes.data?.showName;//会话展示名称，群聊会话名称优先级：群名称 > 群 ID；单聊会话名称优先级：对方好友备注 > 对方昵称 > 对方的 userID。 getConversationtRes.data?.type;//会话类型，分为 C2C（单聊）和 Group（群聊）。 getConversationtRes.data?.unreadCount;//会话未读消息数，直播群（AVChatRoom）不支持未读计数，默认为 0。 getConversationtRes.data?.userID;//对方用户 ID，如果会话类型为单聊，userID 会存储对方的用户 ID，否则为 null。 } "},"api/v2timmanager/getfriendshipmanager.html":{"url":"api/v2timmanager/getfriendshipmanager.html","title":"getFriendshipManager","summary":"关系链功能入口√","keywords":"","body":"getFriendshipManager 功能介绍 关系链功能入口 关系链功能方法在核心类 TencentImSDKPlugin.v2TIMManager.getFriendshipManager()中。 参数详解 此API无参数 返回值 V2TIMFriendshipManager 返回值详解 名称 数值类型 描述 V2TIMFriendshipManager V2TIMFriendshipManager 关系链功能入口 代码示例 // 使用getFriendshipManager添加好友的案例 //添加好友 V2TimValueCallback addFriendRes = await TencentImSDKPlugin.v2TIMManager .getFriendshipManager() .addFriend( userID: \"userID\",//需要添加的用户id remark: \"\",//添加的好友的好友备注 friendGroup: \"\",//添加好友所在分组 addWording: \"\",//添加好友附带信息 addSource: \"\",//添加来源描述 addType: FriendTypeEnum.V2TIM_FRIEND_TYPE_BOTH,//设置加好友类型，默认双向 ); if (addFriendRes.code == 0) { // 添加请求发送成功 } "},"api/v2timmanager/getgroupmanager.html":{"url":"api/v2timmanager/getgroupmanager.html","title":"getGroupManager","summary":"高级群组功能入口√","keywords":"","body":"getGroupManager 功能介绍 高级群组功能入口 高级群组功能方法在核心类 TencentImSDKPlugin.v2TIMManager.getGroupManager()中。 参数详解 此API无参数 返回值 V2TIMGroupManager 返回值详解 名称 数值类型 描述 V2TIMGroupManager V2TIMGroupManager 高级群组功能入口 代码示例 // 使用getGroupManager创建群组的案例 // 创建群组 V2TimValueCallback createGroupRes = await TencentImSDKPlugin.v2TIMManager.getGroupManager().createGroup( groupType: \"Publich\",// 群类型 groupName: \"groupName\",// 群名称，不能为 null。 notification: \"\",// 群公告 introduction: \"\",// 群介绍 faceUrl: \"\",// 群头像Url isAllMuted: false,// 是否全体禁言 isSupportTopic: false,// 是否支持话题 addOpt: GroupAddOptTypeEnum.V2TIM_GROUP_ADD_AUTH,// 添加群设置 memberList: [],// 初始成员列表 ); if (createGroupRes.code == 0) { // 创建成功 var groupId = createGroupRes.data;// 创建的群号 } "},"api/v2timmanager/getmessagemanager.html":{"url":"api/v2timmanager/getmessagemanager.html","title":"getMessageManager","summary":"高级消息功能入口√","keywords":"","body":"getMessageManager 功能介绍 高级消息功能入口 发送消息方法在核心类 TencentImSDKPlugin.v2TIMManager.getMessageManager()中。 参数详解 此API无参数 返回值 V2TIMMessageManager 返回值详解 名称 数值类型 描述 V2TIMMessageManager V2TIMMessageManager 高级消息功能入口 代码示例 // 使用getMessageManager创建消息的案例 // 创建文本消息 V2TimValueCallback createTextMessageRes = await TencentImSDKPlugin.v2TIMManager .getMessageManager() .createTextMessage( text: \"test\", // 文本信息 ); if (createTextMessageRes.code == 0) { // 文本信息创建成功 String? id = createTextMessageRes.data?.id; // 发送文本消息 // 在sendMessage时，若只填写receiver则发个人用户单聊消息 // 若只填写groupID则发群组消息 // 若填写了receiver与groupID则发群内的个人用户，消息在群聊中显示，只有指定receiver能看见 V2TimValueCallback sendMessageRes = await TencentImSDKPlugin .v2TIMManager .getMessageManager() .sendMessage(id: id!, receiver: \"userID\", groupID: \"groupID\"); if (sendMessageRes.code == 0) { // 发送成功 } } "},"api/v2timmanager/getofflinepushmanager.html":{"url":"api/v2timmanager/getofflinepushmanager.html","title":"getOfflinePushManager","summary":"离线推送功能入√","keywords":"","body":"getOfflinePushManager 功能介绍 离线推送功能入 离线推送功能方法在核心类 TencentImSDKPlugin.v2TIMManager.getOfflinePushManager()中。 参数详解 此API无参数 返回值 V2TIMOfflinePushManager 返回值详解 名称 数值类型 描述 V2TIMOfflinePushManager V2TIMOfflinePushManager 离线推送功能入口 代码示例 // 使用getOfflinePushManager设置离线推送配置信息的案例 //设置离线推送配置信息 V2TimCallback setOfflinePushConfigRes = await TencentImSDKPlugin .v2TIMManager .getOfflinePushManager() .setOfflinePushConfig( businessID: 0,//businessID 为对应厂商的证书 ID token: \"\",//应合规要求，在用户同意隐私协议登录成功后，分别初始化注册各个厂商推送服务，并在注册结果回调处保存注册成功后的 token isTPNSToken: false); if (setOfflinePushConfigRes.code == 0) { // 设置成功 } "},"api/v2timmanager/getsignalingmanager.html":{"url":"api/v2timmanager/getsignalingmanager.html","title":"getSignalingManager","summary":"信令入口√","keywords":"","body":"getSignalingManager 功能介绍 信令入口 信令功能方法在核心类 TencentImSDKPlugin.v2TIMManager.getSignalingManager()中。 参数详解 此API无参数 返回值 V2TIMSignalingManager 返回值详解 名称 数值类型 描述 V2TIMSignalingManager V2TIMSignalingManager 信令入口 代码示例 // 使用getSignalingManager设置信令监听器与创建邀请的案例 //设置信令监听器 V2TimSignalingListener listener = V2TimSignalingListener( onInvitationCancelled: (String inviteID, String inviter, String data) async {}, onInvitationTimeout: (String inviteID, List inviteeList) async { //邀请超时的回调 //inviteID 邀请消息信令id //inviteeList 被邀请人的列表 }, onInviteeAccepted: (String inviteID, String invitee, String data) async { //邀请被接受的回调 //inviteID 邀请消息信令id //inviter 被邀请人id //data 接受邀请时的自定义data }, onInviteeRejected: (String inviteID, String invitee, String data) async { //邀请被拒绝的回调 //inviteID 邀请消息信令id //inviter 被邀请人id //data 拒绝邀请时的自定义data }, onReceiveNewInvitation: (String inviteID, String inviter, String groupID, List inviteeList, String data) async { //获取新的邀请的回调 //inviteID 邀请消息信令id //inviter 邀请人id //groupID 发出邀请的群组id //inviteeList 被邀请人的列表 //data 邀请时的自定义data }, ); TencentImSDKPlugin.v2TIMManager .getSignalingManager() .addSignalingListener(listener: listener); //添加信令监听器 V2TimValueCallback inviteRes = await TencentImSDKPlugin.v2TIMManager .getSignalingManager() .invite( invitee: \"\",//被邀请人id data: \"data\",//邀请时附带的定义消息 timeout: 30,//邀请超时时间 onlineUserOnly: false,//是否只发给在线用户 offlinePushInfo: OfflinePushInfo());//离线推送设置 if (inviteRes.code == 0) { //创建邀请成功 String? inviteId = inviteRes.data;//创建的邀请id } "},"api/v2timmanager/setapnslistener.html":{"url":"api/v2timmanager/setapnslistener.html","title":"setAPNSListener","summary":"设置苹果系统离线推送专用监听器√","keywords":"","body":"setAPNSListener 功能介绍 设置苹果系统离线推送专用监听器 为兼容苹果系统设置的离线推送专用监听器 先调用setAPNSListener()，再调用doBackground() 参数详解 此API无参数 返回值 void 返回值详解 此API无返回值 代码示例 //首先设置苹果系统离线推送专用监听器 TencentImSDKPlugin.v2TIMManager.setAPNSListener(); //APP 检测到应用退后台时可以调用此接口 V2TimCallback doBackgroundRes = await TencentImSDKPlugin.v2TIMManager .getOfflinePushManager() .doBackground(unreadCount: 0); if (doBackgroundRes.code == 0) { //调用成功后的逻辑 } "},"api/v2timmanager/setgrouplistener.html":{"url":"api/v2timmanager/setgrouplistener.html","title":"setGroupListener","summary":"设置群组监听器√","keywords":"","body":"setGroupListener 功能介绍 设置群组监听器 注意： 会议群（Meeting）和直播群（AVChatRoom）默认无onMemberInfoChanged()回调，如需回调请提交工单配置 在web端时，不支持onQuitFromGroup回调 参数详解 参数名称 参数类型 是否必填 描述 listener V2TimGroupListener 是 需要设置群组监听器 返回值 void 返回值详解 此方法无返回值 代码示例 //设置群组监听器属性 V2TimGroupListener listener = V2TimGroupListener( onApplicationProcessed: (String groupID, V2TimGroupMemberInfo opUser, bool isAgreeJoin, String opReason) async { //加群请求已经被群主或管理员处理了（只有申请人能够收到） //groupID 群 ID //opUser 处理人 //isAgreeJoin 是否同意加群 //opReason 处理原因 }, onGrantAdministrator: (String groupID, V2TimGroupMemberInfo opUser, List memberList) async { //指定管理员身份 //groupID 群 ID //opUser 处理人 //memberList 被处理的群成员 }, onGroupAttributeChanged: (String groupID, Map groupAttributeMap) async { //收到群属性更新的回调 //groupID 群 ID //groupAttributeMap 群的所有属性 }, onGroupCreated: (String groupID) async { //创建群（主要用于多端同步） //groupID 群 ID }, onGroupDismissed: (String groupID, V2TimGroupMemberInfo opUser) async { //群被解散了（全员能收到） //groupID 群 ID //opUser 处理人/ }, onGroupInfoChanged: (String groupID, List changeInfos) async { //群信息被修改（全员能收到） //groupID 群 ID //changeInfos 修改的群信息 }, onGroupRecycled: (String groupID, V2TimGroupMemberInfo opUser) async { //群被回收（全员能收到） //groupID 群 ID //opUser 处理人 }, onMemberEnter: (String groupID, List memberList) async { //有用户加入群（全员能够收到） //groupID 群 ID //memberList 加入的成员 }, onMemberInfoChanged: (String groupID, List v2TIMGroupMemberChangeInfoList) async { //群成员信息被修改，仅支持禁言通知（全员能收到）。 //groupID 群 ID //v2TIMGroupMemberChangeInfoList 被修改的群成员信息 }, onMemberInvited: (String groupID, V2TimGroupMemberInfo opUser, List memberList) async { //某些人被拉入某群（全员能够收到） //groupID 群 ID //opUser 处理人 //memberList 被拉进群成员 }, onMemberKicked: (String groupID, V2TimGroupMemberInfo opUser, List memberList) async { //某些人被踢出某群（全员能够收到） //groupID 群 ID //opUser 处理人 //memberList 被踢成员 }, onMemberLeave: (String groupID, V2TimGroupMemberInfo member) async { //有用户离开群（全员能够收到） //groupID 群 ID //member 离开的成员 }, onQuitFromGroup: (String groupID) async { //主动退出群组（主要用于多端同步，直播群（AVChatRoom）不支持） //groupID 群 ID }, onReceiveJoinApplication: (String groupID, V2TimGroupMemberInfo member, String opReason) async { //有新的加群请求（只有群主或管理员会收到） //groupID 群 ID //member 申请人 //opReason 申请原因 }, onReceiveRESTCustomData: (String groupID, String customData) async { //收到 RESTAPI 下发的自定义系统消息 //groupID 群 ID //customData 自定义数据 }, onRevokeAdministrator: (String groupID, V2TimGroupMemberInfo opUser, List memberList) async { //取消管理员身份 //groupID 群 ID //opUser 处理人 //memberList 被处理的群成员 }, ); //设置群组监听器 TencentImSDKPlugin.v2TIMManager.setGroupListener(listener: listener); "},"api/v2timmessagemanager/":{"url":"api/v2timmessagemanager/","title":"V2TIMMessageManager","summary":"提供高级消息处理相关接口","keywords":"","body":"V2TIMMessageManager V2TIMMessageManager功能介绍 提供高级消息处理相关接口 API目录 API 描述 addAdvancedMsgListener 添加高级消息的事件监听器 appendMessage 添加多Element消息 clearC2CHistoryMessage 清空单聊本地及云端的消息（不删除会话） clearGroupHistoryMessage 清空群聊本地及云端的消息（不删除会话） createCustomMessage 创建定制化消息 createFaceMessage 创建表情消息 createFileMessage 创建文件消息 createForwardMessage 创建转发消息 createImageMessage 创建图片消息（图片文件最大支持 28 MB） createLocationMessage 创建位置信息 createMergerMessage 创建合并消息 createSoundMessage 创建音频消息 createTargetedGroupMessage 创建一条定向群消息，定向群消息只有指定群成员才能收到。 createTextAtMessage 创建文本消息，并且可以附带 @ 提醒功能（最大支持 8KB） 提醒消息仅适用于在群组中发送的消息 createTextMessage 创建文本消息 createVideoMessage 创建视频文件 deleteMessageFromLocalStorage 删除本地消息 deleteMessages 删除本地及漫游消息 downloadMergerMessage 获取合并消息的子消息列表（下载被合并的消息列表） findMessages 根据 messageID 查询指定会话中的本地消息 getC2CHistoryMessageList 获取单聊历史消息 getC2CReceiveMessageOpt 查询某个用户的 C2C 消息接收选项 getGroupHistoryMessageList 获取群组历史消息 getGroupMessageReadMemberList 获取群消息已读群成员列表 getHistoryMessageList 获取历史消息高级接口 getHistoryMessageListWithoutFormat 获取历史消息高级接口(没有处理Native返回数据) getMessageReadReceipts 获取消息已读回执 insertC2CMessageToLocalStorage 向C2C消息列表中添加一条消息 insertGroupMessageToLocalStorage 向群组消息列表中添加一条消息 markAllMessageAsRead 标记所有消息为已读 markC2CMessageAsRead 设置单聊消息已读 markGroupMessageAsRead 设置群组消息已读 modifyMessage 消息变更 4.0.1及以后版本支持 removeAdvancedMsgListener 移除高级消息监听器 reSendMessage 消息重发 revokeMessage 撤回消息 searchLocalMessages 搜索本地消息 sendMessage 发送消息 sendMessageReadReceipts 发送消息已读回执 sendReplyMessage 发送回复消息 setC2CReceiveMessageOpt 设置用户消息接收选项 setGroupReceiveMessageOpt 修改群消息接收选项 setLocalCustomData 设置消息自定义数据（本地保存，不会发送到对端，程序卸载重装后失效） setLocalCustomInt 设置消息自定义数据，可以用来标记语音、视频消息是否已经播放（本地保存，不会发送到对端，程序卸载重装后失效） "},"api/v2timmessagemanager/addadvancedmsglistener.html":{"url":"api/v2timmessagemanager/addadvancedmsglistener.html","title":"addAdvancedMsgListener","summary":"添加高级消息的事件监听器√","keywords":"","body":"addAdvancedMsgListener 功能介绍 添加高级消息的事件监听器 通过 addAdvancedMsgListener 监听接收所有类型消息（文本、自定义、富媒体消息），相关回调在 V2TimAdvancedMsgListener 中定义。 参数详解 参数名称 参数类型 是否必填 描述 listener V2TimAdvancedMsgListener 是 高级消息监听器 返回值 Future 返回值详解 此方法无返回值 代码示例 // 创建消息监听器 V2TimAdvancedMsgListener listener = V2TimAdvancedMsgListener( onRecvC2CReadReceipt: (List receiptList) { //单聊已读回调 }, onRecvMessageModified: (V2TimMessage message) { // msg 为被修改之后的消息对象 }, onRecvMessageReadReceipts: (List receiptList) { //群聊已读回调 receiptList.forEach((element) { element.groupID; // 群id element.msgID; // 已读回执消息 ID element.readCount; // 群消息最新已读数 element.unreadCount; // 群消息最新未读数 element.userID; // C2C 消息对方 ID }); }, onRecvMessageRevoked: (String messageid) { // 在本地维护的消息中处理被对方撤回的消息 }, onRecvNewMessage: (V2TimMessage message) async { // 处理文本消息 if (message.elemType == MessageElemType.V2TIM_ELEM_TYPE_TEXT) { message.textElem?.text; } // 使用自定义消息 if (message.elemType == MessageElemType.V2TIM_ELEM_TYPE_CUSTOM) { message.customElem?.data; message.customElem?.desc; message.customElem?.extension; } // 使用图片消息 if (message.elemType == MessageElemType.V2TIM_ELEM_TYPE_IMAGE) { message.imageElem ?.path; // 图片上传时的路径，消息发送者才会有这个字段，消息发送者可用这个字段将图片预先上屏，优化上屏体验。 message.imageElem?.imageList?.forEach((element) { // 遍历大图、原图、缩略图 // 解析图片属性 element?.height; element?.localUrl; element?.size; element?.type; // 大图 缩略图 原图 element?.url; element?.uuid; element?.width; }); } // 处理视频消息 if (message.elemType == MessageElemType.V2TIM_ELEM_TYPE_VIDEO) { // 解析视频消息属性，封面、播放地址、宽高、大小等。 message.videoElem?.UUID; message.videoElem?.duration; message.videoElem?.localSnapshotUrl; message.videoElem?.localVideoUrl; message.videoElem?.snapshotHeight; message.videoElem?.snapshotPath; // ... } // 处理音频消息 if (message.elemType == MessageElemType.V2TIM_ELEM_TYPE_SOUND) { // 解析语音消息 播放地址，本地地址，大小，时长等。 message.soundElem?.UUID; message.soundElem?.dataSize; message.soundElem?.duration; message.soundElem?.localUrl; message.soundElem?.url; // ... } // 处理文件消息 if (message.elemType == MessageElemType.V2TIM_ELEM_TYPE_FILE) { // 解析文件消息 文件名、文件大小、url等 message.fileElem?.UUID; message.fileElem?.fileName; message.fileElem?.fileSize; message.fileElem?.localUrl; message.fileElem?.path; message.fileElem?.url; } // 处理位置消息 if (message.elemType == MessageElemType.V2TIM_ELEM_TYPE_LOCATION) { // 解析地理位置消息，经纬度、描述等 message.locationElem?.desc; message.locationElem?.latitude; message.locationElem?.longitude; } // 处理表情消息 if (message.elemType == MessageElemType.V2TIM_ELEM_TYPE_FACE) { message.faceElem?.data; message.faceElem?.index; } // 处理群组tips文本消息 if (message.elemType == MessageElemType.V2TIM_ELEM_TYPE_GROUP_TIPS) { message.groupTipsElem?.groupID; // 所属群组 message.groupTipsElem?.type; // 群Tips类型 message.groupTipsElem?.opMember; // 操作人资料 message.groupTipsElem?.memberList; // 被操作人资料 message.groupTipsElem?.groupChangeInfoList; // 群信息变更详情 message.groupTipsElem?.memberChangeInfoList; // 群成员变更信息 message.groupTipsElem?.memberCount; // 当前群在线人数 } // 处理合并消息消息 if (message.elemType == MessageElemType.V2TIM_ELEM_TYPE_MERGER) { message.mergerElem?.abstractList; message.mergerElem?.isLayersOverLimit; message.mergerElem?.title; V2TimValueCallback> download = await TencentImSDKPlugin.v2TIMManager .getMessageManager() .downloadMergerMessage( msgID: message.msgID!, ); if (download.code == 0) { List? messageList = download.data; } } if (message.textElem?.nextElem != null) { //通过第一个 Elem 对象的 nextElem 方法获取下一个 Elem 对象，如果下一个 Elem 对象存在，会返回 Elem 对象实例，如果不存在，会返回 null。 } }, onSendMessageProgress: (V2TimMessage message, int progress) { //文件上传进度回调 }, ); // 添加高级消息的事件监听器 TencentImSDKPlugin.v2TIMManager .getMessageManager() .addAdvancedMsgListener(listener: listener); "},"api/v2timmessagemanager/removeadvancedmsglistener.html":{"url":"api/v2timmessagemanager/removeadvancedmsglistener.html","title":"removeAdvancedMsgListener","summary":"移除高级消息监听器√","keywords":"","body":"removeAdvancedMsgListener 功能介绍 移除高级消息监听器 参数详解 参数名称 参数类型 是否必填 描述 listener V2TimAdvancedMsgListener 是 需要移除的监听器 返回值 void 返回值详解 此API无返回值 代码示例 // 创建消息监听器 V2TimAdvancedMsgListener listener = V2TimAdvancedMsgListener( onRecvC2CReadReceipt: (List receiptList) { //单聊已读回调 }, onRecvMessageModified: (V2TimMessage message) { // msg 为被修改之后的消息对象 }, onRecvMessageReadReceipts: (List receiptList) { //群聊已读回调 receiptList.forEach((element) { element.groupID; // 群id element.msgID; // 已读回执消息 ID element.readCount; // 群消息最新已读数 element.unreadCount; // 群消息最新未读数 element.userID; // C2C 消息对方 ID }); }, onRecvMessageRevoked: (String messageid) { // 在本地维护的消息中处理被对方撤回的消息 }, onRecvNewMessage: (V2TimMessage message) async { // 处理文本消息 if (message.elemType == MessageElemType.V2TIM_ELEM_TYPE_TEXT) { message.textElem?.text; } // 使用自定义消息 if (message.elemType == MessageElemType.V2TIM_ELEM_TYPE_CUSTOM) { message.customElem?.data; message.customElem?.desc; message.customElem?.extension; } // 使用图片消息 if (message.elemType == MessageElemType.V2TIM_ELEM_TYPE_IMAGE) { message.imageElem ?.path; // 图片上传时的路径，消息发送者才会有这个字段，消息发送者可用这个字段将图片预先上屏，优化上屏体验。 message.imageElem?.imageList?.forEach((element) { // 遍历大图、原图、缩略图 // 解析图片属性 element?.height; element?.localUrl; element?.size; element?.type; // 大图 缩略图 原图 element?.url; element?.uuid; element?.width; }); } // 处理视频消息 if (message.elemType == MessageElemType.V2TIM_ELEM_TYPE_VIDEO) { // 解析视频消息属性，封面、播放地址、宽高、大小等。 message.videoElem?.UUID; message.videoElem?.duration; message.videoElem?.localSnapshotUrl; message.videoElem?.localVideoUrl; message.videoElem?.snapshotHeight; message.videoElem?.snapshotPath; // ... } // 处理音频消息 if (message.elemType == MessageElemType.V2TIM_ELEM_TYPE_SOUND) { // 解析语音消息 播放地址，本地地址，大小，时长等。 message.soundElem?.UUID; message.soundElem?.dataSize; message.soundElem?.duration; message.soundElem?.localUrl; message.soundElem?.url; // ... } // 处理文件消息 if (message.elemType == MessageElemType.V2TIM_ELEM_TYPE_FILE) { // 解析文件消息 文件名、文件大小、url等 message.fileElem?.UUID; message.fileElem?.fileName; message.fileElem?.fileSize; message.fileElem?.localUrl; message.fileElem?.path; message.fileElem?.url; } // 处理位置消息 if (message.elemType == MessageElemType.V2TIM_ELEM_TYPE_LOCATION) { // 解析地理位置消息，经纬度、描述等 message.locationElem?.desc; message.locationElem?.latitude; message.locationElem?.longitude; } // 处理表情消息 if (message.elemType == MessageElemType.V2TIM_ELEM_TYPE_FACE) { message.faceElem?.data; message.faceElem?.index; } // 处理群组tips文本消息 if (message.elemType == MessageElemType.V2TIM_ELEM_TYPE_GROUP_TIPS) { message.groupTipsElem?.groupID; // 所属群组 message.groupTipsElem?.type; // 群Tips类型 message.groupTipsElem?.opMember; // 操作人资料 message.groupTipsElem?.memberList; // 被操作人资料 message.groupTipsElem?.groupChangeInfoList; // 群信息变更详情 message.groupTipsElem?.memberChangeInfoList; // 群成员变更信息 message.groupTipsElem?.memberCount; // 当前群在线人数 } // 处理合并消息消息 if (message.elemType == MessageElemType.V2TIM_ELEM_TYPE_MERGER) { message.mergerElem?.abstractList; message.mergerElem?.isLayersOverLimit; message.mergerElem?.title; V2TimValueCallback> download = await TencentImSDKPlugin.v2TIMManager .getMessageManager() .downloadMergerMessage( msgID: message.msgID!, ); if (download.code == 0) { List? messageList = download.data; } } if (message.textElem?.nextElem != null) { //通过第一个 Elem 对象的 nextElem 方法获取下一个 Elem 对象，如果下一个 Elem 对象存在，会返回 Elem 对象实例，如果不存在，会返回 null。 } }, onSendMessageProgress: (V2TimMessage message, int progress) { //文件上传进度回调 }, ); // 添加高级消息的事件监听器 TencentImSDKPlugin.v2TIMManager .getMessageManager() .addAdvancedMsgListener(listener: listener); // 之后可移除高级消息的事件监听器 TencentImSDKPlugin.v2TIMManager .getMessageManager() .removeAdvancedMsgListener(listener: listener); "},"api/v2timmessagemanager/createtextmessage.html":{"url":"api/v2timmessagemanager/createtextmessage.html","title":"createTextMessage","summary":"创建文本消息√","keywords":"","body":"createTextMessage 功能介绍 创建文本消息 参数详解 参数名称 参数类型 是否必填 描述 text String 是 消息文本 返回值 V2TimValueCallback { code : int desc : String data : { id : String messageInfo : V2TimMessage } } 返回值详解 名称 数值类型 描述 code int 请求结果错误码 desc String 请求结果描述 data V2TimMsgCreateInfoResult 创建后的Text信息 代码示例 // 创建文本消息 V2TimValueCallback createTextMessageRes = await TencentImSDKPlugin.v2TIMManager .getMessageManager() .createTextMessage( text: \"test\", // 文本信息 ); if (createTextMessageRes.code == 0) { // 文本信息创建成功 String? id = createTextMessageRes.data?.id; // 发送文本消息 // 在sendMessage时，若只填写receiver则发个人用户单聊消息 // 若只填写groupID则发群组消息 // 若填写了receiver与groupID则发群内的个人用户，消息在群聊中显示，只有指定receiver能看见 V2TimValueCallback sendMessageRes = await TencentImSDKPlugin .v2TIMManager .getMessageManager() .sendMessage(id: id!, receiver: \"userID\", groupID: \"groupID\"); if (sendMessageRes.code == 0) { // 发送成功 } } "},"api/v2timmessagemanager/createtextatmessage.html":{"url":"api/v2timmessagemanager/createtextatmessage.html","title":"createTextAtMessage","summary":"创建文本消息，并且可以附带 @ 提醒功能","keywords":"","body":"createTextAtMessage 功能介绍 创建文本消息，并且可以附带 @ 提醒功能(直播群不支持) 参数详解 参数名称 参数类型 是否必填 描述 text String 是 消息文本 atUserList List 是 @用户ID列表 返回值 V2TimValueCallback { code : int desc : String data : { id : String messageInfo : V2TimMessage } } 返回值详解 名称 数值类型 描述 code int 请求结果错误码 desc String 请求结果描述 data V2TimMsgCreateInfoResult 创建后的@Text信息 代码示例 // 创建文本消息 V2TimValueCallback createTextAtMessageRes = await TencentImSDKPlugin.v2TIMManager .getMessageManager() .createTextAtMessage( text: \"test\", // 文本信息 atUserList: [], // @用户ID列表 ); if (createTextAtMessageRes.code == 0) { // 文本信息创建成功 String? id = createTextAtMessageRes.data?.id; // 发送@文本消息 // 在sendMessage时，必须填写groupID，receiver必须为空，否则无法发送消息 V2TimValueCallback sendMessageRes = await TencentImSDKPlugin .v2TIMManager .getMessageManager() .sendMessage(id: id!, receiver: \"\", groupID: \"groupID\"); if (sendMessageRes.code == 0) { // 发送成功 } } "},"api/v2timmessagemanager/createcustommessage.html":{"url":"api/v2timmessagemanager/createcustommessage.html","title":"createCustomMessage","summary":"创建定制化消息√","keywords":"","body":"createCustomMessage 功能介绍 创建定制化消息 参数详解 参数名称 参数类型 是否必填 描述 data String 是 自定义data desc String 否 自定义desc extension String 否 自定义extension 返回值 V2TimValueCallback { code : int desc : String data : { id : String messageInfo : V2TimMessage } } 返回值详解 名称 数值类型 描述 code int 请求结果错误码 desc String 请求结果描述 data V2TimMsgCreateInfoResult 创建后的自定义消息信息 代码示例 // 创建自定义消息 V2TimValueCallback createCustomMessageRes = await TencentImSDKPlugin.v2TIMManager .getMessageManager() .createCustomMessage( data: '自定义data', desc: '自定义desc', extension: '自定义extension', ); if (createCustomMessageRes.code == 0) { String? id = createCustomMessageRes.data?.id; // 发送自定义消息 // 在sendMessage时，若只填写receiver则发个人用户单聊消息 // 若只填写groupID则发群组消息 // 若填写了receiver与groupID则发群内的个人用户，消息在群聊中显示，只有指定receiver能看见 V2TimValueCallback sendMessageRes = await TencentImSDKPlugin .v2TIMManager .getMessageManager() .sendMessage(id: id!, receiver: \"userID\", groupID: \"groupID\"); if (sendMessageRes.code == 0) { // 发送成功 sendMessageRes.data?.customElem?.data; //自定义data sendMessageRes.data?.customElem?.desc; //自定义desc sendMessageRes.data?.customElem?.extension; //自定义extension } } "},"api/v2timmessagemanager/createimagemessage.html":{"url":"api/v2timmessagemanager/createimagemessage.html","title":"createImageMessage","summary":"创建图片消息（图片文件最大支持 28 MB）√","keywords":"","body":"createImageMessage 功能介绍 创建图片消息 图片文件最大支持 28 MB 创建图片消息需要先获取到本地图片路径。 创建图片路径不能使用网络Url。 发送消息过程中，会先将图片文件上传至服务器，同时回调上传进度。上传成功后再发送消息。 参数详解 参数名称 参数类型 是否必填 描述 imagePath String 是 图片本地路径 fileContent String 否 （web 必填） 字节数组 fileName String 否 （web 必填） 图片名 返回值 V2TimValueCallback { code : int desc : String data : { id : String messageInfo : V2TimMessage } } 返回值详解 名称 数值类型 描述 code int 请求结果错误码 desc String 请求结果描述 data V2TimMsgCreateInfoResult 创建后的图片信息 代码示例 // 创建图片消息 V2TimValueCallback createImageMessageRes = await TencentImSDKPlugin.v2TIMManager .getMessageManager() .createImageMessage( imagePath: \"本地图片绝对路径\", // 不能使用网络Url ); if (createImageMessageRes.code == 0) { String id = createImageMessageRes.data.id; // 发送图片消息 // 若创建图片路径使用网络Url会报20001错误。 // 在sendMessage时，若只填写receiver则发个人用户单聊消息 // 若只填写groupID则发群组消息 // 若填写了receiver与groupID则发群内的个人用户，消息在群聊中显示，只有指定receiver能看见 V2TimValueCallback sendMessageRes = await TencentImSDKPlugin .v2TIMManager .getMessageManager() .sendMessage(id: id, receiver: \"userID\", groupID: \"groupID\"); if (sendMessageRes.code == 0) { // 发送成功 } } "},"api/v2timmessagemanager/createsoundmessage.html":{"url":"api/v2timmessagemanager/createsoundmessage.html","title":"createSoundMessage","summary":"创建音频消息","keywords":"","body":"createSoundMessage 功能介绍 创建音频消息 创建语音消息需要先获取到本地语音文件路径和语音时长，其中语音时长可用于接收端 UI 显示。 发送消息过程中，会先将语音文件上传至服务器，同时回调上传进度。上传成功后再发送消息。 参数详解 参数名称 参数类型 是否必填 描述 soundPath String 是 音频文件地址 duration int 是 音频文件时长 返回值 V2TimValueCallback { code : int desc : String data : { id : String messageInfo : V2TimMessage } } 返回值详解 名称 数值类型 描述 code int 请求结果错误码 desc String 请求结果描述 data V2TimMsgCreateInfoResult 创建后的音频信息 代码示例 // 创建音频消息 V2TimValueCallback createSoundMessageRes = await TencentImSDKPlugin.v2TIMManager .getMessageManager() .createSoundMessage( soundPath: \"本地录音文件绝对路径\", // 不能使用网络Url duration: 10, // 录音时长，需要用户自己读取 ); if (createSoundMessageRes.code == 0) { String? id = createSoundMessageRes.data?.id; // 发送音频消息 // 在sendMessage时，若只填写receiver则发个人用户单聊消息 // 若只填写groupID则发群组消息 // 若填写了receiver与groupID则发群内的个人用户，消息在群聊中显示，只有指定receiver能看见 V2TimValueCallback sendMessageRes = await TencentImSDKPlugin .v2TIMManager .getMessageManager() .sendMessage(id: id!, receiver: \"userID\", groupID: \"groupID\"); if (sendMessageRes.code == 0) { // 发送成功 } } "},"api/v2timmessagemanager/createvideomessage.html":{"url":"api/v2timmessagemanager/createvideomessage.html","title":"createVideoMessage","summary":"创建视频文件√","keywords":"","body":"createVideoMessage 功能介绍 创建视频文件 参数详解 参数名称 参数类型 是否必填 描述 videoFilePath String 是 视频文件本地路径 type String 是 视频类型 duration int 是 视频时长，单位 s snapshotPath String 是 视频封面图片路径 fileName String 否（web端必填） 文件名 fileContent Uint8List 否（web端必填） 字节数组 返回值 V2TimValueCallback { code : int desc : String data : { id : String messageInfo : V2TimMessage } } 返回值详解 名称 数值类型 描述 code int 请求结果错误码 desc String 请求结果描述 data V2TimMsgCreateInfoResult 创建后的视频信息 代码示例 // 创建视频消息 V2TimValueCallback createVideoMessageRes = await TencentImSDKPlugin.v2TIMManager .getMessageManager() .createVideoMessage( videoFilePath: \"本地视频文件绝对路径\", // 不能使用网络Url type: \"mp4\", // 视频类型 会在接收的消息属性里显示，一般用于回显文件类型 duration: 10, // 视频时长 会在接收的消息属性里显示，一般用于回显文件属性 snapshotPath: \"本地视频封面文件绝对路径\", // 不能使用网络Url ); if (createVideoMessageRes.code == 0) { String? id = createVideoMessageRes.data?.id; // 发送视频消息 // 在sendMessage时，若只填写receiver则发个人用户单聊消息 // 若只填写groupID则发群组消息 // 若填写了receiver与groupID则发群内的个人用户，消息在群聊中显示，只有指定receiver能看见 V2TimValueCallback sendMessageRes = await TencentImSDKPlugin .v2TIMManager .getMessageManager() .sendMessage(id: id!, receiver: \"userID\", groupID: \"groupID\"); if (sendMessageRes.code == 0) { // 发送成功 } } "},"api/v2timmessagemanager/createfilemessage.html":{"url":"api/v2timmessagemanager/createfilemessage.html","title":"createFileMessage","summary":"创建文件消息√","keywords":"","body":"createFileMessage 功能介绍 创建文件消息 创建文件消息需要先获取到本地文件路径。 发送消息过程中，会先将文件上传至服务器，同时回调上传进度。上传成功后再发送消息。 参数详解 参数名称 参数类型 是否必填 描述 filePath String 是 视频文件本地路径 fileName String 是 文件名 fileContent Uint8List 否（web端必填） 字节数组 返回值 V2TimValueCallback { code : int desc : String data : { id : String messageInfo : V2TimMessage } } 返回值详解 名称 数值类型 描述 code int 请求结果错误码 desc String 请求结果描述 data V2TimMsgCreateInfoResult 创建后的文件信息 代码示例 // 创建文件消息 V2TimValueCallback createFileMessageRes = await TencentImSDKPlugin.v2TIMManager .getMessageManager() .createFileMessage( filePath: \"本地文件绝对路径\",// 不能使用网络Url fileName: \"文件名\", ); if (createFileMessageRes.code == 0) { String id = createFileMessageRes.data.id; // 发送文件消息 // 在sendMessage时，若只填写receiver则发个人用户单聊消息 // 若只填写groupID则发群组消息 // 若填写了receiver与groupID则发群内的个人用户，消息在群聊中显示，只有指定receiver能看见 V2TimValueCallback sendMessageRes = await TencentImSDKPlugin .v2TIMManager .getMessageManager() .sendMessage(id: id, receiver: \"userID\", groupID: \"groupID\"); if (sendMessageRes.code == 0) { // 发送成功 } } "},"api/v2timmessagemanager/createlocationmessage.html":{"url":"api/v2timmessagemanager/createlocationmessage.html","title":"createLocationMessage","summary":"创建位置信息√","keywords":"","body":"createLocationMessage 功能介绍 创建位置信息 定位消息会直接发送经纬度，一般需要配合地图控件显示。 参数详解 参数名称 参数类型 是否必填 描述 desc String 是 地理位置描述信息 longitude double 是 经度 latitude double 是 纬度 返回值 V2TimValueCallback { code : int desc : String data : { id : String messageInfo : V2TimMessage } } 返回值详解 名称 数值类型 描述 code int 请求结果错误码 desc String 请求结果描述 data V2TimMsgCreateInfoResult 创建后的位置信息 代码示例 // 创建位置消息 V2TimValueCallback createLocationMessage = await TencentImSDKPlugin.v2TIMManager .getMessageManager() .createLocationMessage( desc: \"深圳市南山区深南大道\", //位置信息摘要 longitude: 34, // 经度 latitude: 20, // 纬度 ); if (createLocationMessage.code == 0) { String? id = createLocationMessage.data?.id; // 发送位置消息 // 在sendMessage时，若只填写receiver则发个人用户单聊消息 // 若只填写groupID则发群组消息 // 若填写了receiver与groupID则发群内的个人用户，消息在群聊中显示，只有指定receiver能看见 V2TimValueCallback sendMessageRes = await TencentImSDKPlugin .v2TIMManager .getMessageManager() .sendMessage(id: id!, receiver: \"userID\", groupID: \"groupID\"); if (sendMessageRes.code == 0) { // 发送成功 } } "},"api/v2timmessagemanager/createfacemessage.html":{"url":"api/v2timmessagemanager/createfacemessage.html","title":"createFaceMessage","summary":"创建表情消息√","keywords":"","body":"createFaceMessage 功能介绍 创建表情消息 定位消息会直接发送表情编码，通常接收端需要将其转换成对应的表情 icon。 SDK 并不提供表情包，如果开发者有表情包，可使用 index 存储表情在表情包中的索引，或者使用 data 存储表情映射的字符串 key，这些都由用户自定义，SDK 内部只做透传。 参数详解 参数名称 参数类型 是否必填 描述 index int 是 表情索引 data String 是 自定义数据 返回值 V2TimValueCallback { code : int desc : String data : { id : String messageInfo : V2TimMessage } } 返回值详解 名称 数值类型 描述 code int 请求结果错误码 desc String 请求结果描述 data V2TimMsgCreateInfoResult 创建后的表情信息 代码示例 // 创建表情消息 V2TimValueCallback createFaceMessageRes = await TencentImSDKPlugin.v2TIMManager .getMessageManager() .createFaceMessage( index: 0,// 表情索引 data: \"自定义消息\", ); if (createFaceMessageRes.code == 0) { String? id = createFaceMessageRes.data?.id; // 发送表情消息 // 在sendMessage时，若只填写receiver则发个人用户单聊消息 // 若只填写groupID则发群组消息 // 若填写了receiver与groupID则发群内的个人用户，消息在群聊中显示，只有指定receiver能看见 V2TimValueCallback sendMessageRes = await TencentImSDKPlugin .v2TIMManager .getMessageManager() .sendMessage(id: id!, receiver: \"userID\", groupID: \"groupID\"); if (sendMessageRes.code == 0) { // 发送成功 } } "},"api/v2timmessagemanager/createmergermessage.html":{"url":"api/v2timmessagemanager/createmergermessage.html","title":"createMergerMessage","summary":"创建合并消息√","keywords":"","body":"createMergerMessage 功能介绍 创建合并消息 如果您想实现类似于微信的合并转发功能，需要进行以下步骤： 根据原始消息列表创建一条合并消息。 把合并消息发送到对端。 对端收到合并消息后解析出原始消息列表。 我们在创建一条合并消息的时候不仅要设置合并消息列表，还要设置标题和摘要信息。 参数详解 参数名称 参数类型 是否必填 描述 msgIDList String 是 原始消息ID列表 title String 是 标题 abstractList List 是 摘要列表 compatibleText String 是 兼容文本信息，低版本 SDK 如果不支持合并消息，默认会收到一条文本消息，文本消息的内容为 compatibleText webMessageInstanceList List 否 web端消息列表 返回值 V2TimValueCallback { code : int desc : String data : { id : String messageInfo : V2TimMessage } } 返回值详解 名称 数值类型 描述 code int 请求结果错误码 desc String 请求结果描述 data V2TimMsgCreateInfoResult 创建的合并消息 代码示例 // 创建合并消息 V2TimValueCallback createMergerMessageResult = await TencentImSDKPlugin.v2TIMManager .getMessageManager() .createMergerMessage( // 需要合并的消息id列表，需要被转发的消息列表，消息列表里可以包含合并消息，不能包含群 Tips 消息 messageId为消息发送后服务端创建的messageid，不是创建消息时的消息id msgIDList: [\"msgid1\", \"msgid2\"], title: \"user1与user2的聊天\", // 合并消息标题 abstractList: [\"user1:hello\", \"user2:你好\"], // 合并消息摘要列表 compatibleText: \"当前版本不支持该消息\", // 合并消息兼容文本，低版本 SDK 如果不支持合并消息，默认会收到一条文本消息，文本消息的内容为 compatibleText ); if (createMergerMessageResult.code == 0) { // 发送合并消息 // 在sendMessage时，若只填写receiver则发个人用户单聊消息 // 若只填写groupID则发群组消息 // 若填写了receiver与groupID则发群内的个人用户，消息在群聊中显示，只有指定receiver能看见 TencentImSDKPlugin.v2TIMManager.getMessageManager().sendMessage( id: createMergerMessageResult.data!.id!, receiver: \"receiver\", groupID: \"groupID\", ); } "},"api/v2timmessagemanager/downloadmergermessage.html":{"url":"api/v2timmessagemanager/downloadmergermessage.html","title":"downloadMergerMessage","summary":"获取合并消息的子消息列表","keywords":"","body":"downloadMergerMessage 功能介绍 获取合并消息的子消息列表(web不支持) 参数详解 参数名称 参数类型 是否必填 描述 msgID String 是 需要获取的合并消息的 返回值 V2TimValueCallback> { code : int desc : String data : List } 返回值详解 名称 数值类型 描述 code int 请求结果错误码 desc String 请求结果描述 data ListV2TimMessage > 获取到的合并消息列表 代码示例 // 创建消息监听器 V2TimAdvancedMsgListener listener = V2TimAdvancedMsgListener( onRecvNewMessage: (V2TimMessage message) async { // 处理合并消息消息 if (message.elemType == MessageElemType.V2TIM_ELEM_TYPE_MERGER) { message.mergerElem?.abstractList; // 摘要列表 message.mergerElem?.isLayersOverLimit; // 是否超出合并上限 message.mergerElem?.title; // 标题 // 根据消息id对合并消息进行下载 V2TimValueCallback> download = await TencentImSDKPlugin.v2TIMManager .getMessageManager() .downloadMergerMessage( msgID: message.msgID!, ); if (download.code == 0) { List messageList = download.data!; } } }, ); // 添加高级消息的事件监听器 TencentImSDKPlugin.v2TIMManager .getMessageManager() .addAdvancedMsgListener(listener: listener); // 创建合并消息 V2TimValueCallback createMergerMessageResult = await TencentImSDKPlugin.v2TIMManager .getMessageManager() .createMergerMessage( msgIDList: [ \"msgid1\",// 需要合并的已经发送后的messageID \"msgid2\"// 需要合并的已经发送后的messageID ], // 需要合并的消息id列表，需要被转发的消息列表，消息列表里可以包含合并消息，不能包含群 Tips 消息 title: \"user1与user2的聊天\", // 合并消息标题 abstractList: [\"user1:hello\", \"user2:你好\"], // 合并消息摘要列表 compatibleText: \"当前版本不支持该消息\", // 合并消息兼容文本，低版本 SDK 如果不支持合并消息，默认会收到一条文本消息，文本消息的内容为 compatibleText ); if (createMergerMessageResult.code == 0) { // 发送合并消息 // 在sendMessage时，若只填写receiver则发个人用户单聊消息 // 若只填写groupID则发群组消息 // 若填写了receiver与groupID则发群内的个人用户，消息在群聊中显示，只有指定receiver能看见 TencentImSDKPlugin.v2TIMManager.getMessageManager().sendMessage( id: createMergerMessageResult.data!.id!, receiver: \"receiver\", groupID: \"groupID\", ); } "},"api/v2timmessagemanager/createforwardmessage.html":{"url":"api/v2timmessagemanager/createforwardmessage.html","title":"createForwardMessage","summary":"创建转发消息√","keywords":"","body":"createForwardMessage 功能介绍 创建转发消息 如果您需要转发单条消息，可以先通过 createForwardMessage 接口创建一条和原消息内容完全一样的转发消息，再调用 sendMessage 接口把转发消息发送出去。 参数详解 参数名称 参数类型 是否必填 描述 msgID String 是 需要转发的消息的id webMessageInstance String 否 web端消息的实例 返回值 V2TimValueCallback { code : int desc : String data : { id : String messageInfo : V2TimMessage } } 返回值详解 名称 数值类型 描述 code int 请求结果错误码 desc String 请求结果描述 data V2TimMsgCreateInfoResult 创建的转发消息 代码示例 // 创建转发消息 V2TimValueCallback createForwardMessageRes = await TencentImSDKPlugin.v2TIMManager .getMessageManager() .createForwardMessage( // 需要合并的消息id列表，需要被转发的消息列表，消息列表里可以包含合并消息，不能包含群 Tips 消息 messageId为消息发送后服务端创建的messageid，不是创建消息时的消息id msgID: \"msgid\", webMessageInstance:\"\", // 若消息为web端传来的消息，请使用V2TimMessage中的messageFromWeb作为此处的参数 ); if (createForwardMessageRes.code == 0) { // 文本信息创建成功 String id = createForwardMessageRes.data!.id!; // 发送转发消息 // 在sendMessage时，若只填写receiver则发个人用户单聊消息 // 若只填写groupID则发群组消息 // 若填写了receiver与groupID则发群内的个人用户，消息在群聊中显示，只有指定receiver能看见 V2TimValueCallback sendMessageRes = await TencentImSDKPlugin .v2TIMManager .getMessageManager() .sendMessage(id: id, receiver: \"userID\", groupID: \"groupID\"); if (sendMessageRes.code == 0) { // 发送成功 } } "},"api/v2timmessagemanager/createtargetedgroupmessage.html":{"url":"api/v2timmessagemanager/createtargetedgroupmessage.html","title":"createTargetedGroupMessage","summary":"创建一条定向群消息√","keywords":"","body":"createTargetedGroupMessage 功能介绍 创建一条定向群消息 定向消息是指，向群内部分指定的成员发送消息，而未被指定的群成员无法收到该消息。可以按照下面的方式实现： 调用 createXXXMessage (其中 XXX 表示具体的消息类型) 接口创建一条原始消息对象 V2TIMMessage。 调用 createTargetedGroupMessage 接口根据原始消息对象创建定向消息对象 V2TimMessage，并指定消息接收成员列表。 调用 sendMessage 接口发送定向消息。 注意： 仅Flutter sdk 3.8.0 及以上版本支持。 该功能需要购买旗舰版套餐包。 创建定向群消息的原始消息对象不支持群 @ 消息。 社群（Community）和直播群（AVChatRoom）不支持发送定向群消息。 定向群消息默认不计入群会话的未读计数。 参数详解 参数名称 参数类型 是否必填 描述 id String 是 创建的消息的id receiverList List 是 群内部分成员id列表 返回值 V2TimValueCallback { code : int desc : String data : { id : String messageInfo : V2TimMessage } } 返回值详解 名称 数值类型 描述 code int 请求结果错误码 desc String 请求结果描述 data V2TimMsgCreateInfoResult 创建的定向群消息 代码示例 // 先创建消息 V2TimValueCallback target = await TencentImSDKPlugin.v2TIMManager .getMessageManager() .createTextMessage(text: \"\"); // 获取消息的发送id String? id = target.data?.id; // 创建定向群消息消息 V2TimValueCallback groupTarget = await TencentImSDKPlugin.v2TIMManager .getMessageManager() .createTargetedGroupMessage( id: id!,// 创建的消息id receiverList: ['user1', 'user2'],//定向成员id列表 ); // 发送定向群消息 if (groupTarget.code == 0) { String? groupTargetdId = groupTarget.data?.id; // 发送定向群消息 // 若只填写groupID则发群组消息 // 若填写了receiver与groupID则发群内的个人用户，消息在群聊中显示，只有指定receiver能看见 V2TimValueCallback sendMessageRes = await TencentImSDKPlugin.v2TIMManager.getMessageManager().sendMessage( id: groupTargetdId!, receiver: \"userID\", groupID: \"groupID\"); if (sendMessageRes.code == 0) { // 发送成功 } } "},"api/v2timmessagemanager/sendmessage.html":{"url":"api/v2timmessagemanager/sendmessage.html","title":"sendMessage","summary":"发送消息√","keywords":"","body":"sendMessage 功能介绍 发送消息 发送消息方法在核心类 TencentImSDKPlugin.v2TIMManager.getMessageManager()中。 V2TimMessage 中可以携带不同类型子类，表示不同类型的消息。 发送消息首先通过createXXXMessage创建不同种类的信息，再通过sendMessage根据消息id发送。 消息类型如下： createTextMessage：文本消息 createCustomMessage：自定义消息 createImageMessage：图片消息 createSoundMessage：音频消息 createVideoMessage：视频消息 createFileMessage：文件消息 createLocationMessage：位置消息 createFaceMessage：表情消息 createForwardMessage：创建转发消息 createMergerMessage：创建合并消息 createTargetedGroupMessage：定向群消息 参数详解 参数 参数类型 是否必填 含义 单聊有效 群聊有效 说明 id String 是 创建消息返回的id YES YES 需要通过对应的 createXxxMessage 接口先行创建 receiver String 是 单聊消息接收者 userID YES NO 如果是发送 C2C 单聊消息，只需要指定 receiver 即可 groupID String 是 群聊 groupID NO YES 如果是发送群聊消息，只需要指定 groupID 即可 priority MessagePriorityEnum 否 消息优先级 NO YES 请把重要消息设置为高优先级（例如红包、礼物消息），高频且不重要的消息设置为低优先级（例如点赞消息） onlineUserOnly bool 否 是否只有在线用户才能收到 YES YES 如果设置为 YES ，接收方历史消息拉取不到，常被用于实现”对方正在输入”或群组里的非重要提示等弱提示功能 offlinePushInfo OfflinePushInfo 否 离线推送信息 YES YES 离线推送时携带的标题和内容 needReadReceipt bool 否 发送群消息是否支持已读 NO YES 发送群消息是否支持已读 isExcludedFromUnreadCount bool 否 发送消息是否计入会话未读数 YES YES 如果设置为 true，发送消息不会计入会话未读，默认为 false isExcludedFromLastMessage bool 否 发送消息是否计入会话 lastMessage YES YES 如果设置为 true，发送消息不会计入会话 lastMessage，默认为 false cloudCustomData String 否 消息云端数据 YES YES 消息附带的额外的数据，存云端，消息的接受者可以访问到 localCustomData String 否 消息本地数据 YES YES 消息附带的额外的数据，存本地，消息的接受者不可以访问到，App 卸载后数据丢失 返回值 V2TimValueCallback { code : int desc : String data : { cloudCustomData : String customElem : V2TimCustomElem elemType : int faceElem : V2TimFaceElem faceUrl : String fileElem : V2TimFileElem friendRemark : String groupAtUserList : List groupID : String groupTipsElem : V2TimGroupTipsElem id : String imageElem : V2TimImageElem isExcludedFromLastMessage : bool isExcludedFromUnreadCount : bool isPeerRead : bool isRead : bool isSelf : bool localCustomData : String localCustomInt : int locationElem : V2TimLocationElem mergerElem : V2TimMergerElem messageFromWeb : String msgID : String nameCard : String needReadReceipt : bool nickName : String offlinePushInfo : V2TimOfflinePushInfo priority : int progress : int random : int sender : String seq : String soundElem : V2TimSoundElem status : int textElem : V2TimTextElem timestamp : int userID : String videoElem : V2TimVideoElem } } 返回值详解 名称 数值类型 描述 code int 请求结果错误码 desc String 请求结果描述 data V2TimMessage 发送的信息 代码示例 // 创建文本消息 V2TimValueCallback createTextMessageRes = await TencentImSDKPlugin.v2TIMManager .getMessageManager() .createTextMessage( text: \"test\", // 文本信息 ); if (createTextMessageRes.code == 0) { // 文本信息创建成功 String? id = createTextMessageRes.data?.id; // 发送文本消息 // 在sendMessage时，若只填写receiver则发个人用户单聊消息 // 若只填写groupID则发群组消息 // 若填写了receiver与groupID则发群内的个人用户，消息在群聊中显示，只有指定receiver能看见 V2TimValueCallback sendMessageRes = await TencentImSDKPlugin.v2TIMManager.getMessageManager().sendMessage( id: id!, // 创建的messageid receiver: \"userID\", // 接收人id groupID: \"groupID\", // 接收群组id priority: MessagePriorityEnum.V2TIM_PRIORITY_DEFAULT, // 消息优先级 onlineUserOnly: false, // 是否只有在线用户才能收到，如果设置为 true ，接收方历史消息拉取不到，常被用于实现“对方正在输入”或群组里的非重要提示等弱提示功能，该字段不支持 AVChatRoom。 isExcludedFromUnreadCount: false, // 发送消息是否计入会话未读数 isExcludedFromLastMessage: false, // 发送消息是否计入会话 lastMessage needReadReceipt: false, // 消息是否需要已读回执（只有 Group 消息有效，6.1 及以上版本支持，需要您购买旗舰版套餐） offlinePushInfo: OfflinePushInfo(), // 离线推送时携带的标题和内容 cloudCustomData: \"\", // 消息云端数据，消息附带的额外的数据，存云端，消息的接受者可以访问到 localCustomData: \"\" // 消息本地数据，消息附带的额外的数据，存本地，消息的接受者不可以访问到，App 卸载后数据丢失 ); if (sendMessageRes.code == 0) { // 发送成功 } } "},"api/v2timmessagemanager/setc2creceivemessageopt.html":{"url":"api/v2timmessagemanager/setc2creceivemessageopt.html","title":"setC2CReceiveMessageOpt","summary":"设置用户消息接收选项√","keywords":"","body":"setC2CReceiveMessageOpt 功能介绍 设置用户消息接收选项 您可以通过参数 userIDList 设置一批用户，但一次最大允许设置 30 个用户 注意： 该接口调用频率被限制为 1 秒内最多调用 5 次。 参数详解 参数名称 参数类型 是否必填 描述 userIDList List 是 需要设置的用户id列表 opt ReceiveMsgOptEnum 是 用户消息接收选项属性 返回值 V2TimCallback { code : int desc : String } 返回值详解 名称 数值类型 描述 code int 请求结果错误码 desc String 请求结果描述 代码示例 //设置用户消息接收选项 // 设置在线和离线都不接收消息 V2TimCallback setC2CReceiveMessageOptRes = await TencentImSDKPlugin .v2TIMManager .getMessageManager() .setC2CReceiveMessageOpt( userIDList: ['user1', 'user2'], // 需要设置的用户id列表 opt: ReceiveMsgOptEnum.V2TIM_NOT_RECEIVE_MESSAGE); // 用户消息接收选项属性 if (setC2CReceiveMessageOptRes.code == 0) { //设置成功 } "},"api/v2timmessagemanager/getc2creceivemessageopt.html":{"url":"api/v2timmessagemanager/getc2creceivemessageopt.html","title":"getC2CReceiveMessageOpt","summary":"查询某个用户的 C2C 消息接收选项√","keywords":"","body":"getC2CReceiveMessageOpt 功能介绍 查询某个用户的 C2C 消息接收选项 注意：web不支持该接口 参数详解 参数名称 参数类型 是否必填 描述 userIDList List 是 需要查询的用户id列表 返回值 V2TimValueCallback> { code : int desc : String data : List } 返回值详解 名称 数值类型 描述 code int 请求结果错误码 desc String 请求结果描述 data ListV2TimReceiveMessageOptInfo > 查询到的消息接收选项列表 代码示例 // 查询某些用户的 C2C 消息接收选项 V2TimValueCallback> getC2CReceiveMessageOptRes = await TencentImSDKPlugin.v2TIMManager .getMessageManager() .getC2CReceiveMessageOpt(userIDList: ['user1', 'user2']); if (getC2CReceiveMessageOptRes.code == 0) { //查询成功 getC2CReceiveMessageOptRes.data?.forEach((element) { element.c2CReceiveMessageOpt; // 此用户的消息接收选项 element.userID; // 此用户的id }); } "},"api/v2timmessagemanager/setgroupreceivemessageopt.html":{"url":"api/v2timmessagemanager/setgroupreceivemessageopt.html","title":"setGroupReceiveMessageOpt","summary":"设置群组消息接收选项√","keywords":"","body":"setGroupReceiveMessageOpt 功能介绍 设置群组消息接收选项 参数详解 参数名称 参数类型 是否必填 描述 groupID String 是 需要设置的群组id opt ReceiveMsgOptEnum 是 群组消息接收选项属性 返回值 V2TimCallback { code : int desc : String } 返回值详解 名称 数值类型 描述 code int 请求结果错误码 desc String 请求结果描述 代码示例 //设置群组消息接收选项 // 设置在线和离线都不接收消息 V2TimCallback setGroupReceiveMessageOptRes = await TencentImSDKPlugin .v2TIMManager .getMessageManager() .setGroupReceiveMessageOpt( groupID: \"groupID\", // 需要设置的群组id opt: ReceiveMsgOptEnum.V2TIM_NOT_RECEIVE_MESSAGE); // 用户消息接收选项属性 if (setGroupReceiveMessageOptRes.code == 0) { //设置成功 } "},"api/v2timmessagemanager/getc2chistorymessagelist.html":{"url":"api/v2timmessagemanager/getc2chistorymessagelist.html","title":"getC2CHistoryMessageList","summary":"获取单聊历史消息√","keywords":"","body":"getC2CHistoryMessageList 功能介绍 获取单聊历史消息 在网络正常的情况下会拉取最新的云端数据。如果网络出现异常，SDK 会返回本地存储的历史消息。 本地存储的历史消息无时间显示，但云端存储的历史消息有存储时长的限制： 体验版：免费存储 7 天，不支持延长 专业版：免费存储 7 天，支持延长 旗舰版：免费存储 30 条，支持延长 参数详解 参数名称 参数类型 是否必填 描述 userID String 是 单聊用户id count int 是 拉取消息的个数，不宜太多，会影响消息拉取的速度，这里建议一次拉取 20 个。 lastMsgID String 否 获取消息的起始消息id，如果传 null，起始消息为会话的最新消息 返回值 V2TimValueCallback> { code : int desc : String data : List } 返回值详解 名称 数值类型 描述 code int 请求结果错误码 desc String 请求结果描述 data ListV2TimMessage > 获取的单聊历史消息 代码示例 // 拉取单聊历史消息 // 首次拉取，lastMsgID 设置为 null // 再次拉取时，lastMsgID 可以使用返回的消息列表中的最后一条消息的id V2TimValueCallback> getC2CHistoryMessageListRes = await TencentImSDKPlugin.v2TIMManager .getMessageManager() .getC2CHistoryMessageList( userID: \"userId\", // 单聊用户id count: 10, // 拉取数据数量 lastMsgID: null, // 拉取起始消息id ); if (getC2CHistoryMessageListRes.code == 0) { //拉取成功 } "},"api/v2timmessagemanager/getgrouphistorymessagelist.html":{"url":"api/v2timmessagemanager/getgrouphistorymessagelist.html","title":"getGroupHistoryMessageList","summary":"获取群组历史消息√","keywords":"","body":"getGroupHistoryMessageList 功能介绍 获取群组历史消息 在网络正常的情况下会拉取最新的云端数据。如果网络出现异常，SDK 会返回本地存储的历史消息。 直播群(AVChatRoom): 仅旗舰版支持，可在控制台开启[直播群新成员查看入群前消息量配置]，支持查看24小时内最多20条消息。 会议群（Meeting）和 社群（Community）默认开启拉取到进群前的历史消息。 好友工作群（Work）和 陌生人社交群（Public）需要前往控制台手动开启。 更多关于群消息的限制，详见 消息能力差异 本地存储的历史消息无时间显示，但云端存储的历史消息有存储时长的限制： 体验版：免费存储 7 天，不支持延长 专业版：免费存储 7 天，支持延长 旗舰版：免费存储 30 条，支持延长 参数详解 参数名称 参数类型 是否必填 描述 groupID String 是 群组id count int 是 拉取消息的个数，不宜太多，会影响消息拉取的速度，这里建议一次拉取 20 个。 lastMsgID String 否 获取消息的起始消息id，如果传 null，起始消息为会话的最新消息 返回值 V2TimValueCallback> { code : int desc : String data : List } 返回值详解 名称 数值类型 描述 code int 请求结果错误码 desc String 请求结果描述 data ListV2TimMessage > 获取的群组历史消息 代码示例 // 拉取单聊历史消息 // 首次拉取，lastMsgID 设置为 null // 再次拉取时，lastMsgID 可以使用返回的消息列表中的最后一条消息的id V2TimValueCallback> getGroupHistoryMessageListRes = await TencentImSDKPlugin.v2TIMManager .getMessageManager() .getGroupHistoryMessageList( groupID: \"groupID\", // 单聊用户id count: 10, // 拉取数据数量 lastMsgID: null, // 拉取起始消息id ); if (getGroupHistoryMessageListRes.code == 0) { //获取成功 } "},"api/v2timmessagemanager/gethistorymessagelist.html":{"url":"api/v2timmessagemanager/gethistorymessagelist.html","title":"getHistoryMessageList","summary":"获取历史消息高级接口√","keywords":"","body":"getHistoryMessageList 功能介绍 获取历史消息高级接口 该接口除了支持普通拉取单聊、群聊历史消息外，还支持以下高级特性： 支持设置拉取消息的位置：从本地拉取、从云端拉取。 支持按照指定的方向拉取：往消息时间更老的方向拉取、往消息时间更新的方向拉取。 支持拉取本地指定的消息类型：文本、图片、语音、视频、文件、表情、群 tips 消息、合并消息、自定义消息等。 注意： 如果设置为拉取云端消息，当 SDK 检测到没有网络，默认会直接返回本地数据 只有会议群（Meeting）才能拉取到进群前的历史消息，直播群（AVChatRoom）消息不存漫游和本地数据库，调用这个接口无效 web 端使用该接口，消息都是从远端拉取，不支持lastMsgSeq 参数详解 参数名称 参数类型 是否必填 描述 getType HistoryMessageGetType 否 拉取消息的位置及方向，可以设置拉取 本地/云端 的 更老/更新 的消息 userID String 否 拉取指定用户的单聊历史消息 groupID String 否 拉取指定群组的群聊历史消息 lastMsgSeq int 否 最后一条消息 seq，表示从哪条消息开始拉取历史消息 count int 是 单次拉取的消息数量 lastMsgID String 否 lastMsgID messageTypeList List 否 用于过滤历史信息属性，若为空则拉取所有属性信息。 返回值 V2TimValueCallback> { code : int desc : String data : List } 返回值详解 名称 数值类型 描述 code int 请求结果错误码 desc String 请求结果描述 data ListV2TimMessage > 获取的历史消息 代码示例 // 拉取单聊历史消息 // 首次拉取，lastMsgID 设置为 null // 再次拉取时，lastMsgID 可以使用返回的消息列表中的最后一条消息的id V2TimValueCallback> getHistoryMessageListRes = await TencentImSDKPlugin.v2TIMManager .getMessageManager() .getHistoryMessageList( getType: HistoryMsgGetTypeEnum.V2TIM_GET_LOCAL_OLDER_MSG, // 拉取消息的位置及方向 userID: \"userID\", // 用户id 拉取单聊消息，需要指定对方的 userID，此时 groupID 传空即可。 groupID: \"groupID\", // 群组id 拉取群聊消息，需要指定群聊的 groupID，此时 userID 传空即可。 count: 10, // 拉取数据数量 lastMsgID: null, // 拉取起始消息id // 仅能在群聊中使用该字段。 // 设置 lastMsgSeq 作为拉取的起点，返回的消息列表中包含这条消息。 // 如果同时指定了 lastMsg 和 lastMsgSeq，SDK 优先使用 lastMsg。 // 如果均未指定 lastMsg 和 lastMsgSeq，拉取的起点取决于是否设置 getTimeBegin。设置了，则使用设置的范围作为起点；未设置，则使用最新消息作为起点。 lastMsgSeq: -1, messageTypeList: [], // 用于过滤历史信息属性，若为空则拉取所有属性信息。 ); if (getHistoryMessageListRes.code == 0) { //获取成功 } "},"api/v2timmessagemanager/gethistorymessagelistwithoutformat.html":{"url":"api/v2timmessagemanager/gethistorymessagelistwithoutformat.html","title":"getHistoryMessageListWithoutFormat","summary":"获取历史消息高级接口(没有处理Native返回数据)√","keywords":"","body":"getHistoryMessageListWithoutFormat 功能介绍 获取历史消息高级接口(没有处理Native返回数据) 该接口除了支持普通拉取单聊、群聊历史消息外，还支持以下高级特性： 支持设置拉取消息的位置：从本地拉取、从云端拉取。 支持按照指定的方向拉取：往消息时间更老的方向拉取、往消息时间更新的方向拉取。 注意： 如果设置为拉取云端消息，当 SDK 检测到没有网络，默认会直接返回本地数据 只有会议群（Meeting）才能拉取到进群前的历史消息，直播群（AVChatRoom）消息不存漫游和本地数据库，调用这个接口无效 web不支持该接口 参数详解 参数名称 参数类型 是否必填 描述 getType HistoryMessageGetType 否 拉取消息的位置及方向，可以设置拉取 本地/云端 的 更老/更新 的消息 userID String 否 拉取指定用户的单聊历史消息 groupID String 否 拉取指定群组的群聊历史消息 lastMsgSeq int 否 最后一条消息 seq，表示从哪条消息开始拉取历史消息 count int 是 单次拉取的消息数量 lastMsgID String 否 lastMsgID 返回值 LinkedHashMap 返回值详解 名称 数值类型 描述 LinkedHashMap LinkedHashMap 获取的历史消息(没有处理Native返回数据) 代码示例 // 拉取单聊历史消息 // 首次拉取，lastMsgID 设置为 null // 再次拉取时，lastMsgID 可以使用返回的消息列表中的最后一条消息的id LinkedHashMap getHistoryMessageListWithoutFormatRes = await TencentImSDKPlugin.v2TIMManager .getMessageManager() .getHistoryMessageListWithoutFormat( getType: HistoryMsgGetTypeEnum .V2TIM_GET_LOCAL_OLDER_MSG, // 拉取消息的位置及方向 userID: \"userID\", // 用户id 拉取单聊消息，需要指定对方的 userID，此时 groupID 传空即可。 groupID: \"groupID\", // 群组id 拉取群聊消息，需要指定群聊的 groupID，此时 userID 传空即可。 count: 10, // 拉取数据数量 lastMsgID: null, // 拉取起始消息id // 仅能在群聊中使用该字段。 // 设置 lastMsgSeq 作为拉取的起点，返回的消息列表中包含这条消息。 // 如果同时指定了 lastMsg 和 lastMsgSeq，SDK 优先使用 lastMsg。 // 如果均未指定 lastMsg 和 lastMsgSeq，拉取的起点取决于是否设置 getTimeBegin。设置了，则使用设置的范围作为起点；未设置，则使用最新消息作为起点。 lastMsgSeq: -1); } "},"api/v2timmessagemanager/appendmessage.html":{"url":"api/v2timmessagemanager/appendmessage.html","title":"appendMessage","summary":"添加多Element消息√","keywords":"","body":"appendMessage 功能介绍 添加多Element消息 为一个消息添加额外的消息，一般用于为图片消息添加text消息进行描述等场景。 参数详解 参数名称 参数类型 是否必填 描述 createMessageBaseId String 是 需要添加Element的消息id createMessageAppendId String 是 添加的消息id 返回值 V2TimValueCallback { code : int desc : String data : { cloudCustomData : String customElem : V2TimCustomElem elemType : int faceElem : V2TimFaceElem faceUrl : String fileElem : V2TimFileElem friendRemark : String groupAtUserList : List groupID : String groupTipsElem : V2TimGroupTipsElem id : String imageElem : V2TimImageElem isExcludedFromLastMessage : bool isExcludedFromUnreadCount : bool isPeerRead : bool isRead : bool isSelf : bool localCustomData : String localCustomInt : int locationElem : V2TimLocationElem mergerElem : V2TimMergerElem messageFromWeb : String msgID : String nameCard : String needReadReceipt : bool nickName : String offlinePushInfo : V2TimOfflinePushInfo priority : int progress : int random : int sender : String seq : String soundElem : V2TimSoundElem status : int textElem : V2TimTextElem timestamp : int userID : String videoElem : V2TimVideoElem } } 返回值详解 名称 数值类型 描述 code int 请求结果错误码 desc String 请求结果描述 data V2TimMessage 添加消息后的信息 代码示例 // 创建文本消息 V2TimValueCallback createTextMessageRes = await TencentImSDKPlugin.v2TIMManager .getMessageManager() .createTextMessage( text: \"test\", // 文本信息 ); // 创建append消息 V2TimValueCallback createAppendMessageRes = await TencentImSDKPlugin.v2TIMManager .getMessageManager() .createTextMessage( text: \"append\", // 添加的文本信息 ); if (createTextMessageRes.code == 0 && createAppendMessageRes.code == 0) { // 文本信息创建成功 String? id = createTextMessageRes.data?.id; String? appendId = createAppendMessageRes.data?.id; // 为第一个消息添加一个Text消息 V2TimValueCallback appendMessageRes = await TencentImSDKPlugin.v2TIMManager .getMessageManager() .appendMessage( createMessageBaseId: id!, createMessageAppendId: appendId!); if (appendMessageRes.code == 0) { // 发送文本消息 // 在sendMessage时，若只填写receiver则发个人用户单聊消息 // 若只填写groupID则发群组消息 // 若填写了receiver与groupID则发群内的个人用户，消息在群聊中显示，只有指定receiver能看见 V2TimValueCallback sendMessageRes = await TencentImSDKPlugin.v2TIMManager .getMessageManager() .sendMessage(id: id, receiver: \"userID\", groupID: \"groupID\");//注意此时的id为被添加的消息id if (sendMessageRes.code == 0) { // 发送成功 // append的Text消息在sendMessageRes.data.textElem.nextElem中 } } } "},"api/v2timmessagemanager/resendmessage.html":{"url":"api/v2timmessagemanager/resendmessage.html","title":"reSendMessage","summary":"消息重发√","keywords":"","body":"reSendMessage 功能介绍 消息重发 当环境网络环境较差或文件上传失败等原因会导致信息发送失败，此时需要调用消息重发的API。 具体消息发送失败的原因可见sendMessage返回的错误码。 参数详解 参数名称 参数类型 是否必填 描述 msgID String 是 需要重发的消息id onlineUserOnly bool 否 是否是发送给在线用户 webMessageInstatnce Object 否（web端必填） web端消息的实例 返回值 V2TimValueCallback { code : int desc : String data : { cloudCustomData : String customElem : V2TimCustomElem elemType : int faceElem : V2TimFaceElem faceUrl : String fileElem : V2TimFileElem friendRemark : String groupAtUserList : List groupID : String groupTipsElem : V2TimGroupTipsElem id : String imageElem : V2TimImageElem isExcludedFromLastMessage : bool isExcludedFromUnreadCount : bool isPeerRead : bool isRead : bool isSelf : bool localCustomData : String localCustomInt : int locationElem : V2TimLocationElem mergerElem : V2TimMergerElem messageFromWeb : String msgID : String nameCard : String needReadReceipt : bool nickName : String offlinePushInfo : V2TimOfflinePushInfo priority : int progress : int random : int sender : String seq : String soundElem : V2TimSoundElem status : int textElem : V2TimTextElem timestamp : int userID : String videoElem : V2TimVideoElem } } 返回值详解 名称 数值类型 描述 code int 请求结果错误码 desc String 请求结果描述 data V2TimMessage 重发后的消息 代码示例 // 创建文本消息 V2TimValueCallback createTextMessageRes = await TencentImSDKPlugin.v2TIMManager .getMessageManager() .createTextMessage( text: \"test\", // 文本信息 ); if (createTextMessageRes.code == 0) { // 文本信息创建成功 String? id = createTextMessageRes.data?.id; // 发送文本消息 // 在sendMessage时，若只填写receiver则发个人用户单聊消息 // 若只填写groupID则发群组消息 // 若填写了receiver与groupID则发群内的个人用户，消息在群聊中显示，只有指定receiver能看见 V2TimValueCallback sendMessageRes = await TencentImSDKPlugin .v2TIMManager .getMessageManager() .sendMessage(id: id!, receiver: \"userID\", groupID: \"groupID\"); if (sendMessageRes.code == 0) { // 发送成功 } else { V2TimValueCallback reSendMessageRes = await TencentImSDKPlugin.v2TIMManager .getMessageManager() .reSendMessage( msgID: id, // 需要重发的消息id onlineUserOnly: false, // 是否是发送给在线用户 webMessageInstatnce: \"\"); //web端消息的实例); if (reSendMessageRes.code == 0) { // 重发成功 } } } "},"api/v2timmessagemanager/sendreplymessage.html":{"url":"api/v2timmessagemanager/sendreplymessage.html","title":"sendReplyMessage","summary":"发送回复消息√","keywords":"","body":"sendReplyMessage 功能介绍 发送回复消息 参数详解 参数 参数类型 是否必填 含义 id String 是 发送的回复消息的id receiver String 是 单聊消息接收者 userID groupID String 是 群聊 groupID replyMessage V2TimMessage 是 被回复的消息 priority MessagePriorityEnum 否 消息优先级 onlineUserOnly bool 否 是否只有在线用户才能收到 needReadReceipt bool 否 消息是否需要已读回执 offlinePushInfo OfflinePushInfo 否 离线推送信息 isExcludedFromUnreadCount bool 否 发送消息是否计入会话未读数 localCustomData String 否 消息本地数据 返回值 V2TimValueCallback { code : int desc : String data : { cloudCustomData : String customElem : V2TimCustomElem elemType : int faceElem : V2TimFaceElem faceUrl : String fileElem : V2TimFileElem friendRemark : String groupAtUserList : List groupID : String groupTipsElem : V2TimGroupTipsElem id : String imageElem : V2TimImageElem isExcludedFromLastMessage : bool isExcludedFromUnreadCount : bool isPeerRead : bool isRead : bool isSelf : bool localCustomData : String localCustomInt : int locationElem : V2TimLocationElem mergerElem : V2TimMergerElem messageFromWeb : String msgID : String nameCard : String needReadReceipt : bool nickName : String offlinePushInfo : V2TimOfflinePushInfo priority : int progress : int random : int sender : String seq : String soundElem : V2TimSoundElem status : int textElem : V2TimTextElem timestamp : int userID : String videoElem : V2TimVideoElem } } 返回值详解 名称 数值类型 描述 code int 请求结果错误码 desc String 请求结果描述 data V2TimMessage 创建的回复信息 代码示例 // 创建文本消息 V2TimValueCallback createTextMessageRes = await TencentImSDKPlugin.v2TIMManager .getMessageManager() .createTextMessage( text: \"test\", // 回复消息的文本信息 ); //查询消息 V2TimValueCallback> findMessageRes = await TencentImSDKPlugin.v2TIMManager .getMessageManager() .findMessages(messageIDList: []); //需要查询的消息id if (createTextMessageRes.code == 0) { // 文本信息创建成功 String? id = createTextMessageRes.data?.id; // 发送文本消息 // 在sendMessage时，若只填写receiver则发个人用户单聊消息 // 若只填写groupID则发群组消息 // 若填写了receiver与groupID则发群内的个人用户，消息在群聊中显示，只有指定receiver能看见 V2TimValueCallback sendMessageRes = await TencentImSDKPlugin .v2TIMManager .getMessageManager() .sendReplyMessage( id: id!, // 发送的回复消息的id receiver: \"userID\", // 接收人id groupID: \"groupID\", // 接收群组id replyMessage: findMessageRes.data![0], // 被回复的消息 类型为V2TimMessage priority: MessagePriorityEnum.V2TIM_PRIORITY_DEFAULT, // 消息优先级 onlineUserOnly: false, // 是否只有在线用户才能收到，如果设置为 true ，接收方历史消息拉取不到，常被用于实现“对方正在输入”或群组里的非重要提示等弱提示功能，该字段不支持 AVChatRoom。 isExcludedFromUnreadCount: false, // 发送消息是否计入会话未读数 needReadReceipt: false, // 消息是否需要已读回执（只有 Group 消息有效，6.1 及以上版本支持，需要您购买旗舰版套餐） offlinePushInfo: OfflinePushInfo(), // 离线推送时携带的标题和内容 localCustomData: \"\" // 消息本地数据，消息附带的额外的数据，存本地，消息的接受者不可以访问到，App 卸载后数据丢失 ); if (sendMessageRes.code == 0) { // 发送成功 } } "},"api/v2timmessagemanager/revokemessage.html":{"url":"api/v2timmessagemanager/revokemessage.html","title":"revokeMessage","summary":"撤回消息√","keywords":"","body":"revokeMessage 功能介绍 撤回消息 默认情况下，发送者只能撤回2分钟以内的消息，您可以按需更改消息撤回时间限制，具体操作请参见 消息撤回设置。 消息的撤回同时需要接收方 UI 代码的配合：当发送方撤回一条消息后，接收方会收到消息撤回通知 onRecvMessageRevoked。通知中包含了撤回消息的 msgID，您可以根据这个 msgID 判断 UI 层是哪一条消息撤回了，然后把对应的消息气泡切换成 \"消息已被撤回\" 状态。 仅支持单聊和群组中发送的普通消息，无法撤销 onlineUserOnly 为 true 即仅在线用户才能收到的消息，也无法撤销直播群（AVChatRoom）中的消息。 web 端掉用 webMessageInstatnce 且为必传 参数详解 参数名称 参数类型 是否必填 描述 msgID String 是 需要撤回的消息id webMessageInstatnce Object 否 （web端必填） 需要撤回的web端消息实例 返回值 V2TimCallback { code : int desc : String } 返回值详解 名称 数值类型 描述 code int 请求结果错误码 desc String 请求结果描述 代码示例 // 撤回消息 V2TimCallback revokeMessageRes = await TencentImSDKPlugin.v2TIMManager.getMessageManager().revokeMessage( msgID: \"msgID\", // 需要撤回的消息id webMessageInstatnce: \"webMessageInstatnce\", // 需要撤回的web端消息实例 ); if (revokeMessageRes.code == 0) { //撤回成功 } "},"api/v2timmessagemanager/modifymessage.html":{"url":"api/v2timmessagemanager/modifymessage.html","title":"modifyMessage","summary":"消息变更 4.0.1及以后版本支持√","keywords":"","body":"modifyMessage 功能介绍 消息变更 4.0.1及以后版本支持 会话里面已经发送成功的消息，会话内任意成员可以针对消息做二次修改。消息修改成功后会同步给会话的全部成员。 修改消息时，IM SDK 仅限制了会话参与者才能修改，如果您需要更多限制，比如限制只有消息发送者才能修改，可以自行在业务层处理。 注意： 目前消息支持修改的信息如下： localCustomData localCustomInt cloudCustomData V2TIMTextElem V2TIMCustomElem 参数详解 参数名称 参数类型 是否必填 描述 message V2TimMessage 是 需要修改的消息 返回值 V2TimValueCallback { code : int desc : String data : { code : int desc : String message : V2TimMessage } } 返回值详解 名称 数值类型 描述 code int 请求结果错误码 desc String 请求结果描述 data V2TimMessageChangeInfo 修改后的信息 代码示例 // 通过消息id查找到需要修改的消息 V2TimValueCallback> msgListRes = await TencentImSDKPlugin .v2TIMManager .getMessageManager() .findMessages(messageIDList: ['msgid']); // 查找需要修改消息的id // 编辑消息 if (msgListRes.code == 0) { List? messageList = msgListRes.data; if (messageList!.isNotEmpty) { V2TimMessage originMessage = messageList[0]; originMessage.cloudCustomData = \"change data\"; // 修改消息的信息 V2TimValueCallback modifyMessageRes = await TencentImSDKPlugin.v2TIMManager .getMessageManager() .modifyMessage(message: originMessage); if (modifyMessageRes.code == 0) { if (modifyMessageRes.data?.code == 0) { // 修改成功 } } } } "},"api/v2timmessagemanager/markc2cmessageasread.html":{"url":"api/v2timmessagemanager/markc2cmessageasread.html","title":"markC2CMessageAsRead","summary":"设置单聊消息已读√","keywords":"","body":"markC2CMessageAsRead 功能介绍 设置单聊消息已读 对端会收到 onRecvC2CReadReceipt 回调，回调里面会携带清空会话未读数的时间戳。 参数详解 参数名称 参数类型 是否必填 描述 userID String 是 需要设置消息已读的用户id 返回值 V2TimCallback { code : int desc : String } 返回值详解 名称 数值类型 描述 code int 请求结果错误码 desc String 请求结果描述 代码示例 // 设置单聊消息已读 V2TimCallback markC2CMessageAsReadRes = await TencentImSDKPlugin .v2TIMManager .getMessageManager() .markC2CMessageAsRead(userID: \"userID\"); // 需要设置消息已读的用户id if (markC2CMessageAsReadRes.code == 0) { // 标记成功 } "},"api/v2timmessagemanager/markgroupmessageasread.html":{"url":"api/v2timmessagemanager/markgroupmessageasread.html","title":"markGroupMessageAsRead","summary":"设置群组消息已读√","keywords":"","body":"markGroupMessageAsRead 功能介绍 设置群组消息已读 调用次API后会收到 onConversationChanged 回调，可以在此回调中更新 UI。 参数详解 参数名称 参数类型 是否必填 描述 groupID String 是 需要设置消息已读的群组id 返回值 V2TimCallback { code : int desc : String } 返回值详解 名称 数值类型 描述 code int 请求结果错误码 desc String 请求结果描述 代码示例 // 设置单聊消息已读 V2TimCallback markGroupMessageAsReadRes = await TencentImSDKPlugin.v2TIMManager .getMessageManager() .markGroupMessageAsRead(groupID: \"groupID\");// 需要设置消息已读的群组id if(markGroupMessageAsReadRes.code==0){ // 标记成功 } "},"api/v2timmessagemanager/markallmessageasread.html":{"url":"api/v2timmessagemanager/markallmessageasread.html","title":"markAllMessageAsRead","summary":"标记所有消息为已读√","keywords":"","body":"markAllMessageAsRead 功能介绍 标记所有消息为已读 调用次API后会收到 onConversationChanged 回调，可以在此回调中更新 UI。 参数详解 此API无参数。 返回值 V2TimCallback { code : int desc : String } 返回值详解 名称 数值类型 描述 code int 请求结果错误码 desc String 请求结果描述 代码示例 // 标记所有消息为已读 V2TimCallback markAllMessageAsReadRes = await TencentImSDKPlugin .v2TIMManager .getMessageManager() .markAllMessageAsRead(); if (markAllMessageAsReadRes.code == 0) { // 标记成功 } "},"api/v2timmessagemanager/deletemessagefromlocalstorage.html":{"url":"api/v2timmessagemanager/deletemessagefromlocalstorage.html","title":"deleteMessageFromLocalStorage","summary":"删除本地消息√","keywords":"","body":"deleteMessageFromLocalStorage 功能介绍 删除本地消息 注意： 该接口只能删除本地历史，消息删除后，SDK 会在本地把这条消息标记为已删除状态，调用 getHistoryMessageList 不能再拉取到。 如果程序卸载重装，本地会失去对这条消息的删除标记，调用 getHistoryMessageList 还能再拉取到该条消息。 web不支持该接口 参数详解 参数名称 参数类型 是否必填 描述 msgID String 是 需要删除的消息id 返回值 V2TimCallback { code : int desc : String } 返回值详解 名称 数值类型 描述 code int 请求结果错误码 desc String 请求结果描述 代码示例 // 删除本地消息 V2TimCallback deleteMessageFromLocalStorageRes = await TencentImSDKPlugin .v2TIMManager .getMessageManager() .deleteMessageFromLocalStorage(msgID: \"\"); // 需要删除的消息id if (deleteMessageFromLocalStorageRes.code == 0) { //删除成功 } "},"api/v2timmessagemanager/deletemessages.html":{"url":"api/v2timmessagemanager/deletemessages.html","title":"deleteMessages","summary":"删除本地及漫游消息√","keywords":"","body":"deleteMessages 功能介绍 删除本地及漫游消息 注意： 该接口会在删除本地消息的基础上，同步删除云端存储的消息，且无法恢复。 每次调用，最多只能删除 30 条消息。 每次调用，待删除的消息必须属于同一会话。 1 秒钟最多只能调用 1 次该接口。 如果一个账号在某设备上拉取过这些消息，那么调用该接口删除云端消息后，这些消息仍然会保存在该设备上，即删除消息不支持多端同步。 参数详解 参数名称 参数类型 是否必填 描述 msgIDs List 是 需要删除的消息id列表 webMessageInstanceList List 否 需要删除的web端消息实例列表 返回值 V2TimCallback { code : int desc : String } 返回值详解 名称 数值类型 描述 code int 请求结果错误码 desc String 请求结果描述 代码示例 // 删除本地及漫游消息 V2TimCallback deleteMessagesRes = await TencentImSDKPlugin.v2TIMManager .getMessageManager() .deleteMessages(msgIDs: ['messageid'], // 需要删除的消息id webMessageInstanceList: [] // 需要删除的web端消息实例列表 ); if (deleteMessagesRes.code == 0) { //删除成功 } "},"api/v2timmessagemanager/clearc2chistorymessage.html":{"url":"api/v2timmessagemanager/clearc2chistorymessage.html","title":"clearC2CHistoryMessage","summary":"清空单聊本地及云端的消息（不删除会话）√","keywords":"","body":"clearC2CHistoryMessage 功能介绍 清空单聊本地及云端的消息（不删除会话） 注意： 会话内的消息在本地删除的同时，在服务器也会同步删除。 web不支持该接口 参数详解 参数名称 参数类型 是否必填 描述 userID String 是 需要删除的用户id 返回值 V2TimCallback { code : int desc : String } 返回值详解 名称 数值类型 描述 code int 请求结果错误码 desc String 请求结果描述 代码示例 //清空单聊本地及云端的消息（不删除会话） V2TimCallback clearC2CHistoryMessageRes = await TencentImSDKPlugin .v2TIMManager .getMessageManager() .clearC2CHistoryMessage(userID: \"userID\"); // 需要清空记录的用户id if (clearC2CHistoryMessageRes.code == 0) { //清除成功 } "},"api/v2timmessagemanager/cleargrouphistorymessage.html":{"url":"api/v2timmessagemanager/cleargrouphistorymessage.html","title":"clearGroupHistoryMessage","summary":"清空群聊本地及云端的消息（不删除会话）√","keywords":"","body":"clearGroupHistoryMessage 功能介绍 清空群聊本地及云端的消息（不删除会话） 注意： 会话内的消息在本地删除的同时，在服务器也会同步删除。 web不支持该接口 参数详解 参数名称 参数类型 是否必填 描述 groupID String 是 需要删除的群组id 返回值 V2TimCallback { code : int desc : String } 返回值详解 名称 数值类型 描述 code int 请求结果错误码 desc String 请求结果描述 代码示例 // 清空群聊本地及云端的消息（不删除会话） V2TimCallback clearGroupHistoryMessageRes = await TencentImSDKPlugin .v2TIMManager .getMessageManager() .clearGroupHistoryMessage(groupID: \"groupID\"); // 需要清空记录的群组id if (clearGroupHistoryMessageRes.code == 0) { //清除成功 } "},"api/v2timmessagemanager/insertc2cmessagetolocalstorage.html":{"url":"api/v2timmessagemanager/insertc2cmessagetolocalstorage.html","title":"insertC2CMessageToLocalStorage","summary":"向C2C消息列表中添加一条消息√","keywords":"","body":"insertC2CMessageToLocalStorage 功能介绍 向C2C消息列表中添加一条消息 只能插入文本消息，参数data为本文内容 该接口主要用于满足向C2C聊天会话中插入一些提示性消息的需求，比如“您已成功发送消息”，这类消息有展示 在聊天消息区的需求，但并没有发送给其他人的必要。 insertC2CMessageToLocalStorage() 相当于一个被禁用了网络发送能力的 sendMessage() 接口。 通过该接口 save 的消息只存本地，程序卸载后会丢失。 注意： web不支持该接口 参数详解 参数名称 参数类型 是否必填 描述 data String 是 文本消息内容 userID String 是 发送对象id sender String 是 发送者id 返回值 V2TimValueCallback { code : int desc : String data : { cloudCustomData : String customElem : V2TimCustomElem elemType : int faceElem : V2TimFaceElem faceUrl : String fileElem : V2TimFileElem friendRemark : String groupAtUserList : List groupID : String groupTipsElem : V2TimGroupTipsElem id : String imageElem : V2TimImageElem isExcludedFromLastMessage : bool isExcludedFromUnreadCount : bool isPeerRead : bool isRead : bool isSelf : bool localCustomData : String localCustomInt : int locationElem : V2TimLocationElem mergerElem : V2TimMergerElem messageFromWeb : String msgID : String nameCard : String needReadReceipt : bool nickName : String offlinePushInfo : V2TimOfflinePushInfo priority : int progress : int random : int sender : String seq : String soundElem : V2TimSoundElem status : int textElem : V2TimTextElem timestamp : int userID : String videoElem : V2TimVideoElem } } 返回值详解 名称 数值类型 描述 code int 请求结果错误码 desc String 请求结果描述 data V2TimMsgCreateInfoResult 创建后的Text信息 代码示例 // 向C2C消息列表中添加一条消息 V2TimValueCallback insertC2CMessageToLocalStorageRes = await TencentImSDKPlugin.v2TIMManager .getMessageManager() .insertC2CMessageToLocalStorage( data: \"data\", // 文本消息内容 userID: \"userID\", // 接受信息用户id sender: \"sender\" // 发送者id ); if (insertC2CMessageToLocalStorageRes.code == 0) { //添加成功 } "},"api/v2timmessagemanager/insertgroupmessagetolocalstorage.html":{"url":"api/v2timmessagemanager/insertgroupmessagetolocalstorage.html","title":"insertGroupMessageToLocalStorage","summary":"向群组消息列表中添加一条消息√","keywords":"","body":"insertGroupMessageToLocalStorage 功能介绍 向群组消息列表中添加一条消息 只能插入文本消息，参数data为本文内容 该接口主要用于满足向群组聊天会话中插入一些提示性消息的需求，比如“您已经退出该群”，这类消息有展示 在聊天消息区的需求，但并没有发送给其他人的必要。 insertGroupMessageToLocalStorage() 相当于一个被禁用了网络发送能力的 sendMessage() 接口。 通过该接口 save 的消息只存本地，程序卸载后会丢失。 注意： web不支持该接口 参数详解 参数名称 参数类型 是否必填 描述 data String 是 文本消息内容 groupID String 是 接受群组id sender String 是 发送者id 返回值 V2TimValueCallback { code : int desc : String data : { cloudCustomData : String customElem : V2TimCustomElem elemType : int faceElem : V2TimFaceElem faceUrl : String fileElem : V2TimFileElem friendRemark : String groupAtUserList : List groupID : String groupTipsElem : V2TimGroupTipsElem id : String imageElem : V2TimImageElem isExcludedFromLastMessage : bool isExcludedFromUnreadCount : bool isPeerRead : bool isRead : bool isSelf : bool localCustomData : String localCustomInt : int locationElem : V2TimLocationElem mergerElem : V2TimMergerElem messageFromWeb : String msgID : String nameCard : String needReadReceipt : bool nickName : String offlinePushInfo : V2TimOfflinePushInfo priority : int progress : int random : int sender : String seq : String soundElem : V2TimSoundElem status : int textElem : V2TimTextElem timestamp : int userID : String videoElem : V2TimVideoElem } } 返回值详解 名称 数值类型 描述 code int 请求结果错误码 desc String 请求结果描述 data V2TimMsgCreateInfoResult 创建后的Text信息 代码示例 // 向群组消息列表中添加一条消息 V2TimValueCallback insertGroupMessageToLocalStorageRes = await TencentImSDKPlugin.v2TIMManager .getMessageManager() .insertGroupMessageToLocalStorage( data: \"data\", // 文本消息内容 groupID: \"groupID\", // 接收群组id sender: \"sender\" // 发送者id ); if (insertGroupMessageToLocalStorageRes.code == 0) { //添加成功 } "},"api/v2timmessagemanager/findmessages.html":{"url":"api/v2timmessagemanager/findmessages.html","title":"findMessages","summary":"根据messageID 查询指定会话中的本地消息√","keywords":"","body":"findMessages 功能介绍 根据messageID 查询指定会话中的本地消息 只支持查询本地消息，例如接收到的消息或者调用拉取历史消息接口获取到的消息。 不支持查询直播群（AVChatRoom）的消息，因为其消息不会保存在本地。 web不支持该接口 参数详解 参数名称 参数类型 是否必填 描述 messageIDList List 是 需要查询的消息id列表 返回值 V2TimValueCallback> { code : int desc : String data : List } 返回值详解 名称 数值类型 描述 code int 请求结果错误码 desc String 请求结果描述 data ListV2TimMessage > 获取的查询到的消息列表 代码示例 // 根据消息id查询消息 V2TimValueCallback> msgListRes = await TencentImSDKPlugin .v2TIMManager .getMessageManager() .findMessages(messageIDList: ['msgid']); // 需要查询的消息id列表 if (msgListRes.code == 0) { //查询成功 } "},"api/v2timmessagemanager/searchlocalmessages.html":{"url":"api/v2timmessagemanager/searchlocalmessages.html","title":"searchLocalMessages","summary":"搜索本地消息√","keywords":"","body":"searchLocalMessages 功能介绍 搜索本地消息 注意： web不支持该接口 参数详解 参数名称 参数类型 是否必填 描述 searchParam V2TimMessageSearchParam 是 搜索设置参数 返回值 V2TimValueCallback { code : int desc : String data : { messageSearchResultItems : List// 符合搜索条件的消息列表 totalCount : int // 符合搜索条件的消息数量 } } 返回值详解 名称 数值类型 描述 code int 请求结果错误码 desc String 请求结果描述 data V2TimMessageSearchResult 符合搜索条件的所有信息 代码示例 // 创建消息搜索设置参数 V2TimMessageSearchParam searchParam = new V2TimMessageSearchParam( conversationID: \"\",// conversationID == null，代表搜索全部会话，conversationID != null，代表搜索指定会话。 keywordList: [],// 关键字列表，最多支持5个。当消息发送者以及消息类型均未指定时，关键字列表必须非空；否则，关键字列表可以为空。 type: 0,// userIDList: [],// 指定 userID 发送的消息，最多支持5个。 messageTypeList: [],// 消息类型过滤列表 searchTimePeriod: 0,// 从起始时间点开始的过去时间范围，单位秒。默认为0即代表不限制时间范围，传24x60x60代表过去一天。 searchTimePosition: 0,// 搜索的起始时间点。默认为0即代表从现在开始搜索。UTC 时间戳，单位：秒 pageIndex: 0,// 分页的页号：用于分页展示查找结果，从零开始起步。 pageSize: 10);// 每页结果数量：用于分页展示查找结果，如不希望分页可将其设置成 0，但如果结果太多，可能会带来性能问题。默认为100。 // 搜索历史信息 V2TimValueCallback searchLocalMessagesRes = await TencentImSDKPlugin .v2TIMManager .getMessageManager() .searchLocalMessages( searchParam:searchParam ); if(searchLocalMessagesRes.code == 0){ // 搜索成功 } "},"api/v2timmessagemanager/sendmessagereadreceipts.html":{"url":"api/v2timmessagemanager/sendmessagereadreceipts.html","title":"sendMessageReadReceipts","summary":"发送消息已读回执√","keywords":"","body":"sendMessageReadReceipts 功能介绍 发送消息已读回执 该功能需要购买旗舰版套餐包，购买 旗舰版套餐包 后可使用。 注意： 3.9.3及以上版本支持 该接口暂时只支持 Group 消息。 messageIDList 里的消息Id必须在同一个 Group 会话中。 该接口调用成功后，会话未读数不会变化，消息发送者会收到 onRecvMessageReadReceipts 回调，回调里面会携带消息的最新已读信息。 web不支持该接口 参数详解 参数名称 参数类型 是否必填 描述 messageIDList List 是 需要确认已读的消息id列表 返回值 V2TimCallback { code : int desc : String } 返回值详解 名称 数值类型 描述 code int 请求结果错误码 desc String 请求结果描述 代码示例 // 用户首先需要创建一条信息 V2TimValueCallback createCustomMessageRes = await TencentImSDKPlugin.v2TIMManager .getMessageManager() .createCustomMessage( data: '正在输入中', ); // 发送消息时，需要把needReadReceipt设置为true TencentImSDKPlugin.v2TIMManager.getMessageManager().sendMessage( id: createCustomMessageRes.data!.id!, receiver: \"\", groupID: \"groupID\", onlineUserOnly: true, needReadReceipt: true); // 消息需要已读回执设置 // 通过消息id确认消息已读 // 接收端发送消息已读回执后，发送端可以通过 V2TimAdvancedMsgListener 的 onRecvMessageReadReceipts 回调监听消息已读回执通知 V2TimCallback sendMessageReadReceipts = await TencentImSDKPlugin .v2TIMManager .getMessageManager() .sendMessageReadReceipts( messageIDList: [createCustomMessageRes.data!.id!]); // 需要确认已读的消息id if (sendMessageReadReceipts.code == 0) { // 成功 } else { // 失败 } "},"api/v2timmessagemanager/getmessagereadreceipts.html":{"url":"api/v2timmessagemanager/getmessagereadreceipts.html","title":"getMessageReadReceipts","summary":"获取消息已读回执√","keywords":"","body":"getMessageReadReceipts 功能介绍 获取消息已读回执 该功能需要购买旗舰版套餐包，购买 旗舰版套餐包 后可使用。 注意： 3.9.3及以上版本支持 该接口暂时只支持 Group 消息。 messageIDList 里的消息Id必须在同一个 Group 会话中。 参数详解 参数名称 参数类型 是否必填 描述 messageIDList List 是 需要查询已读回执消息的id列表 返回值 V2TimValueCallback> { code : int desc : String data : List } 返回值详解 名称 数值类型 描述 code int 请求结果错误码 desc String 请求结果描述 data ListV2TimMessageReceipt > 消息已读回执信息列表 代码示例 // 查询消息已读回执 V2TimValueCallback> getMessageReadReceipts = await TencentImSDKPlugin.v2TIMManager .getMessageManager() .getMessageReadReceipts(messageIDList: []);// 需要查询的的消息id列表 if (getMessageReadReceipts.code == 0) { getMessageReadReceipts.data.forEach((element) { // 解析群消息已读回执 element.groupID;// 消息的群组id element.msgID;// 消息的id element.readCount;// 群消息已读人数 element.timestamp; element.unreadCount;// 群消息未读人数 element.userID;// 发送此消息的用户id }); } "},"api/v2timmessagemanager/getgroupmessagereadmemberlist.html":{"url":"api/v2timmessagemanager/getgroupmessagereadmemberlist.html","title":"getGroupMessageReadMemberList","summary":"获取群消息已读或未读群成员列表√","keywords":"","body":"getGroupMessageReadMemberList 功能介绍 获取群消息已读或未读群成员列表 该功能需要购买旗舰版套餐包，购买 旗舰版套餐包 后可使用。 需要到控制台开启，且只支持Work、Public、Meeting群组。且不支持群定向消息。 3.9.3及以上版本支持 参数详解 参数名称 参数类型 是否必填 描述 messageID String 是 需要查询的消息的id filter GetGroupMessageReadMemberListFilter 是 已读或未读的类型 nextSeq int 否 分页拉取标志 count int 否 拉取数量 返回值 V2TimValueCallback { code : int desc : String data : { isFinished : bool memberInfoList : V2TimGroupMemberInfo nextSeq : int } } 返回值详解 名称 数值类型 描述 code int 请求结果错误码 desc String 请求结果描述 data V2TimGroupMessageReadMemberList 群消息已读或未读群成员列表 代码示例 // 先创建消息 V2TimValueCallback target = await TencentImSDKPlugin.v2TIMManager .getMessageManager() .createTextMessage(text: \"test\"); String? groupTargetdId = target.data?.id; V2TimValueCallback sendMessageRes = await TencentImSDKPlugin.v2TIMManager.getMessageManager().sendMessage( id: groupTargetdId!, receiver: \"\", needReadReceipt: true, groupID: \"\"); // 查询消息已读回执 V2TimValueCallback> getMessageReadReceipts = await TencentImSDKPlugin.v2TIMManager .getMessageManager() .getMessageReadReceipts( messageIDList: [sendMessageRes.data!.msgID!]); // 需要查询的的消息id列表 if (getMessageReadReceipts.code == 0) { getMessageReadReceipts.data?.forEach((element) { // 解析群消息已读回执 element.groupID; // 消息的群组id element.msgID; // 消息的id element.readCount; // 群消息已读人数 element.timestamp; element.unreadCount; // 群消息未读人数 element.userID; // 发送此消息的用户id }); } //需要先调用查询消息已读回执 才能 获取群消息已读或未读群成员列表 V2TimValueCallback getGroupMessageReadMemberList = await TencentImSDKPlugin.v2TIMManager .getMessageManager() .getGroupMessageReadMemberList( nextSeq: 0, // 分页拉取标志，第一次填0，回调成功时若不为0则需要分页，再次传入拉去直到为0 count: 100, // 拉取数量 messageID: sendMessageRes.data!.msgID!, // 查询的消息id filter: GetGroupMessageReadMemberListFilter .V2TIM_GROUP_MESSAGE_READ_MEMBERS_FILTER_UNREAD, // 已读或未读的类型 ); if (getGroupMessageReadMemberList.code == 0) { // 获取群消息已读未读群成员列表 getGroupMessageReadMemberList.data?.isFinished; // 是否拉去完 getGroupMessageReadMemberList.data?.memberInfoList; // 已读或未读的成员列表 getGroupMessageReadMemberList.data?.nextSeq; // 分页拉取的 seq 如果为 0 表示拉取结束 } "},"api/v2timmessagemanager/setlocalcustomdata.html":{"url":"api/v2timmessagemanager/setlocalcustomdata.html","title":"setLocalCustomData","summary":"设置消息自定义数据√","keywords":"","body":"setLocalCustomData 功能介绍 设置消息自定义数据 本地保存，不会发送到对端，程序卸载重装后失效 注意： web不支持该接口 参数详解 参数名称 参数类型 是否必填 描述 msgID String 是 需要设置的消息id localCustomData String 是 需要设置的自定义属性 返回值 V2TimCallback { code : int desc : String } 返回值详解 名称 数值类型 描述 code int 请求结果错误码 desc String 请求结果描述 代码示例 // 设置消息自定义数据 // 设置之后此消息会多出一个localCustomData属性，用户可以读取此属性来获取设置的自定义属性 V2TimCallback setLocalCustomDataRes = await TencentImSDKPlugin.v2TIMManager .getMessageManager() .setLocalCustomData( msgID: \"msgID\", // 需要设置的消息id messageId为消息发送后服务端创建的messageid，不是创建消息时的消息id localCustomData: \"localCustomData\"); // 需要设置的自定义属性 if (setLocalCustomDataRes.code == 0) { //设置成功 } "},"api/v2timmessagemanager/setlocalcustomint.html":{"url":"api/v2timmessagemanager/setlocalcustomint.html","title":"setLocalCustomInt","summary":"设置消息自定义数据√","keywords":"","body":"setLocalCustomInt 功能介绍 设置消息自定义数据 本地保存，不会发送到对端，程序卸载重装后失效 注意： web不支持该接口 参数详解 参数名称 参数类型 是否必填 描述 msgID String 是 需要设置的消息id localCustomInt int 是 需要设置的自定义属性 返回值 V2TimCallback { code : int desc : String } 返回值详解 名称 数值类型 描述 code int 请求结果错误码 desc String 请求结果描述 代码示例 // 设置消息自定义数据 // 设置之后此消息会多出一个localCustomInt属性，用户可以读取此属性来获取设置的自定义属性 V2TimCallback setLocalCustomIntRes = await TencentImSDKPlugin.v2TIMManager .getMessageManager() .setLocalCustomInt( msgID: \"msgID\", // 需要设置的消息id messageId为消息发送后服务端创建的messageid，不是创建消息时的消息id localCustomInt: 0); // 需要设置的自定义属性 if (setLocalCustomIntRes.code == 0) { //设置成功 } "},"api/v2timgroupmanager/":{"url":"api/v2timgroupmanager/","title":"V2TIMGroupManager","summary":"群组高级接口，包含了群组的高级功能，例如群成员邀请、非群成员申请进群等操作接口。","keywords":"","body":"V2TIMGroupManager V2TIMGroupManager功能介绍 群组高级接口，包含了群组的高级功能，例如群成员邀请、非群成员申请进群等操作接口。 API目录 API 描述 acceptGroupApplication 同意某一条加群申请 createGroup 创建自定义群组 createTopicInCommunity 创建话题 deleteGroupAttributes 删除指定群属性 deleteTopicFromCommunity 删除话题 getGroupApplicationList 获取加群的申请列表 getGroupAttributes 获取指定群属性 getGroupMemberList 获取群成员列表 getGroupMembersInfo 获取指定的群成员资料 getGroupOnlineMemberCount 获取指定群在线人数 getGroupsInfo 拉取群资料 getJoinedCommunityList 获取当前用户已经加入的支持话题的社群列表 getJoinedGroupList 获取当前用户已经加入的群列表 getTopicInfoList 获取话题列表 initGroupAttributes 初始化群属性 inviteUserToGroup 邀请他人入群 kickGroupMember 踢人 muteGroupMember 禁言（只有管理员或群主能够调用） refuseGroupApplication 拒绝某一条加群申请 searchGroupMembers 搜索群成员 searchGroups 搜索群资料 setGroupApplicationRead 标记申请列表为已读 setGroupAttributes 设置群属性 setGroupInfo 修改群资料 setGroupMemberInfo 修改指定的群成员资料 setGroupMemberRole 设置群成员的角色 setTopicInfo 设置话题属性 transferGroupOwner 转让群主 "},"api/v2timgroupmanager/creategroup.html":{"url":"api/v2timgroupmanager/creategroup.html","title":"createGroup","summary":"创建自定义群组√","keywords":"","body":"createGroup 功能介绍 创建自定义群组 注意： 不支持在同一个 SDKAppID 下创建两个相同 groupID 的群 memberList 指定初始的群成员（直播群 AVChatRoom 不支持指定初始群成员，memberList 请传 null） 社群（Community）功能仅 SDK 5.8.1668 增强版及以上版本、Web SDK 2.17.0 及以上版本支持，您需 购买旗舰版套餐包 并 申请开通 后方可使用。 专业版或旗舰版 SDKAppID 下，所有群类型日净增群组数上限为 1 万个。免费峰值群组数为 10 万个/月，超出免费量将产生 套餐外超量费用。 参数详解 参数名称 参数类型 是否必填 描述 groupID String 否 自定义群组 ID groupType GroupType 是 群类型 groupName String 是 群名称，不能为 null。 notification String 否 群公告 introduction String 否 群介绍 faceUrl String 否 群头像Url isAllMuted bool 否 是否全体禁言 addOpt GroupAddOptTypeEnum 否 加群选项 memberList ListV2TimGroupMember > 否 初始成员列表 isSupportTopic bool 否 是否支持话题 返回值 V2TimValueCallback { code : int desc : String data : String // 创建的群组id } 返回值详解 名称 数值类型 描述 code int 请求结果错误码 desc String 请求结果描述 data String 创建的群组id 代码示例 // 创建群组 V2TimValueCallback createGroupRes = await TencentImSDKPlugin.v2TIMManager.getGroupManager().createGroup( groupType: \"Public\",// 群类型 groupName: \"groupName\",// 群名称，不能为 null。 notification: \"\",// 群公告 introduction: \"\",// 群介绍 faceUrl: \"\",// 群头像Url isAllMuted: false,// 是否全体禁言 isSupportTopic: false,// 是否支持话题 addOpt: GroupAddOptTypeEnum.V2TIM_GROUP_ADD_AUTH,// 添加群设置 memberList: [],// 初始成员列表 ); if (createGroupRes.code == 0) { // 创建成功 createGroupRes.data;// 创建的群号 } "},"api/v2timgroupmanager/getjoinedgrouplist.html":{"url":"api/v2timgroupmanager/getjoinedgrouplist.html","title":"getJoinedGroupList","summary":"获取当前用户已经加入的群列√","keywords":"","body":"getJoinedGroupList 功能介绍 获取当前用户已经加入的群列 注意： 直播群（AVChatRoom）和 社群（Community，支持话题的社群）不包含在此列表中。 该接口有频限检测，SDK 限制调用频率为1 秒 10 次，超过限制后会报 ERR_SDK_COMM_API_CALL_FREQUENCY_LIMIT （7008）错误 参数详解 此API无参数 返回值 V2TimValueCallback> { code : int desc : String data : List } 返回值详解 名称 数值类型 描述 code int 请求结果错误码 desc String 请求结果描述 data ListV2TimGroupInfo > 查询到的群组列表 代码示例 //获取当前用户已经加入的群列 V2TimValueCallback> getJoinedGroupListRes = await TencentImSDKPlugin.v2TIMManager .getGroupManager() .getJoinedGroupList(); if (getJoinedGroupListRes.code == 0) { // 查询成功 getJoinedGroupListRes.data?.forEach((element) { element.createTime;// 群创建时间 element.customInfo;// 群自定义字段 element.faceUrl;// 群头像Url element.groupAddOpt;// 群添加选项设置 element.groupID;// 群ID element.groupName;// 群名 element.groupType;// 群类型 element.introduction;// 群介绍 element.isAllMuted;// 群是否全体禁言 element.isSupportTopic;// 群是否支持话题 element.joinTime;// 当前用户在此群的加入时间 element.lastInfoTime;// 最后一次群修改资料的时间 element.lastMessageTime;// 最后一次群发消息的时间 element.memberCount;// 群员数量 element.notification;// 群公告 element.onlineCount;// 群在线人数 element.owner;// 群主 element.recvOpt;// 当前用户在此群中接受信息的选项 element.role;// 此用户在群中的角色 }); } "},"api/v2timgroupmanager/getgroupsinfo.html":{"url":"api/v2timgroupmanager/getgroupsinfo.html","title":"getGroupsInfo","summary":"获取群资料√","keywords":"","body":"getGroupsInfo 功能介绍 获取群资料 该接口支持一次传入多个 groupID，批量获取多个群的群资料。 参数详解 参数名称 参数类型 是否必填 描述 groupIDList List 是 需要查询的群组 ID列表 返回值 V2TimValueCallback> { code : int desc : String data : List } 返回值详解 名称 数值类型 描述 code int 请求结果错误码 desc String 请求结果描述 data ListV2TimGroupInfoResult > 查询到的群组信息列表 代码示例 //获取群资料 V2TimValueCallback> getGroupsInfoRes = await TencentImSDKPlugin.v2TIMManager .getGroupManager() .getGroupsInfo(groupIDList: []);// 需要查询的群组id列表 if (getGroupsInfoRes.code == 0) { // 查询成功 getGroupsInfoRes.data?.forEach((element) { element.resultCode;// 此群组查询结果码 element.resultMessage;// 此群查询结果描述 element.groupInfo?.createTime;// 群创建时间 element.groupInfo?.customInfo;// 群自定义字段 element.groupInfo?.faceUrl;// 群头像Url element.groupInfo?.groupAddOpt;// 群添加选项设置 element.groupInfo?.groupID;// 群ID element.groupInfo?.groupName;// 群名 element.groupInfo?.groupType;// 群类型 element.groupInfo?.introduction;// 群介绍 element.groupInfo?.isAllMuted;// 群是否全体禁言 element.groupInfo?.isSupportTopic;// 群是否支持话题 element.groupInfo?.joinTime;// 当前用户在此群的加入时间 element.groupInfo?.lastInfoTime;// 最后一次群修改资料的时间 element.groupInfo?.lastMessageTime;// 最后一次群发消息的时间 element.groupInfo?.memberCount;// 群员数量 element.groupInfo?.notification;// 群公告 element.groupInfo?.onlineCount;// 群在线人数 element.groupInfo?.owner;// 群主 element.groupInfo?.recvOpt;// 当前用户在此群中接受信息的选项 element.groupInfo?.role;// 此用户在群中的角色 }); } "},"api/v2timgroupmanager/searchgroups.html":{"url":"api/v2timgroupmanager/searchgroups.html","title":"searchGroups","summary":"搜索群资料√","keywords":"","body":"searchGroups 功能介绍 搜索群资料 SDK 会搜索群名称包含于关键字列表 keywordList 的所有群并返回群信息列表。关键字列表最多支持5个。 参数详解 参数名称 参数类型 是否必填 描述 searchParam V2TimGroupSearchParam 是 搜索群的搜索参数 返回值 V2TimValueCallback> { code : int desc : String data : List// 搜索到的群消息列表 } 返回值详解 名称 数值类型 描述 code int 请求结果错误码 desc String 请求结果描述 data ListV2TimGroupInfo > 搜索到的群消息列表 代码示例 // 搜索群资料的搜索设置 V2TimGroupSearchParam param = V2TimGroupSearchParam( isSearchGroupID: true,//设置是否搜索群 ID，默认为true isSearchGroupName: true, // 设置是否搜索群名称，默认为true keywordList: []);// 搜索关键字列表，最多支持5个。 // 搜索群资料 V2TimValueCallback> searchGroupsRes = await TencentImSDKPlugin.v2TIMManager .getGroupManager() .searchGroups(searchParam: param);// 搜索群资料的搜索设 if (searchGroupsRes.code == 0) { // 搜索成功 searchGroupsRes.data?.forEach((element) { element.customInfo; // 群自定义字段 element.faceUrl; // 群头像Url element.groupAddOpt; // 群添加选项设置 element.groupID; // 群ID element.groupName; // 群名 element.groupType; // 群类型 element.introduction; // 群介绍 element.isAllMuted; // 群是否全体禁言 element.isSupportTopic; // 群是否支持话题 element.joinTime; // 当前用户在此群的加入时间 element.lastInfoTime; // 最后一次群修改资料的时间 element.lastMessageTime; // 最后一次群发消息的时间 element.memberCount; // 群员数量 element.notification; // 群公告 element.onlineCount; // 群在线人数 element.owner; // 群主 element.recvOpt; // 当前用户在此群中接受信息的选项 element.role; // 此用户在群中的角色 }); } "},"api/v2timgroupmanager/setgroupinfo.html":{"url":"api/v2timgroupmanager/setgroupinfo.html","title":"setGroupInfo","summary":"修改群资料√","keywords":"","body":"setGroupInfo 功能介绍 修改群资料 如果您事先调用 addGroupListener 添加了群组事件监听器，群资料被修改后，全员会收到 onGroupInfoChanged 回调。 不同类型的群组，可以修改群资料的成员角色不同： 群组类型 可以修改群基础资料的成员角色 好友工作群(Work) 所有群成员 陌生人社交群（Public） 群主和管理员 临时会议群（Meeting） 群主和管理员 社群（Community） 群主和管理员 直播群（AVChatRoom） 群主 参数详解 参数名称 参数类型 是否必填 描述 info V2TimGroupInfo 是 群资料设置信息 返回值 V2TimCallback { code : int desc : String } 返回值详解 名称 数值类型 描述 code int 请求结果错误码 desc String 请求结果描述 代码示例 // 设置群资料设置 只有以下属性可修改，groupID为需要修改的群组id V2TimGroupInfo info = V2TimGroupInfo( groupID: 'groupID',// 需要修改的群组id groupType: \"Public\",// 群类型 groupName: 'groupName',// 群名 isSupportTopic: false,// 是否支持话题 不支持修改此属性，在创建时确定 notification: \"\",// 群公告 introduction: \"\",// 群介绍 faceUrl: \"\",// 群头像Url isAllMuted: false,// 是否全体禁言 groupAddOpt: 0,// 入群设置 customInfo: {\"custom\": \"custom\"},// 群自定义属性 旗舰版支持此参数 ); V2TimCallback setGroupInfoRes = await TencentImSDKPlugin.v2TIMManager .getGroupManager() .setGroupInfo(info: info); if (setGroupInfoRes.code == 0) { // 修改成功 } "},"api/v2timgroupmanager/initgroupattributes.html":{"url":"api/v2timgroupmanager/initgroupattributes.html","title":"initGroupAttributes","summary":"初始化群属性√","keywords":"","body":"initGroupAttributes 功能介绍 初始化群属性 初始化群属性，会清空原有的群属性列表 注意： 1、目前只支持 AVChatRoom 2、key 最多支持16个，长度限制为32字节 3、value 长度限制为4k 4、总的 attributes（包括 key 和 value）限制为16k 5、initGroupAttributes、setGroupAttributes、deleteGroupAttributes 接口合并计算， SDK 限制为5秒10次，超过后回调8511错误码；后台限制1秒5次，超过后返回10049错误码 参数详解 参数名称 参数类型 是否必填 描述 groupID String 是 需要初始化属性的群组id attributes Map 是 初始化属性 返回值 V2TimCallback { code : int desc : String } 返回值详解 名称 数值类型 描述 code int 请求结果错误码 desc String 请求结果描述 代码示例 // 注意：需要先调用joinGroup进入直播群才能进行设置 // 初始化群属性 V2TimCallback initGroupAttributesRes = await TencentImSDKPlugin.v2TIMManager .getGroupManager() .initGroupAttributes( groupID: \"groupID\",// 需要初始化属性的群组id attributes: {\"custom\":\"custom\"}// 初始化属性 ); if (initGroupAttributesRes.code == 0) { // 初始化成功 } "},"api/v2timgroupmanager/setgroupattributes.html":{"url":"api/v2timgroupmanager/setgroupattributes.html","title":"setGroupAttributes","summary":"设置群属性√","keywords":"","body":"setGroupAttributes 功能介绍 设置群属性 如果设置的群属性不存在，会自动添加该群属性。 注意： 1、目前只支持 AVChatRoom 2、key 最多支持16个，长度限制为32字节 3、value 长度限制为4k 4、总的 attributes（包括 key 和 value）限制为16k 5、initGroupAttributes、setGroupAttributes、deleteGroupAttributes 接口合并计算， SDK 限制为5秒10次，超过后回调8511错误码；后台限制1秒5次，超过后返回10049错误码 参数详解 参数名称 参数类型 是否必填 描述 groupID String 是 需要设置属性的群组id attributes Map 是 设置的属性 返回值 V2TimCallback { code : int desc : String } 返回值详解 名称 数值类型 描述 code int 请求结果错误码 desc String 请求结果描述 代码示例 // 注意：需要先调用joinGroup进入直播群才能进行设置 // 设置群属性 V2TimCallback setGroupAttributesRes = await TencentImSDKPlugin.v2TIMManager .getGroupManager() .setGroupAttributes( groupID: \"groupID\",// 需要设置属性的群组id attributes: {\"custom\":\"custom\"}// 设置的属性 ); if (setGroupAttributesRes.code == 0) { // 设置成功 } "},"api/v2timgroupmanager/deletegroupattributes.html":{"url":"api/v2timgroupmanager/deletegroupattributes.html","title":"deleteGroupAttributes","summary":"删除指定群属性√","keywords":"","body":"deleteGroupAttributes 功能介绍 删除指定群属性 如果 keys 字段填 null ，则会清空所有的群属性。 注意： 1、目前只支持 AVChatRoom 2、initGroupAttributes、setGroupAttributes、deleteGroupAttributes 接口合并计算， SDK 限制为5秒10次，超过后回调8511错误码；后台限制1秒5次，超过后返回10049错误码 参数详解 参数名称 参数类型 是否必填 描述 groupID String 是 需要删除属性的群组id keys List 是 删除的属性key值 返回值 V2TimCallback { code : int desc : String } 返回值详解 名称 数值类型 描述 code int 请求结果错误码 desc String 请求结果描述 代码示例 // 注意：需要先调用joinGroup进入直播群才能进行设置 // 删除指定群属性 V2TimCallback deleteGroupAttributesRes = await TencentImSDKPlugin .v2TIMManager .getGroupManager() .deleteGroupAttributes( groupID: \"groupID\", keys: [\"custom\"] ); if (deleteGroupAttributesRes.code == 0) { // 删除成功 } "},"api/v2timgroupmanager/getgroupattributes.html":{"url":"api/v2timgroupmanager/getgroupattributes.html","title":"getGroupAttributes","summary":"获取指定群属性√","keywords":"","body":"getGroupAttributes 功能介绍 获取指定群属性 如果 keys 字段填 null ，则会获取所有的群属性。 注意： 1、目前只支持 AVChatRoom 2、initGroupAttributes、setGroupAttributes、deleteGroupAttributes 接口合并计算， SDK 限制为5秒10次，超过后回调8511错误码；后台限制1秒5次，超过后返回10049错误码 参数详解 参数名称 参数类型 是否必填 描述 groupID String 是 需要获取属性的群组id keys List 是 获取的属性key值列表 返回值 V2TimValueCallback> { code : int desc : String data : Map// 获取到的群属性 } 返回值详解 名称 数值类型 描述 code int 请求结果错误码 desc String 请求结果描述 data Map 获取到的群属性 代码示例 // 注意：需要先调用joinGroup进入直播群才能进行获取 // 获取指定群属性 V2TimValueCallback> getGroupAttributesRes = await TencentImSDKPlugin.v2TIMManager .getGroupManager() .getGroupAttributes( groupID: \"groupID\",// 需要获取属性的群组id keys: [\"custom\"]// 获取的属性key值列表 ); if (getGroupAttributesRes.code == 0) { // 获取成功 Map? groupAttributes = getGroupAttributesRes.data;// 获取到的群属性 } "},"api/v2timgroupmanager/getgrouponlinemembercount.html":{"url":"api/v2timgroupmanager/getgrouponlinemembercount.html","title":"getGroupOnlineMemberCount","summary":"获取指定群在线人数√","keywords":"","body":"getGroupOnlineMemberCount 功能介绍 获取指定群在线人数 注意： 目前仅直播群（AVChatRoom）支持获取群在线人数。 SDK 调用频率限制为 60 秒 1 次。 参数详解 参数名称 参数类型 是否必填 描述 groupID String 是 需要查询的群组id 返回值 V2TimValueCallback { code : int desc : String data : int } 返回值详解 名称 数值类型 描述 code int 请求结果错误码 desc String 请求结果描述 data int 查询到的群在线人数 代码示例 // 获取指定群在线人数 V2TimValueCallback getGroupOnlineMemberCountRes = await TencentImSDKPlugin.v2TIMManager .getGroupManager() .getGroupOnlineMemberCount( groupID: \"groupID\", ); if (getGroupOnlineMemberCountRes.code == 0) { // 查询成功 int? groupOnlineMemberCount = getGroupOnlineMemberCountRes.data;// 查询到的群在线人数 } "},"api/v2timgroupmanager/getgroupmemberlist.html":{"url":"api/v2timgroupmanager/getgroupmemberlist.html","title":"getGroupMemberList","summary":"获取群成员列表√","keywords":"","body":"getGroupMemberList 功能介绍 获取群成员列表 您可以调用 getGroupMemberList 获取指定群的群成员列表。该列表中包含了各个群成员的资料信息。 一个群中的成员人数可能很多（例如 5000+），群成员列表的拉取接口支持过滤器（filter）和分页拉取（nextSeq）两个高级特性。 注意： web 端使用时，count 和 offset 为必传参数. filter 和 nextSeq 不生效。 直播群（AVChatRoom）的特殊限制： 不支持管理员角色的拉取，群成员个数最大只支持 31 个（新进来的成员会排前面），程序重启后，请重新加入群组，否则拉取群成员会报 10007 错误码。 参数详解 参数名称 参数类型 是否必填 描述 groupID String 是 需要查询的群组 ID filter GroupMemberFilterTypeEnum 是 查询群成员类型 nextSeq String 是 分页拉取标志，第一次拉取填0，回调成功如果 nextSeq 不为零，需要分页，传入返回值再次拉取，直至为0。 count int 否 需要拉取的数量。最大值：100，避免回包过大导致请求失败。若传入超过100，则只拉取前100个。 offset int 否 偏移量，默认从0开始拉取。 返回值 V2TimValueCallback { code : int desc : String data : { memberInfoList : List// 拉取到的群成员列表 nextSeq : String // 分页拉取标志 } } 返回值详解 名称 数值类型 描述 code int 请求结果错误码 desc String 请求结果描述 data ListV2TimGroupMemberFullInfo > 拉取到的群成员列表表 代码示例 // 获取群成员列表 V2TimValueCallback getGroupMemberListRes = await TencentImSDKPlugin.v2TIMManager .getGroupManager() .getGroupMemberList( groupID: \"groupID\",// 需要查询的群组 ID filter:GroupMemberFilterTypeEnum.V2TIM_GROUP_MEMBER_FILTER_ADMIN,//查询群成员类型 nextSeq: \"0\",// 分页拉取标志，第一次拉取填0，回调成功如果 nextSeq 不为零，需要分页，传入返回值再次拉取，直至为0。 count: 100,// 需要拉取的数量。最大值：100，避免回包过大导致请求失败。若传入超过100，则只拉取前100个。 offset:0,// 偏移量，默认从0开始拉取。 ); if (getGroupMemberListRes.code == 0) { // 拉取成功 getGroupMemberListRes.data?.memberInfoList?.forEach((element) { element?.customInfo;// 群成员自定义字段 element?.faceUrl;// 头像Url element?.friendRemark;// 好友备注 element?.joinTime;// 群成员入群时间 element?.muteUntil;// 群成员禁言持续时间 element?.nameCard;// 群成员名片 element?.nickName;// 群成员昵称 element?.role;// 群成员角色 element?.userID;// 群成员ID }); } "},"api/v2timgroupmanager/getgroupmembersinfo.html":{"url":"api/v2timgroupmanager/getgroupmembersinfo.html","title":"getGroupMembersInfo","summary":"获取指定的群成员资料√","keywords":"","body":"getGroupMembersInfo 功能介绍 获取指定的群成员资料 该接口支持批量获取，您可以一次传入多个 userID 获取多个群成员的资料，从而提升网络传输效率。 参数详解 参数名称 参数类型 是否必填 描述 groupID String 是 需要查询的群组id memberList List 是 需要查询的用户id列表 返回值 V2TimValueCallback> { code : int desc : String data : List// 查询到的用户信息列表 } 返回值详解 名称 数值类型 描述 code int 请求结果错误码 desc String 请求结果描述 data ListV2TimGroupMemberFullInfo > 查询到的用户信息列表 代码示例 // 获取指定的群成员资料 V2TimValueCallback> getGroupMembersInfoRes = await TencentImSDKPlugin.v2TIMManager .getGroupManager() .getGroupMembersInfo( groupID: \"groupID\", // 需要获取的群组id memberList: [], // 需要获取的用户id列表 ); if (getGroupMembersInfoRes.code == 0) { // 获取成功 getGroupMembersInfoRes.data?.forEach((element) { element.customInfo;// 群成员自定义属性 element.faceUrl;// 群成员头像Url element.friendRemark;// 群成员好友备注 element.joinTime;// 群成员加群时间 element.muteUntil;// 群成员禁言时间 element.nameCard;// 群成员名片 element.nickName;// 群成员的昵称 element.role;// 群成员在此群的角色 element.userID;// 群成员的id }); } "},"api/v2timgroupmanager/searchgroupmembers.html":{"url":"api/v2timgroupmanager/searchgroupmembers.html","title":"searchGroupMembers","summary":"搜索群成员√","keywords":"","body":"searchGroupMembers 功能介绍 搜索群成员 SDK 会在本地搜索指定群 ID 列表中，群成员信息（名片、好友备注、昵称、userID）包含于关键字列表 keywordList 的所有群成员并返回群 ID 和群成员列表的 map，如搜索不到请先调用getGroupMemberList将成员信息存储到本地数据库再调用此接口进行搜索，关键字列表最多支持5个。 注意： web 不支持搜索 参数详解 参数名称 参数类型 是否必填 描述 param V2TimGroupMemberSearchParam 是 搜索群成员的搜索参数 返回值 V2TimValueCallback { code : int desc : String data : { groupMemberSearchResultItems : Map// 群成员搜索结果 } } 返回值详解 名称 数值类型 描述 code int 请求结果错误码 desc String 请求结果描述 data V2GroupMemberInfoSearchResult 群成员搜索结果 代码示例 //搜索参数设置 V2TimGroupMemberSearchParam param = V2TimGroupMemberSearchParam( groupIDList: [],// 指定群 ID 列表，若为 null 则搜索全部群中的群成员 isSearchMemberNameCard: true,// 设置是否搜索群成员名片，默认为true isSearchMemberRemark: true,// 设置是否搜索群成员备注，默认为true isSearchMemberNickName: true,// 设置是否搜索群成员昵称，默认为true isSearchMemberUserID: true,// 设置是否搜索群成员 userID，默认为true keywordList: []);// 搜索关键字列表，最多支持5个 //搜索群成员 V2TimValueCallback searchGroupMembersRes = await TencentImSDKPlugin.v2TIMManager .getGroupManager() .searchGroupMembers(param: param); // 搜索群成员的搜索参数 if (searchGroupMembersRes.code == 0) { // 搜索成功 searchGroupMembersRes.data?.groupMemberSearchResultItems;// 群成员搜索结果 } "},"api/v2timgroupmanager/setgroupmemberinfo.html":{"url":"api/v2timgroupmanager/setgroupmemberinfo.html","title":"setGroupMemberInfo","summary":"修改指定的群成员资料√","keywords":"","body":"setGroupMemberInfo 功能介绍 修改指定的群成员资料 群主或管理员可以调用 setGroupMemberInfo 接口修改群成员的群名片（nameCard）、自定义字段（customInfo）。 参数详解 参数名称 参数类型 是否必填 描述 groupID String 是 需要修改的群组id userID String 是 需要修改的用户id nameCard String 否 修改名片属性 customInfo Map 否 修改自定义属性 返回值 V2TimCallback { code : int desc : String } 返回值详解 名称 数值类型 描述 code int 请求结果错误码 desc String 请求结果描述 代码示例 // 修改指定的群成员资料 V2TimCallback setGroupMemberInfoRes = await TencentImSDKPlugin.v2TIMManager .getGroupManager() .setGroupMemberInfo( groupID: \"groupID\",// 需要修改的群组id userID: \"userID\",// 需要修改的用户id nameCard: \"\",// 修改名片属性 customInfo: {\"custom\":\"custom\"}// 修改自定义属性 需开通此功能 ); if (setGroupMemberInfoRes.code == 0) { // 修改成功 } "},"api/v2timgroupmanager/mutegroupmember.html":{"url":"api/v2timgroupmanager/mutegroupmember.html","title":"muteGroupMember","summary":"禁言√","keywords":"","body":"muteGroupMember 功能介绍 禁言 禁言时间单位为秒，禁言信息存储于群成员的 muteUtil 属性字段中。 群成员被禁言后，全员（包括被禁言的群成员）都会收到 onMemberInfoChanged 事件回调。 只有管理员或群主能够调用 只有群主能将管理员禁言。 参数详解 参数名称 参数类型 是否必填 描述 groupID String 是 禁言的群组id userID String 是 禁言的用户id seconds int 是 禁言时间，单位秒 返回值 V2TimCallback { code : int desc : String } 返回值详解 名称 数值类型 描述 code int 请求结果错误码 desc String 请求结果描述 代码示例 // 禁言群组内的用户 V2TimCallback muteGroupMemberRes = await TencentImSDKPlugin.v2TIMManager .getGroupManager() .muteGroupMember( groupID: \"groupID\",// 禁言的群组id userID: \"userID\",// 禁言的用户id seconds: 0// 禁言时间 ); if (muteGroupMemberRes.code == 0) { // 禁言成功 } "},"api/v2timgroupmanager/inviteusertogroup.html":{"url":"api/v2timgroupmanager/inviteusertogroup.html","title":"inviteUserToGroup","summary":"邀请他人入群√","keywords":"","body":"inviteUserToGroup 功能介绍 邀请他人入群 全体群成员（包括邀请者自己）会收到 onMemberInvited 回调。您可以在这个回调中做一些 UI 上的提示。 工作群（Work）：群里的任何人都可以邀请其他人进群。 会议群（Meeting）和公开群（Public）：只有通过rest api 使用 App 管理员身份才可以邀请其他人进群。 直播群（AVChatRoom）：不支持此功能。 参数详解 参数名称 参数类型 是否必填 描述 groupID String 是 需要加入的群组id userList List 是 邀请的用户id列表 返回值 V2TimValueCallback> { code : int desc : String data : List } 返回值详解 名称 数值类型 描述 code int 请求结果错误码 desc String 请求结果描述 data ListV2TimGroupMemberOperationResult > 每一个用户的请求结果 代码示例 // 邀请他人入群 V2TimValueCallback> inviteUserToGroupRes = await TencentImSDKPlugin.v2TIMManager .getGroupManager() .inviteUserToGroup( groupID: \"groupID\",// 需要加入的群组id userList: [],// 邀请的用户id列表 ); if (inviteUserToGroupRes.code == 0) { // 邀请成功 inviteUserToGroupRes.data?.forEach((element) { element.memberID;// 被操作成员 ID // 邀请结果状态 // 0:操作失败，1:操作成功，2:无效操作，加群时已经是群成员 // 3:等待处理，邀请入群时等待对方处理，4:操作失败，创建群指定初始群成员列表或邀请入群时，被邀请者加入的群总数超限 element.result;// 邀请结果状态 }); } "},"api/v2timgroupmanager/kickgroupmember.html":{"url":"api/v2timgroupmanager/kickgroupmember.html","title":"kickGroupMember","summary":"踢人√","keywords":"","body":"kickGroupMember 功能介绍 踢人 普通群成员被踢后，全员（包括被踢人）会收到 onMemberKicked 回调。 由于直播群（AVChatRoom）对进群没有限制，因此直播群（AVChatRoom）没有支持踢人的接口，您可以使用 muteGroupMember 禁言指定成员达到类似的成员管控的目的。 工作群（Work）：只有群主或 APP 管理员可以踢人。 公开群（Public）、会议群（Meeting）：群主、管理员和 APP 管理员可以踢人 。 直播群（AVChatRoom）：只支持禁言（muteGroupMember），不支持踢人。 参数详解 参数名称 参数类型 是否必填 描述 groupID String 是 需要踢人的群组id memberList List 是 踢出的用户id列表 reason String 否 踢出原因 返回值 V2TimCallback { code : int desc : String } 返回值详解 名称 数值类型 描述 code int 请求结果错误码 desc String 请求结果描述 代码示例 //群组踢人 V2TimCallback kickGroupMemberRes = await TencentImSDKPlugin.v2TIMManager.getGroupManager().kickGroupMember( groupID: \"groupID\", // 需要踢人的群组id memberList: [], // 踢出的用户id列表 reason: \"\" // 踢出原因 ); if (kickGroupMemberRes.code == 0) { // 踢出成功 } "},"api/v2timgroupmanager/setgroupmemberrole.html":{"url":"api/v2timgroupmanager/setgroupmemberrole.html","title":"setGroupMemberRole","summary":"设置群成员的角色√","keywords":"","body":"setGroupMemberRole 功能介绍 修改群资料 普通成员被授权为管理员后，全员（包括被设置的成员）会收到 onGrantAdministrator 回调。 普通成员被取消管理员授权后，全员（包括被设置的成员）会收到 onRevokeAdministrator 回调。 公开群（Public）和会议群（Meeting）：只有群主才能对群成员进行普通成员和管理员之间的角色切换。 其他群不支持设置群成员角色。 转让群组请调用 transferGroupOwner 接口。 参数详解 参数名称 参数类型 是否必填 描述 groupID String 是 设置群组的id userID String 是 被设置角色的用户id role GroupMemberRoleTypeEnum 是 用户被设置的角色属性 返回值 V2TimCallback { code : int desc : String } 返回值详解 名称 数值类型 描述 code int 请求结果错误码 desc String 请求结果描述 代码示例 // 设置群成员的角色 V2TimCallback setGroupMemberRoleRes = await TencentImSDKPlugin.v2TIMManager .getGroupManager() .setGroupMemberRole( groupID: \"groupID\",// 设置群组的id userID: \"userID\",// 被设置角色的用户id role: GroupMemberRoleTypeEnum.V2TIM_GROUP_MEMBER_ROLE_ADMIN// 用户被设置的角色属性 ); if (setGroupMemberRoleRes.code == 0) { // 设置成功 } "},"api/v2timgroupmanager/transfergroupowner.html":{"url":"api/v2timgroupmanager/transfergroupowner.html","title":"transferGroupOwner","summary":"转让群主√","keywords":"","body":"transferGroupOwner 功能介绍 转让群主 群主转让后，全员会收到 onGroupInfoChanged 回调，其中 V2TIMGroupChangeInfo 的 type 为 V2TIMGroupChangeInfo.V2TIM_GROUP_INFO_CHANGE_TYPE_OWNER，value 值为新群主的 UserID。 普通类型的群（Work、Public、Meeting）：只有群主才有权限进行群转让操作。 直播群（AVChatRoom）：不支持转让群主。 参数详解 参数名称 参数类型 是否必填 描述 groupID String 是 设置群组的id userID String 是 被设置角色的用户id 返回值 V2TimCallback { code : int desc : String } 返回值详解 名称 数值类型 描述 code int 请求结果错误码 desc String 请求结果描述 代码示例 // 转让群主 V2TimCallback transferGroupOwnerRes = await TencentImSDKPlugin.v2TIMManager .getGroupManager() .transferGroupOwner( groupID: \"groupID\", userID: \"userID\", ); if (transferGroupOwnerRes.code == 0) { // 转让成功 } "},"api/v2timgroupmanager/getgroupapplicationlist.html":{"url":"api/v2timgroupmanager/getgroupapplicationlist.html","title":"getGroupApplicationList","summary":"获取加群的申请列表√","keywords":"","body":"getGroupApplicationList 功能介绍 获取加群的申请列表 注意： web版本不支持 参数详解 此API无参数 返回值 V2TimValueCallback { code : int desc : String data : { groupApplicationList : List// 申请加群信息 unreadCount : int // 未读的申请数量 } } 返回值详解 名称 数值类型 描述 code int 请求结果错误码 desc String 请求结果描述 data V2TimGroupApplicationResult 查询到的申请加群信息 代码示例 // 获取加群的申请列表 V2TimValueCallback getGroupApplicationListRes = await TencentImSDKPlugin.v2TIMManager .getGroupManager() .getGroupApplicationList(); if (getGroupApplicationListRes.code == 0) { // 获取成功 getGroupApplicationListRes.data?.groupApplicationList?.forEach((element) { element?.addTime;// 申请时间 element?.fromUser;// 请求者 userID element?.fromUserFaceUrl;// 请求者头像 element?.fromUserNickName;// 请求者昵称 element?.groupID;// 申请的群组ID element?.handledMsg;// 审批信息：同意或拒绝信息 element?.handleResult;// 处理结果 element?.handleStatus;// 处理标志 0:未处理 1:被他人处理 2:自己已处理 element?.requestMsg;// 申请或邀请附加信息 0:拒绝申请 1:同意申请 element?.toUser;// 判决者id，有人请求加群:0，邀请其他人加群:被邀请人用户 ID element?.type;// 请求类型 0:申请入群 1:邀请入群 }); } "},"api/v2timgroupmanager/acceptgroupapplication.html":{"url":"api/v2timgroupmanager/acceptgroupapplication.html","title":"acceptGroupApplication","summary":"同意某一条加群申请√","keywords":"","body":"acceptGroupApplication 功能介绍 同意某一条加群申请 注意： web 端使用时必须传入webMessageInstance 字段。 对应【群系统通知】的消息实例 参数详解 参数名称 参数类型 是否必填 描述 groupID String 是 加入的群组id reason String 否 同意原因 fromUser String 是 请求者id toUser String 是 判决者id addTime int 否 申请时间 type GroupApplicationTypeEnum 否 申请类型 webMessageInstance String 否（web端必填） 对应【群系统通知】的消息实例 返回值 V2TimCallback { code : int desc : String } 返回值详解 名称 数值类型 描述 code int 请求结果错误码 desc String 请求结果描述 代码示例 // 获取加群列表 V2TimValueCallback getGroupApplicationListRes = await TencentImSDKPlugin.v2TIMManager .getGroupManager() .getGroupApplicationList(); if (getGroupApplicationListRes.code == 0) { // 获取成功 getGroupApplicationListRes.data?.groupApplicationList ?.forEach((element) async { if (element != null) { V2TimCallback acceptGroupApplicationRes = await TencentImSDKPlugin .v2TIMManager .getGroupManager() .acceptGroupApplication( groupID: element.groupID, // 加入的群组id fromUser: element.fromUser!, // 请求者id toUser: element.toUser!, // 判决者id reason: \"\", // 同意原因 addTime: element.addTime, // 申请时间 type: GroupApplicationTypeEnum .V2TIM_GROUP_APPLICATION_GET_TYPE_INVITE, // 申请类型 webMessageInstance: \"\", // 对应【群系统通知】的消息实例 ); if (acceptGroupApplicationRes.code == 0) { // 同意成功 } } }); } "},"api/v2timgroupmanager/refusegroupapplication.html":{"url":"api/v2timgroupmanager/refusegroupapplication.html","title":"refuseGroupApplication","summary":"拒绝某一条加群申请√","keywords":"","body":"refuseGroupApplication 功能介绍 拒绝某一条加群申请 注意： web 端使用时必须传入webMessageInstance 字段。 对应【群系统通知】的消息实例 参数详解 参数名称 参数类型 是否必填 描述 groupID String 是 加入的群组id reason String 否 拒绝原因 fromUser String 是 请求者id toUser String 是 判决者id addTime int 否 申请时间 type GroupApplicationTypeEnum 否 申请类型 webMessageInstance String 否（web端必填） 对应【群系统通知】的消息实例 返回值 V2TimCallback { code : int desc : String } 返回值详解 名称 数值类型 描述 code int 请求结果错误码 desc String 请求结果描述 代码示例 // 获取加群列表 V2TimValueCallback getGroupApplicationListRes = await TencentImSDKPlugin.v2TIMManager .getGroupManager() .getGroupApplicationList(); if (getGroupApplicationListRes.code == 0) { // 获取成功 getGroupApplicationListRes.data?.groupApplicationList ?.forEach((element) async { if (element != null) { V2TimCallback refuseGroupApplicationRes = await TencentImSDKPlugin .v2TIMManager .getGroupManager() .refuseGroupApplication( groupID: element.groupID, // 加入的群组id fromUser: element.fromUser!, // 请求者id toUser: element.toUser!, // 判决者id reason: \"\", // 拒绝原因 addTime: element.addTime!, // 申请时间 type: GroupApplicationTypeEnum .V2TIM_GROUP_APPLICATION_GET_TYPE_INVITE, // 申请类型 webMessageInstance: \"\", // 对应【群系统通知】的消息实例 ); if (refuseGroupApplicationRes.code == 0) { // 拒绝成功 } } }); } "},"api/v2timgroupmanager/setgroupapplicationread.html":{"url":"api/v2timgroupmanager/setgroupapplicationread.html","title":"setGroupApplicationRead","summary":"标记所有群组申请列表为已读√","keywords":"","body":"setGroupApplicationRead 功能介绍 标记所有群组申请列表为已读 注意： web 不支持 参数详解 此API无参数 返回值 V2TimCallback { code : int desc : String } 返回值详解 名称 数值类型 描述 code int 请求结果错误码 desc String 请求结果描述 代码示例 // 标记所有群组申请列表为已读 V2TimCallback setGroupApplicationReadRes = await TencentImSDKPlugin .v2TIMManager .getGroupManager() .setGroupApplicationRead(); if (setGroupApplicationReadRes.code == 0) { // 设置成功 } "},"api/v2timgroupmanager/getjoinedcommunitylist.html":{"url":"api/v2timgroupmanager/getjoinedcommunitylist.html","title":"getJoinedCommunityList","summary":"获取当前用户已经加入的支持话题的社群列表√","keywords":"","body":"getJoinedCommunityList 功能介绍 获取当前用户已经加入的支持话题的社群列表 4.0.1及以上版本支持 注意： web版本不支持 参数详解 此API无参数 返回值 V2TimValueCallback> { code : int desc : String data : List } 返回值详解 名称 数值类型 描述 code int 请求结果错误码 desc String 请求结果描述 data ListV2TimGroupInfo > 查询到的群组列表 代码示例 // 获取当前用户已经加入的支持话题的社群列表 V2TimValueCallback> getJoinedCommunityListRes = await TencentImSDKPlugin.v2TIMManager .getGroupManager() .getJoinedCommunityList(); if (getJoinedCommunityListRes.code == 0) { // 查询成功 getJoinedCommunityListRes.data?.forEach((element) { element.createTime;// 群创建时间 element.customInfo;// 群自定义字段 element.faceUrl;// 群头像Url element.groupAddOpt;// 群添加选项设置 element.groupID;// 群ID element.groupName;// 群名 element.groupType;// 群类型 element.introduction;// 群介绍 element.isAllMuted;// 群是否全体禁言 element.isSupportTopic;// 群是否支持话题 element.joinTime;// 当前用户在此群的加入时间 element.lastInfoTime;// 最后一次群修改资料的时间 element.lastMessageTime;// 最后一次群发消息的时间 element.memberCount;// 群员数量 element.notification;// 群公告 element.onlineCount;// 群在线人数 element.owner;// 群主 element.recvOpt;// 当前用户在此群中接受信息的选项 element.role;// 此用户在群中的角色 }); } "},"api/v2timgroupmanager/createtopicincommunity.html":{"url":"api/v2timgroupmanager/createtopicincommunity.html","title":"createTopicInCommunity","summary":"创建话题√","keywords":"","body":"createTopicInCommunity 功能介绍 创建话题 4.0.1及以上版本支持，就算为 注意： web版本不支持 参数详解 参数名称 参数类型 是否必填 描述 groupID String 是 需要创建话题的群组id topicInfo V2TimTopicInfo 是 创建话题的设置 返回值 V2TimValueCallback { code : int desc : String data : String // 被创建话题的id } 返回值详解 名称 数值类型 描述 code int 请求结果错误码 desc String 请求结果描述 data String 被创建话题的id 代码示例 //创建话题 V2TimTopicInfo topicInfo = V2TimTopicInfo( customString: \"\",// 话题自定义字段 draftText: \"\",// 话题草稿 groupAtInfoList: [],// 话题 at 信息列表 introduction: \"\",// 话题介绍 isAllMute: false,// 话题是否全员禁言 lastMessage: null,// 话题最新消息 notification: \"\",// 话题公告 selfMuteTime: 0,// 当前用户在话题中的禁言时间 topicFaceUrl: \"\",// 话题头像Url topicID: \"\",// 话题id topicName: \"\",// 话题名称 unreadCount: 0,// 话题消息未读数量 ); V2TimValueCallback createTopicInCommunityRes = await TencentImSDKPlugin.v2TIMManager .getGroupManager() .createTopicInCommunity( groupID: \"groupID\",// 需要创建话题的群组id topicInfo: topicInfo,// 创建话题的设置 ); if (createTopicInCommunityRes.code == 0) { // 创建成功 String? topicId = createTopicInCommunityRes.data;// 被创建话题的id } "},"api/v2timgroupmanager/deletetopicfromcommunity.html":{"url":"api/v2timgroupmanager/deletetopicfromcommunity.html","title":"deleteTopicFromCommunity","summary":"删除话题","keywords":"","body":"deleteTopicFromCommunity 功能介绍 删除话题 4.0.1及以上版本支持。 注意： web版本不支持 参数详解 参数名称 参数类型 是否必填 描述 groupID String 是 需要删除属性的群组id topicIDList List 是 删除的话题id列表 返回值 V2TimValueCallback> { code : int desc : String data : List// 话题删除处理结果 } 返回值详解 名称 数值类型 描述 code int 请求结果错误码 desc String 请求结果描述 data ListV2TimTopicOperationResult > 话题删除处理结果 代码示例 // 删除话题 V2TimValueCallback> deleteTopicFromCommunityRes = await TencentImSDKPlugin.v2TIMManager .getGroupManager() .deleteTopicFromCommunity( groupID: \"groupID\",// 需要删除属性的群组id topicIDList: [],// 删除的话题id列表 ); if (deleteTopicFromCommunityRes.code == 0) { // 删除成功 deleteTopicFromCommunityRes.data?.forEach((element) { element.errorCode;// 删除处理结果错误码 element.errorMessage;// 删除处理结果描述 element.topicID;// 被删除的话题id }); } "},"api/v2timgroupmanager/settopicinfo.html":{"url":"api/v2timgroupmanager/settopicinfo.html","title":"setTopicInfo","summary":"设置话题属性","keywords":"","body":"setTopicInfo 功能介绍 设置话题属性 4.0.1及以上版本支持 注意： web版本不支持 参数详解 参数名称 参数类型 是否必填 描述 topicInfo V2TimTopicInfo 是 需要修改的话题的设置 返回值 V2TimCallback { code : int desc : String } 返回值详解 名称 数值类型 描述 code int 请求结果错误码 desc String 请求结果描述 代码示例 // 设置话题属性 通过topicInfo中的topicID确定需要修改的话题 V2TimTopicInfo topicInfo = V2TimTopicInfo( customString: \"\",// 话题自定义字段 draftText: \"\",// 话题草稿 groupAtInfoList: [],// 话题 at 信息列表 introduction: \"\",// 话题介绍 isAllMute: false,// 话题是否全员禁言 lastMessage: null,// 话题最新消息 notification: \"\",// 话题公告 selfMuteTime: 0,// 当前用户在话题中的禁言时间 topicFaceUrl: \"\",// 话题头像Url topicID: \"\",// 需要修改的话题的id topicName: \"\",// 话题名称 unreadCount: 0,// 话题消息未读数量 ); V2TimCallback setTopicInfoRes = await TencentImSDKPlugin.v2TIMManager .getGroupManager() .setTopicInfo( topicInfo: topicInfo,// 需要修改的话题的设置 ); if (setTopicInfoRes.code == 0) { // 设置成功 } "},"api/v2timgroupmanager/gettopicinfolist.html":{"url":"api/v2timgroupmanager/gettopicinfolist.html","title":"getTopicInfoList","summary":"获取话题属性的列表√","keywords":"","body":"getTopicInfoList 功能介绍 获取话题属性的列表 4.0.1及以上版本支持 当 topicIDList 列表为空时，为获取该社群下的所有话题列表 当 topicIDList 填入指定的话题 ID 时，为获取填入的话题列表 注意： web版本不支持 参数详解 参数名称 参数类型 是否必填 描述 groupID String 是 需要获取话题属性的群组id topicIDList List 是 需要获取话题属性的话题id列表 返回值 V2TimValueCallback> { code : int desc : String data : List// 获取到的话题信息列表 } 返回值详解 名称 数值类型 描述 code int 请求结果错误码 desc String 请求结果描述 data ListV2TimTopicInfoResult > 获取到的话题信息列表 代码示例 // 获取话题属性的列表 V2TimValueCallback> getTopicInfoListoRes = await TencentImSDKPlugin.v2TIMManager .getGroupManager() .getTopicInfoList( groupID: \"groupID\",// 需要获取话题属性的群组id topicIDList: [],// 需要获取话题属性的话题id列表 ); if (getTopicInfoListoRes.code == 0) { // 查询成功 getTopicInfoListoRes.data?.forEach((element) { element.errorCode;// 查询结果错误码 element.errorMessage;。// 查询结果描述 element.topicInfo?.customString;// 此条话题的自定义信息 element.topicInfo?.draftText;// 此条话题的草稿 element.topicInfo?.groupAtInfoList;// 此条话题的@信息列表 element.topicInfo?.introduction;// 此条话题的介绍 element.topicInfo?.isAllMute;// 此条话题是否全员禁言 element.topicInfo?.lastMessage;// 此条话题的最新消息 element.topicInfo?.notification;// 此条话题的公告 element.topicInfo?.recvOpt;// 此条话题的话题消息接收选项 element.topicInfo?.selfMuteTime;// 当前用户在此条话题中的禁言时间 element.topicInfo?.topicFaceUrl;// 此条话题的头像Url element.topicInfo?.topicID;// 此条话题的id element.topicInfo?.unreadCount;// 此条话题的消息未读数量 }); } "},"api/v2timsignalingmanager/":{"url":"api/v2timsignalingmanager/","title":"V2TIMSignalingManager","summary":"提供了信令操作相关接口","keywords":"","body":"V2TIMSignalingManager V2TIMSignalingManager功能介绍 提供了信令操作相关接口 API目录 API 描述 accept 接收方接受邀请 addInvitedSignaling 创建一个信令请求 addSignalingListener 添加信令监听器 cancel 邀请方取消邀请 getSignalingInfo 获取信令信息 invite 邀请某个人 inviteInGroup 邀请群内的某些人 reject 接收方拒绝邀请 removeSignalingListener 移除信令监听器 "},"api/v2timsignalingmanager/addsignalinglistener.html":{"url":"api/v2timsignalingmanager/addsignalinglistener.html","title":"addSignalingListener","summary":"添加信令监听器√","keywords":"","body":"addSignalingListener 功能介绍 添加信令监听器 信令接口是基于 IM 消息提供的一套邀请流程控制的接口，可以实现多种实时场景，例如： 直播聊天室中进行上麦、下麦管理。 聊天场景中实现类似微信中的音视频通话功能。 教育场景中老师邀请同学们举手、发言的流程控制。 参数详解 参数名称 参数类型 是否必填 描述 listener V2TimSignalingListener 是 信令监听器 返回值 void 返回值详解 此方法无返回值 代码示例 //设置信令监听器 V2TimSignalingListener listener = V2TimSignalingListener( onInvitationCancelled: (String inviteID, String inviter, String data) async { //邀请被取消的回调 //inviteID 邀请消息信令id //inviter 邀请人id //data 邀请被取消时的自定义data }, onInvitationTimeout: (String inviteID, List inviteeList) async { //邀请超时的回调 //inviteID 邀请消息信令id //inviteeList 被邀请人的列表 }, onInviteeAccepted: (String inviteID, String invitee, String data) async { //邀请被接受的回调 //inviteID 邀请消息信令id //invitee 被邀请人id //data 接受邀请时的自定义data }, onInviteeRejected: (String inviteID, String invitee, String data) async { //邀请被拒绝的回调 //inviteID 邀请消息信令id //invitee 被邀请人id //data 拒绝邀请时的自定义data }, onReceiveNewInvitation: (String inviteID, String inviter, String groupID, List inviteeList, String data) async { //获取新的邀请的回调 //inviteID 邀请消息信令id //inviter 邀请人id //groupID 发出邀请的群组id //inviteeList 被邀请人的列表 //data 邀请时的自定义data }, ); TencentImSDKPlugin.v2TIMManager .getSignalingManager() .addSignalingListener(listener: listener);//添加信令监听器 "},"api/v2timsignalingmanager/removesignalinglistener.html":{"url":"api/v2timsignalingmanager/removesignalinglistener.html","title":"removeSignalingListener","summary":"移除信令监听器√","keywords":"","body":"removeSignalingListener 功能介绍 移除信令监听器 参数详解 参数名称 参数类型 是否必填 描述 listener V2TimSignalingListener 是 需要移除的信令监听器 返回值 void 返回值详解 此方法无返回值 代码示例 //设置信令监听器 V2TimSignalingListener listener = V2TimSignalingListener( onInvitationCancelled: (String inviteID, String inviter, String data) async { //邀请被取消的回调 //inviteID 邀请消息信令id //inviter 邀请人id //data 邀请被取消时的自定义data }, onInvitationTimeout: (String inviteID, List inviteeList) async { //邀请超时的回调 //inviteID 邀请消息信令id //inviteeList 被邀请人的列表 }, onInviteeAccepted: (String inviteID, String invitee, String data) async { //邀请被接受的回调 //inviteID 邀请消息信令id //invitee 被邀请人id //data 接受邀请时的自定义data }, onInviteeRejected: (String inviteID, String invitee, String data) async { //邀请被拒绝的回调 //inviteID 邀请消息信令id //invitee 被邀请人id //data 拒绝邀请时的自定义data }, onReceiveNewInvitation: (String inviteID, String inviter, String groupID, List inviteeList, String data) async { //获取新的邀请的回调 //inviteID 邀请消息信令id //inviter 邀请人id //groupID 发出邀请的群组id //inviteeList 被邀请人的列表 //data 邀请时的自定义data }, ); TencentImSDKPlugin.v2TIMManager .getSignalingManager() .addSignalingListener(listener: listener);//添加信令监听器 //在添加成功后使用removeSignalingListener可移除监听器 TencentImSDKPlugin.v2TIMManager .getSignalingManager() .removeSignalingListener(listener: listener); "},"api/v2timsignalingmanager/invite.html":{"url":"api/v2timsignalingmanager/invite.html","title":"invite","summary":"邀请某个人√","keywords":"","body":"invite 功能介绍 邀请某个人 参数详解 参数名称 参数类型 是否必填 描述 invitee String 是 被邀请人id data String 是 邀请时附带的定义消息 timeout int 否 邀请超时时间 onlineUserOnly bool 否 是否只发给在线用户 offlinePushInfo OfflinePushInfo 否 离线推送设置 返回值 V2TimValueCallback { code : int desc : String data : String//创建的邀请id } 返回值详解 名称 数值类型 描述 code int 请求结果错误码 desc String 请求结果描述 data String 创建的邀请id 代码示例 //设置信令监听器 V2TimSignalingListener listener = V2TimSignalingListener( onInvitationCancelled: (String inviteID, String inviter, String data) async {}, onInvitationTimeout: (String inviteID, List inviteeList) async { //邀请超时的回调 //inviteID 邀请消息信令id //inviteeList 被邀请人的列表 }, onInviteeAccepted: (String inviteID, String invitee, String data) async { //邀请被接受的回调 //inviteID 邀请消息信令id //invitee 被邀请人id //data 接受邀请时的自定义data }, onInviteeRejected: (String inviteID, String invitee, String data) async { //邀请被拒绝的回调 //inviteID 邀请消息信令id //invitee 被邀请人id //data 拒绝邀请时的自定义data }, onReceiveNewInvitation: (String inviteID, String inviter, String groupID, List inviteeList, String data) async { //获取新的邀请的回调 //inviteID 邀请消息信令id //inviter 邀请人id //groupID 发出邀请的群组id //inviteeList 被邀请人的列表 //data 邀请时的自定义data }, ); TencentImSDKPlugin.v2TIMManager .getSignalingManager() .addSignalingListener(listener: listener); //添加信令监听器 V2TimValueCallback inviteRes = await TencentImSDKPlugin.v2TIMManager .getSignalingManager() .invite( invitee: \"\",//被邀请人id data: \"data\",//邀请时附带的定义消息 timeout: 30,//邀请超时时间 onlineUserOnly: false,//是否只发给在线用户 offlinePushInfo: OfflinePushInfo());//离线推送设置 if (inviteRes.code == 0) { //创建邀请成功 String? inviteId = inviteRes.data;//创建的邀请id } "},"api/v2timsignalingmanager/inviteingroup.html":{"url":"api/v2timsignalingmanager/inviteingroup.html","title":"inviteInGroup","summary":"邀请群内的某些人√","keywords":"","body":"inviteInGroup 功能介绍 邀请群内的某些人 参数详解 参数名称 参数类型 是否必填 描述 inviteeList List 是 被邀请人id列表 groupID String 是 发出邀请的群组id data String 是 邀请时附带的定义消息 timeout int 否 邀请超时时间 onlineUserOnly bool 否 是否只发给在线用户 返回值 V2TimValueCallback { code : int desc : String data : String//创建的邀请id } 返回值详解 名称 数值类型 描述 code int 请求结果错误码 desc String 请求结果描述 data String 创建的邀请id 代码示例 //设置信令监听器 V2TimSignalingListener listener = V2TimSignalingListener( onInvitationCancelled: (String inviteID, String inviter, String data) async {}, onInvitationTimeout: (String inviteID, List inviteeList) async { //邀请超时的回调 //inviteID 邀请消息信令id //inviteeList 被邀请人的列表 }, onInviteeAccepted: (String inviteID, String invitee, String data) async { //邀请被接受的回调 //inviteID 邀请消息信令id //invitee 被邀请人id //data 接受邀请时的自定义data }, onInviteeRejected: (String inviteID, String invitee, String data) async { //邀请被拒绝的回调 //inviteID 邀请消息信令id //invitee 被邀请人id //data 拒绝邀请时的自定义data }, onReceiveNewInvitation: (String inviteID, String inviter, String groupID, List inviteeList, String data) async { //获取新的邀请的回调 //inviteID 邀请消息信令id //inviter 邀请人id //groupID 发出邀请的群组id //inviteeList 被邀请人的列表 //data 邀请时的自定义data }, ); TencentImSDKPlugin.v2TIMManager .getSignalingManager() .addSignalingListener(listener: listener); //添加信令监听器 V2TimValueCallback inviteInGroupRes = await TencentImSDKPlugin.v2TIMManager.getSignalingManager().inviteInGroup( inviteeList: [], //被邀请人id列表 groupID: \"\",//发出邀请的群组id data: \"data\", //邀请时附带的定义消息 timeout: 30, //邀请超时时间 onlineUserOnly: false, //是否只发给在线用户 ); //离线推送设置 if (inviteInGroupRes.code == 0) { //创建邀请成功 String? inviteId = inviteInGroupRes.data;//创建的邀请id } "},"api/v2timsignalingmanager/cancel.html":{"url":"api/v2timsignalingmanager/cancel.html","title":"cancel","summary":"邀请方取消邀请√","keywords":"","body":"cancel 功能介绍 邀请方取消邀请 参数详解 参数名称 参数类型 是否必填 描述 invitee String 是 被取消邀请的id data String 是 取消邀请时附带的定义消息 返回值 V2TimCallback { code : int desc : String } 返回值详解 名称 数值类型 描述 code int 请求结果错误码 desc String 请求结果描述 代码示例 //设置信令监听器 V2TimSignalingListener listener = V2TimSignalingListener( onInvitationCancelled: (String inviteID, String inviter, String data) async { //邀请被取消的回调 //inviteID 邀请消息信令id //inviter 邀请人id //data 邀请被取消时的自定义data }, onInvitationTimeout: (String inviteID, List inviteeList) async {}, onInviteeAccepted: (String inviteID, String invitee, String data) async {}, onInviteeRejected: (String inviteID, String invitee, String data) async {}, onReceiveNewInvitation: (String inviteID, String inviter, String groupID, List inviteeList, String data) async {}, ); TencentImSDKPlugin.v2TIMManager .getSignalingManager() .addSignalingListener(listener: listener); V2TimCallback cancelRes = await TencentImSDKPlugin.v2TIMManager .getSignalingManager() .cancel( inviteID: \"inviteID\",//被取消邀请的id data: \"\");//取消邀请时附带的定义消息 if (cancelRes.code == 0) { //取消成功 } "},"api/v2timsignalingmanager/accept.html":{"url":"api/v2timsignalingmanager/accept.html","title":"accept","summary":"接收方接受邀请√","keywords":"","body":"accept 功能介绍 接收方接受邀请 参数详解 参数名称 参数类型 是否必填 描述 inviteID String 是 邀请请求的id data String 是 接受邀请时发送的自定义消息 返回值 V2TimCallback { code : int desc : String } 返回值详解 名称 数值类型 描述 code int 请求结果错误码 desc String 请求结果描述 代码示例 //设置信令监听器 V2TimSignalingListener listener = V2TimSignalingListener( onInvitationCancelled: (String inviteID, String inviter, String data) async {}, onInvitationTimeout: (String inviteID, List inviteeList) async {}, onInviteeAccepted: (String inviteID, String invitee, String data) async {}, onInviteeRejected: (String inviteID, String invitee, String data) async {}, onReceiveNewInvitation: (String inviteID, String inviter, String groupID, List inviteeList, String data) async { //获取新的邀请的回调 //inviteID 邀请消息信令id //inviter 邀请人id //groupID 发出邀请的群组id //inviteeList 被邀请人的列表 //data 邀请时的自定义data V2TimCallback acceptRes = await TencentImSDKPlugin.v2TIMManager .getSignalingManager() .accept( inviteID: inviteID,//邀请消息信令id data: \"\");//接受邀请时发送的自定义消息 if (acceptRes.code == 0) { //接受邀请成功 } }, ); TencentImSDKPlugin.v2TIMManager .getSignalingManager() .addSignalingListener(listener: listener); "},"api/v2timsignalingmanager/reject.html":{"url":"api/v2timsignalingmanager/reject.html","title":"reject","summary":"接收方拒绝邀请√","keywords":"","body":"reject 功能介绍 接收方拒绝邀请 参数详解 参数名称 参数类型 是否必填 描述 inviteID String 是 邀请请求的id data String 是 拒绝邀请时发送的自定义消息 返回值 V2TimCallback { code : int desc : String } 返回值详解 名称 数值类型 描述 code int 请求结果错误码 desc String 请求结果描述 代码示例 //设置信令监听器 V2TimSignalingListener listener = V2TimSignalingListener( onInvitationCancelled: (String inviteID, String inviter, String data) async {}, onInvitationTimeout: (String inviteID, List inviteeList) async {}, onInviteeAccepted: (String inviteID, String invitee, String data) async {}, onInviteeRejected: (String inviteID, String invitee, String data) async {}, onReceiveNewInvitation: (String inviteID, String inviter, String groupID, List inviteeList, String data) async { //获取新的邀请的回调 //inviteID 邀请消息信令id //inviter 邀请人id //groupID 发出邀请的群组id //inviteeList 被邀请人的列表 //data 邀请时的自定义data V2TimCallback rejectRes = await TencentImSDKPlugin.v2TIMManager .getSignalingManager() .reject( inviteID: inviteID,//邀请消息信令id data: \"\");//拒绝邀请时发送的自定义消息 if (rejectRes.code == 0) { //拒绝邀请成功 } }, ); TencentImSDKPlugin.v2TIMManager .getSignalingManager() .addSignalingListener(listener: listener); "},"api/v2timsignalingmanager/getsignalinginfo.html":{"url":"api/v2timsignalingmanager/getsignalinginfo.html","title":"getSignalingInfo","summary":"获取信令信息√","keywords":"","body":"getSignalingInfo 功能介绍 获取信令信息 如果 invite 设置 onlineUserOnly 为 false，每次信令操作（包括 invite、cancel、accept、reject、timeout）都会产生一条自定义消息， 该消息会通过 V2TIMAdvancedMsgListener 的 onRecvNewMessage 抛给用户，用户也可以通过历史消息拉取，如果需要根据信令信息做自定义化文本展示，可以调用下面接口获取信令信息。 如果返回值为 null，则查询的 msg 不是一条信令消息。 参数详解 参数名称 参数类型 是否必填 描述 msgID String 是 信令消息的id 返回值 V2TimValueCallback { code : int desc : String data : { inviteID : String// 邀请ID inviter : String // 邀请人ID inviteeList : List//信令接收人列表 groupID : String//发出信令的群组id data : String//信令的自定义消息 timeout : int//信令超时时间 actionType : int//信令状态 businessID : int // ios不回返回这条 isOnlineUserOnly : bool //是否只发送给在线用户 ios不回返回这条 offlinePushInfo : V2TimOfflinePushInfo //离线消息推送设置 ios不回返回这条 } } 返回值详解 名称 数值类型 描述 code int 请求结果错误码 desc String 请求结果描述 data V2TimSignalingInfo 查询到的信令信息 代码示例 //获取信令信息 V2TimValueCallback getSignalingInfoRes = await TencentImSDKPlugin.v2TIMManager .getSignalingManager() .getSignalingInfo(msgID: \"msgID\");//信令消息的id if (getSignalingInfoRes.code == 0) { //查询成功 //信令状态 //1:邀请方发起邀请 //2:邀请方取消邀请 //3:被邀请方接受邀请 //4:被邀请方拒绝邀请 //5:邀请超时 getSignalingInfoRes.data?.actionType;//信令状态 getSignalingInfoRes.data?.businessID;//传1即可 getSignalingInfoRes.data?.data;//信令的自定义消息 getSignalingInfoRes.data?.groupID;//发出信令的群组id getSignalingInfoRes.data?.inviteID;//邀请ID getSignalingInfoRes.data?.inviteeList;//信令接收人列表 getSignalingInfoRes.data?.inviter;//邀请人ID getSignalingInfoRes.data?.isOnlineUserOnly;//是否只发送给在线用户 ios不回返回这条 getSignalingInfoRes.data?.offlinePushInfo;//离线消息推送设置 ios不回返回这条 getSignalingInfoRes.data?.timeout;//信令超时时间 } "},"api/v2timsignalingmanager/addinvitedsignaling.html":{"url":"api/v2timsignalingmanager/addinvitedsignaling.html","title":"addInvitedSignaling","summary":"创建一个信令请求√","keywords":"","body":"addInvitedSignaling 功能介绍 创建一个信令请求 参数详解 参数名称 参数类型 是否必填 描述 info V2TimSignalingInfo 是 创建的信令消息的设置 返回值 V2TimCallback { code : int desc : String } 返回值详解 名称 数值类型 描述 code int 请求结果错误码 desc String 请求结果描述 代码示例 //创建的信令消息的设置 V2TimSignalingInfo info = V2TimSignalingInfo( //信令状态 //1:邀请方发起邀请 //2:邀请方取消邀请 //3:被邀请方接受邀请 //4:被邀请方拒绝邀请 //5:邀请超时 actionType: 1,//信令状态 businessID: 1,//传1即可 data: \"\",//信令的自定义消息 groupID: \"\",//发出信令的群组id inviteeList: [],//信令接收人列表 inviteID: \"\",//邀请ID timeout: 30,//信令超时时间 inviter: \"\",//邀请人ID isOnlineUserOnly: false,//是否只发送给在线用户 offlinePushInfo: V2TimOfflinePushInfo());//离线消息推送设置 V2TimCallback addInvitedSignalingRes = await TencentImSDKPlugin.v2TIMManager .getSignalingManager() .addInvitedSignaling(info: info);//创建的信令消息的设置 if (addInvitedSignalingRes.code == 0) { //创建成功 } "},"api/v2timconversationmanager/":{"url":"api/v2timconversationmanager/","title":"V2TIMConversationManager","summary":"会话接口，包含了会话的获取，删除和更新的逻辑","keywords":"","body":"V2TIMConversationManager V2TIMConversationManager功能介绍 会话接口，包含了会话的获取，删除和更新的逻辑 API目录 API 描述 addConversationListener 添加会话监听器 deleteConversation 删除会话 getConversation 获取指定会话 getConversationList 获取会话列表 getConversationListByConversaionIds 通过会话ID获取指定会话列表 getConversationListWithoutFormat 获取没有格式化的会话信息 getTotalUnreadMessageCount 获取会话未读总数 pinConversation 会话置顶 removeConversationListener 移除会话监听器 setConversationDraft 设置会话草稿 setConversationListener 设置会话监听器 "},"api/v2timconversationmanager/addconversationlistener.html":{"url":"api/v2timconversationmanager/addconversationlistener.html","title":"addConversationListener","summary":"添加会话监听器√","keywords":"","body":"addConversationListener 功能介绍 添加关系链监听器 注意： 添加监听器后，您才能接收到会话变更事件。 参数详解 参数名称 参数类型 是否必填 描述 listener V2TimConversationListener 是 需要新增的会话监听器 返回值 void 返回值详解 此方法无返回值 代码示例 //设置会话监听器 V2TimConversationListener listener = V2TimConversationListener( onConversationChanged: (List conversationList) => { //某些会话的关键信息发生变化（未读计数发生变化、最后一条消息被更新等等），可以根据会话的 lastMessage -> timestamp 重新对会话列表做排序 //conversationList 改变的会话列表 }, onNewConversation: (List conversationList) => { //有新的会话（比如收到一个新同事发来的单聊消息、或者被拉入了一个新的群组中），可以根据会话的 lastMessage -> timestamp 重新对会话列表做排序 //conversationList 新的会话列表 }, onSyncServerFailed: () => { //同步服务器会话失败 }, onSyncServerFinish: () => { //同步服务器会话完成，如果会话有变更，会通过 onNewConversation | onConversationChanged 回调告知客户 }, onSyncServerStart: () => { //同步服务器会话开始，SDK 会在登录成功或者断网重连后自动同步服务器会话，您可以监听这个事件做一些 UI 进度展示操作。 }, onTotalUnreadMessageCountChanged: (int totalUnreadCount) => { //会话未读总数变更通知，未读总数会减去设置为免打扰的会话的未读数 //totalUnreadCount 会话未读总数 }, ); //添加会话监听器 TencentImSDKPlugin.v2TIMManager .getConversationManager() .addConversationListener(listener: listener);//需要新增的会话监听器 "},"api/v2timconversationmanager/removeconversationlistener.html":{"url":"api/v2timconversationmanager/removeconversationlistener.html","title":"removeConversationListener","summary":"移除会话监听器√","keywords":"","body":"removeConversationListener 功能介绍 移除关系链监听器 参数详解 参数名称 参数类型 是否必填 描述 listener V2TimConversationListener 是 需要移除的会话监听器 返回值 void 返回值详解 此方法无返回值 代码示例 //设置会话监听器 V2TimConversationListener listener = V2TimConversationListener( onConversationChanged: (List conversationList) => { //某些会话的关键信息发生变化（未读计数发生变化、最后一条消息被更新等等），可以根据会话的 lastMessage -> timestamp 重新对会话列表做排序 //conversationList 改变的会话列表 }, onNewConversation: (List conversationList) => { //有新的会话（比如收到一个新同事发来的单聊消息、或者被拉入了一个新的群组中），可以根据会话的 lastMessage -> timestamp 重新对会话列表做排序 //conversationList 新的会话列表 }, onSyncServerFailed: () => { //同步服务器会话失败 }, onSyncServerFinish: () => { //同步服务器会话完成，如果会话有变更，会通过 onNewConversation | onConversationChanged 回调告知客户 }, onSyncServerStart: () => { //同步服务器会话开始，SDK 会在登录成功或者断网重连后自动同步服务器会话，您可以监听这个事件做一些 UI 进度展示操作。 }, onTotalUnreadMessageCountChanged: (int totalUnreadCount) => { //会话未读总数变更通知，未读总数会减去设置为免打扰的会话的未读数 //totalUnreadCount 会话未读总数 }, ); //添加会话监听器 TencentImSDKPlugin.v2TIMManager .getConversationManager() .addConversationListener(listener: listener);//需要新增的会话监听器 //添加之后可移除会话监听器 TencentImSDKPlugin.v2TIMManager .getConversationManager() .removeConversationListener(listener: listener);//需要移除的会话监听器 "},"api/v2timconversationmanager/getconversationlist.html":{"url":"api/v2timconversationmanager/getconversationlist.html","title":"getConversationList","summary":"获取会话列表√","keywords":"","body":"getConversationList 功能介绍 获取会话列表 用户的会话以列表的形式返回，列表中存储的是 V2TIMConversation 对象。目前 IM SDK 对会话列表的排序规则为： Flutter sdk 3.8.0及以后版本, 该接口获取的会话列表默认已经按照会话对象的 orderKey 做了排序。orderKey 值越大，代表该会话排序越靠前。orderKey 字段是整型数，当发送新消息、接收新消息、设置草稿或置顶会话时，会话被激活，orderKey 字段会增大。 Flutter sdk 3.8.0 以前版本，该接口获取的会话列表默认已经按照会话 lastMessage 的timestamp 做了排序。timestamp 越大，会话越靠前。 注意： 该接口拉取的是本地缓存的会话，如果服务器会话有更新，SDK 内部会自动同步，然后在 V2TIMConversationListener 回调告知客户。 在某些场景下，可能出现会话的 lastMessage 为空（例如清空会话消息）。如果您使用 5.5.892 以前的 SDK，使用 lastMessage 排序时需要额外处理这种异常。我们建议您升级到 5.5.892 及以后的版本，使用 orderKey 字段排序。 最多能拉取到最近的5000个会话。 参数详解 参数名称 参数类型 是否必填 描述 nextSeq String 是 分页拉取的游标，第一次默认取传 0，后续分页拉传上一次分页拉取成功回调里的 nextSeq count int 是 分页拉取的个数，一次分页拉取不宜太多，会影响拉取的速度，建议每次拉取 100 个会话 返回值 V2TimValueCallback { code : int desc : String data : { conversationList : List//此次拉取到的消息列表 isFinished : bool//是否拉取完 nextSeq : String//后续分页拉取的游标 } } 返回值详解 名称 数值类型 描述 code int 请求结果错误码 desc String 请求结果描述 data V2TimConversationResult 此次拉取到的消息信息 代码示例 //获取会话列表 V2TimValueCallback getConversationListRes = await TencentImSDKPlugin.v2TIMManager .getConversationManager() .getConversationList( count: 100, //分页拉取的个数，一次分页拉取不宜太多，会影响拉取的速度，建议每次拉取 100 个会话 nextSeq: \"0\"//分页拉取的游标，第一次默认取传 0，后续分页拉传上一次分页拉取成功回调里的 nextSeq ); if (getConversationListRes.code == 0) { //拉取成功 bool? isFinished = getConversationListRes.data?.isFinished;//是否拉取完 String? nextSeq = getConversationListRes.data?.nextSeq;//后续分页拉取的游标 List? conversationList = getConversationListRes.data?.conversationList;//此次拉取到的消息列表 //如果没有拉取完，使用返回的nextSeq继续拉取直到isFinished为true if (!isFinished!) { V2TimValueCallback nextConversationListRes = await TencentImSDKPlugin.v2TIMManager .getConversationManager() .getConversationList(count: 100, nextSeq: nextSeq = \"0\");//使用返回的nextSeq继续拉取直到isFinished为true } getConversationListRes.data?.conversationList?.forEach((element) { element?.conversationID;//会话唯一 ID，如果是单聊，组成方式为 c2c_userID；如果是群聊，组成方式为 group_groupID。 element?.draftText;//草稿信息 element?.draftTimestamp;//草稿编辑时间，草稿设置的时候自动生成。 element?.faceUrl;//会话展示头像，群聊头像：群头像；单聊头像：对方头像。 element?.groupAtInfoList;//群会话 @ 信息列表，通常用于展示 “有人@我” 或 “@所有人” 这两种提醒状态。 element?.groupID;//当前群聊 ID，如果会话类型为群聊，groupID 会存储当前群的群 ID，否则为 null。 element?.groupType;//当前群聊类型，如果会话类型为群聊，groupType 为当前群类型，否则为 null。 element?.isPinned;//会话是否置顶 element?.lastMessage;//会话最后一条消息 element?.orderkey;//会话排序字段 element?.recvOpt;//消息接收选项 element?.showName;//会话展示名称，群聊会话名称优先级：群名称 > 群 ID；单聊会话名称优先级：对方好友备注 > 对方昵称 > 对方的 userID。 element?.type;//会话类型，分为 C2C（单聊）和 Group（群聊）。 element?.unreadCount;//会话未读消息数，直播群（AVChatRoom）不支持未读计数，默认为 0。 element?.userID;//对方用户 ID，如果会话类型为单聊，userID 会存储对方的用户 ID，否则为 null。 }); } "},"api/v2timconversationmanager/getconversation.html":{"url":"api/v2timconversationmanager/getconversation.html","title":"getConversation","summary":"获取指定会话√","keywords":"","body":"getConversation 功能介绍 获取会话列表 参数详解 参数名称 参数类型 是否必填 描述 conversationID String 是 会话唯一 ID，如果是 C2C 单聊，组成方式为 c2c_userID，如果是群聊，组成方式为 group_groupID 返回值 V2TimValueCallback { code : int desc : String data : { conversationID : String type : ConversationType userID : String groupID : String showName : String faceUrl : String groupType : String unreadCount : int lastMessage; draftText : String draftTimestamp : int isPinned : bool recvOpt : int groupAtInfoList : List orderkey : int } } 返回值详解 名称 数值类型 描述 code int 请求结果错误码 desc String 请求结果描述 data V2TimConversation 此次拉取到的消息信息 代码示例 //获取指定会话 V2TimValueCallback getConversationtRes = await TencentImSDKPlugin.v2TIMManager .getConversationManager() .getConversation(conversationID: \"\");//会话唯一 ID，如果是 C2C 单聊，组成方式为 c2c_userID，如果是群聊，组成方式为 group_groupID if (getConversationtRes.code == 0) { //拉取成功 getConversationtRes.data?.conversationID;//会话唯一 ID，如果是单聊，组成方式为 c2c_userID；如果是群聊，组成方式为 group_groupID。 getConversationtRes.data?.draftText;//草稿信息 getConversationtRes.data?.draftTimestamp;//草稿编辑时间，草稿设置的时候自动生成。 getConversationtRes.data?.faceUrl;//会话展示头像，群聊头像：群头像；单聊头像：对方头像。 getConversationtRes.data?.groupAtInfoList;//群会话 @ 信息列表，通常用于展示 “有人@我” 或 “@所有人” 这两种提醒状态。 getConversationtRes.data?.groupID;//当前群聊 ID，如果会话类型为群聊，groupID 会存储当前群的群 ID，否则为 null。 getConversationtRes.data?.groupType;//当前群聊类型，如果会话类型为群聊，groupType 为当前群类型，否则为 null。 getConversationtRes.data?.isPinned;//会话是否置顶 getConversationtRes.data?.lastMessage;//会话最后一条消息 getConversationtRes.data?.orderkey;//会话排序字段 getConversationtRes.data?.recvOpt;//消息接收选项 getConversationtRes.data?.showName;//会话展示名称，群聊会话名称优先级：群名称 > 群 ID；单聊会话名称优先级：对方好友备注 > 对方昵称 > 对方的 userID。 getConversationtRes.data?.type;//会话类型，分为 C2C（单聊）和 Group（群聊）。 getConversationtRes.data?.unreadCount;//会话未读消息数，直播群（AVChatRoom）不支持未读计数，默认为 0。 getConversationtRes.data?.userID;//对方用户 ID，如果会话类型为单聊，userID 会存储对方的用户 ID，否则为 null。 } "},"api/v2timconversationmanager/getconversationlistbyconversaionids.html":{"url":"api/v2timconversationmanager/getconversationlistbyconversaionids.html","title":"getConversationListByConversaionIds","summary":"通过会话ID获取指定会话列表√","keywords":"","body":"getConversationListByConversaionIds 功能介绍 通过会话ID获取指定会话列表 参数详解 参数名称 参数类型 是否必填 描述 conversationIDList List 是 需要获取会话列表数据的会话id列表 返回值 V2TimValueCallback> { code : int desc : String data : List//拉取到的消息信息列表 } 返回值详解 名称 数值类型 描述 code int 请求结果错误码 desc String 请求结果描述 data ListV2TimConversation > 拉取到的消息信息列表 代码示例 //通过会话ID获取指定会话列表 V2TimValueCallback> getConversationListByConversaionIdsRes = await TencentImSDKPlugin .v2TIMManager .getConversationManager() .getConversationListByConversaionIds(conversationIDList: []);//需要获取会话列表数据的会话id列表 if (getConversationListByConversaionIdsRes.code == 0) { //拉取成功 getConversationListByConversaionIdsRes.data?.forEach((element) { element.conversationID; //会话唯一 ID，如果是单聊，组成方式为 c2c_userID；如果是群聊，组成方式为 group_groupID。 element.draftText; //草稿信息 element.draftTimestamp; //草稿编辑时间，草稿设置的时候自动生成。 element.faceUrl; //会话展示头像，群聊头像：群头像；单聊头像：对方头像。 element.groupAtInfoList; //群会话 @ 信息列表，通常用于展示 “有人@我” 或 “@所有人” 这两种提醒状态。 element.groupID; //当前群聊 ID，如果会话类型为群聊，groupID 会存储当前群的群 ID，否则为 null。 element.groupType; //当前群聊类型，如果会话类型为群聊，groupType 为当前群类型，否则为 null。 element.isPinned; //会话是否置顶 element.lastMessage; //会话最后一条消息 element.orderkey; //会话排序字段 element.recvOpt; //消息接收选项 element.showName; //会话展示名称，群聊会话名称优先级：群名称 > 群 ID；单聊会话名称优先级：对方好友备注 > 对方昵称 > 对方的 userID。 element.type; //会话类型，分为 C2C（单聊）和 Group（群聊）。 element.unreadCount; //会话未读消息数，直播群（AVChatRoom）不支持未读计数，默认为 0。 element.userID; //对方用户 ID，如果会话类型为单聊，userID 会存储对方的用户 ID，否则为 null。 }); } "},"api/v2timconversationmanager/getconversationlistwithoutformat.html":{"url":"api/v2timconversationmanager/getconversationlistwithoutformat.html","title":"getConversationListWithoutFormat","summary":"获取没有格式化的会话信息√","keywords":"","body":"getConversationListWithoutFormat 功能介绍 获取会话列表 用户的会话以列表的形式返回，列表中存储的是 V2TIMConversation 对象。目前 IM SDK 对会话列表的排序规则为： Flutter sdk 3.8.0及以后版本, 该接口获取的会话列表默认已经按照会话对象的 orderKey 做了排序。orderKey 值越大，代表该会话排序越靠前。orderKey 字段是整型数，当发送新消息、接收新消息、设置草稿或置顶会话时，会话被激活，orderKey 字段会增大。 Flutter sdk 3.8.0 以前版本，该接口获取的会话列表默认已经按照会话 lastMessage 的timestamp 做了排序。timestamp 越大，会话越靠前。 注意： 该接口拉取的是本地缓存的会话，如果服务器会话有更新，SDK 内部会自动同步，然后在 V2TIMConversationListener 回调告知客户。 在某些场景下，可能出现会话的 lastMessage 为空（例如清空会话消息）。如果您使用 5.5.892 以前的 SDK，使用 lastMessage 排序时需要额外处理这种异常。我们建议您升级到 5.5.892 及以后的版本，使用 orderKey 字段排序。 最多能拉取到最近的5000个会话。 参数详解 参数名称 参数类型 是否必填 描述 nextSeq String 是 分页拉取的游标，第一次默认取传 0，后续分页拉传上一次分页拉取成功回调里的 nextSeq count int 是 分页拉取的个数，一次分页拉取不宜太多，会影响拉取的速度，建议每次拉取 100 个会话 返回值 LinkedHashMap 返回值详解 名称 数值类型 描述 LinkedHashMap LinkedHashMap 获取的会话信息(没有处理Native返回数据) 代码示例 //获取没有格式化的会话信息 LinkedHashMap getConversationListWithoutFormatRes = await TencentImSDKPlugin.v2TIMManager .getConversationManager() .getConversationListWithoutFormat( count: 100, //分页拉取的个数，一次分页拉取不宜太多，会影响拉取的速度，建议每次拉取 100 个会话 nextSeq: \"0\" //分页拉取的游标，第一次默认取传 0，后续分页拉传上一次分页拉取成功回调里的 nextSeq ); print(getConversationListWithoutFormatRes);//{code: 0, data: {nextSeq: 0, conversationList: [], isFinished: true}, desc: ok} "},"api/v2timconversationmanager/deleteconversation.html":{"url":"api/v2timconversationmanager/deleteconversation.html","title":"deleteConversation","summary":"删除会话√","keywords":"","body":"deleteConversation 功能介绍 删除会话 在删除好友或退出群组后，如果不需要查看好友或群会话的历史消息，可以选择删除会话。 会话删除默认关闭多端同步，可在即时通信 IM 控制台 开启多端同步。 注意： 删除会话，会同时删除终端和服务器的历史消息，且无法恢复。 会话内的消息在本地删除的同时，在服务器也会同步删除。 参数详解 参数名称 参数类型 是否必填 描述 conversationID String 是 需要删除的会话id 返回值 V2TimCallback { code : int desc : String } 返回值详解 名称 数值类型 描述 code int 请求结果错误码 desc String 请求结果描述 代码示例 //删除会话 V2TimCallback deleteConversationRes = await TencentImSDKPlugin.v2TIMManager .getConversationManager() .deleteConversation( conversationID: \"\",//需要删除的会话id ); if (deleteConversationRes.code == 0) { //删除成功 } "},"api/v2timconversationmanager/setconversationdraft.html":{"url":"api/v2timconversationmanager/setconversationdraft.html","title":"setConversationDraft","summary":"设置会话草稿√","keywords":"","body":"setConversationDraft 功能介绍 设置会话草稿 在发送消息时，可能会遇到消息尚未编辑完，就要切换至其它聊天窗口的情况。这些未编辑完的消息可通过 setConversationDraft 接口保存，以便于下次回到这个聊天界面时，通过 V2TIMConversation 对象的 draftText 字段，获取到尚未编辑完的内容，继续编辑。 如果这个接口的 draftText 参数为空，表示取消草稿。 注意： 草稿仅支持文本内容。 草稿仅在本地保存，不会存储到服务器，因此不能多端同步，程序卸载重装会失效。 参数详解 参数名称 参数类型 是否必填 描述 conversationID String 是 需要设置草稿的会话id draftText String 否 草稿信息 返回值 V2TimCallback { code : int desc : String } 返回值详解 名称 数值类型 描述 code int 请求结果错误码 desc String 请求结果描述 代码示例 //设置会话草稿 V2TimCallback setConversationDraftRes = await TencentImSDKPlugin.v2TIMManager .getConversationManager() .setConversationDraft( conversationID: \"\",//需要设置草稿的会话id draftText: \"\",//草稿信息 ); if (setConversationDraftRes.code == 0) { //设置成功 } "},"api/v2timconversationmanager/gettotalunreadmessagecount.html":{"url":"api/v2timconversationmanager/gettotalunreadmessagecount.html","title":"getTotalUnreadMessageCount","summary":"获取会话未读总数√","keywords":"","body":"getTotalUnreadMessageCount 功能介绍 获取会话未读总数 参数详解 此API无参数。 返回值 V2TimValueCallback { code : int desc : String data : int//会话未读总数 } 返回值详解 名称 数值类型 描述 code int 请求结果错误码 desc String 请求结果描述 data int 会话未读总数 代码示例 //获取会话未读总数 V2TimValueCallback getTotalUnreadMessageCountRes = await TencentImSDKPlugin.v2TIMManager .getConversationManager() .getTotalUnreadMessageCount(); if (getTotalUnreadMessageCountRes.code == 0) { //拉取成功 int? count = getTotalUnreadMessageCountRes.data;//会话未读总数 } "},"api/v2timconversationmanager/pinconversation.html":{"url":"api/v2timconversationmanager/pinconversation.html","title":"pinConversation","summary":"会话置顶√","keywords":"","body":"pinConversation 功能介绍 会话置顶 会话的顺序，按V2TimConversation 对象的 orderKey 字段排序。orderKey 字段是整型数，当发送新消息、接收新消息、设置草稿或置顶会话时，会话被激活，orderKey 字段会增大。 需要注意的是，被置顶会话始终排在非置顶会话的前面，如果同时置顶多个会话，这几个会话之间的相对顺序仍然会保持，例如，有 5 个依次排序的会话 1、2、3、4、5，同时置顶会话 2 和 3，置顶后的顺序是 2、3、1、4、5，显然，会话 2 和 3 排在最前面，并且会话 2 仍然排在 3 的前面。 调用 getConversationList 获取会话列表时，该接口会先返回置顶的会话，再返回未置顶的会话。您可以通过 V2TIMConversation 对象的 isPinned 字段，检查会话有没有置顶。 如果您事先调用了 addConversationListener添加会话监听器，就可以在 onConversationChanged 中获取到 V2TimConversation 对象的 isPinned 字段值。根据这个字段可以判断会话的置顶状态是否变化。 参数详解 参数名称 参数类型 是否必填 描述 conversationID String 是 需要修改置顶属性的会话id isPinned bool 是 是否置顶 返回值 V2TimCallback { code : int desc : String } 返回值详解 名称 数值类型 描述 code int 请求结果错误码 desc String 请求结果描述 代码示例 //会话置顶 V2TimCallback pinConversationRes = await TencentImSDKPlugin.v2TIMManager .getConversationManager() .pinConversation( conversationID: \"\",//需要修改置顶属性的会话id isPinned: true);//是否置顶 if (pinConversationRes.code == 0) { //设置置顶成功 } "},"api/v2timconversationmanager/setconversationlistener.html":{"url":"api/v2timconversationmanager/setconversationlistener.html","title":"setConversationListener","summary":"设置会话监听器√","keywords":"","body":"setConversationListener 功能介绍 添加关系链监听器 参数详解 参数名称 参数类型 是否必填 描述 listener V2TimConversationListener 是 需要设置的会话监听器 返回值 void 返回值详解 此方法无返回值 代码示例 //设置会话监听器 V2TimConversationListener listener = V2TimConversationListener( onConversationChanged: (List conversationList) => { //某些会话的关键信息发生变化（未读计数发生变化、最后一条消息被更新等等），可以根据会话的 lastMessage -> timestamp 重新对会话列表做排序 //conversationList 改变的会话列表 }, onNewConversation: (List conversationList) => { //有新的会话（比如收到一个新同事发来的单聊消息、或者被拉入了一个新的群组中），可以根据会话的 lastMessage -> timestamp 重新对会话列表做排序 //conversationList 新的会话列表 }, onSyncServerFailed: () => { //同步服务器会话失败 }, onSyncServerFinish: () => { //同步服务器会话完成，如果会话有变更，会通过 onNewConversation | onConversationChanged 回调告知客户 }, onSyncServerStart: () => { //同步服务器会话开始，SDK 会在登录成功或者断网重连后自动同步服务器会话，您可以监听这个事件做一些 UI 进度展示操作。 }, onTotalUnreadMessageCountChanged: (int totalUnreadCount) => { //会话未读总数变更通知，未读总数会减去设置为免打扰的会话的未读数 //totalUnreadCount 会话未读总数 }, ); //添加会话监听器 TencentImSDKPlugin.v2TIMManager .getConversationManager() .setConversationListener(listener: listener);//需要设置的会话监听器 "},"api/v2timfriendshipmanager/":{"url":"api/v2timfriendshipmanager/","title":"V2TIMFriendshipManager","summary":"关系链接口，包含了好友的添加和删除，黑名单的添加和删除等逻辑","keywords":"","body":"V2TIMFriendshipManager V2TIMFriendshipManager功能介绍 关系链接口，包含了好友的添加和删除，黑名单的添加和删除等逻辑 API目录 API 描述 acceptFriendApplication 同意好友申请 addFriend 添加好友 addFriendListener 添加关系链监听器 addFriendsToFriendGroup 添加好友到一个好友分组 addToBlackList 添加用户到黑名单 checkFriend 检查指定用户的好友关系 createFriendGroup 新建好友分组 deleteFriendApplication 删除好友申请 deleteFriendGroup 删除好友分组 deleteFriendsFromFriendGroup 从好友分组中删除好友 deleteFromBlackList 把用户从黑名单中删除 deleteFromFriendList 从好友列表删除好友 getBlackList 获取黑名单列表 getFriendApplicationList 获取好友申请列表 getFriendGroups 获取分组信息 getFriendList 获取好友列表 getFriendsInfo 获取指定好友资料 refuseFriendApplication 拒绝好友申请 removeFriendListener 移除关系链监听器 renameFriendGroup 修改好友分组的名称 searchFriends 搜索好友 setFriendApplicationRead 设置好友申请已读 setFriendInfo 设置指定好友资料 setFriendListener 设置关系链监听器 "},"api/v2timfriendshipmanager/setfriendlistener.html":{"url":"api/v2timfriendshipmanager/setfriendlistener.html","title":"setFriendListener","summary":"设置关系链监听器√","keywords":"","body":"setFriendListener 功能介绍 设置关系链监听器 参数详解 参数名称 参数类型 是否必填 描述 listener V2TimFriendshipListener 是 需要设置的关系链监听器 返回值 void 返回值详解 此方法无返回值 代码示例 //设置关系链监听器 V2TimFriendshipListener listener = V2TimFriendshipListener( onBlackListAdd: (List infoList) async { //黑名单列表新增用户的回调 //infoList 新增的用户信息列表 }, onBlackListDeleted: (List userList) async { //黑名单列表删除的回调 //userList 被删除的用户id列表 }, onFriendApplicationListAdded: (List applicationList) async { //好友请求数量增加的回调 //applicationList 新增的好友请求信息列表 }, onFriendApplicationListDeleted: (List userIDList) async { //好友请求数量减少的回调 //减少的好友请求的请求用户id列表 }, onFriendApplicationListRead: () async { //好友请求已读的回调 }, onFriendInfoChanged: (List infoList) async { //好友信息改变的回调 //infoList 好友信息改变的好友列表 }, onFriendListAdded: (List users) async { //好友列表增加人员的回调 //users 新增的好友信息列表 }, onFriendListDeleted: (List userList) async { //好友列表减少人员的回调 //userList 减少的好友id列表 }, ); TencentImSDKPlugin.v2TIMManager .getFriendshipManager() .setFriendListener(listener: listener);//设置关系链监听器 "},"api/v2timfriendshipmanager/addfriendlistener.html":{"url":"api/v2timfriendshipmanager/addfriendlistener.html","title":"addFriendListener","summary":"添加关系链监听器√","keywords":"","body":"addFriendListener 功能介绍 添加关系链监听器 注意： 只有预先设置好关系链事件监听器，才能正常接收到下文中的各种事件通知。 参数详解 参数名称 参数类型 是否必填 描述 listener V2TimFriendshipListener 是 需要新增的关系链监听器 返回值 void 返回值详解 此方法无返回值 代码示例 //设置关系链监听器 V2TimFriendshipListener listener = V2TimFriendshipListener( onBlackListAdd: (List infoList) async { //黑名单列表新增用户的回调 //infoList 新增的用户信息列表 }, onBlackListDeleted: (List userList) async { //黑名单列表删除的回调 //userList 被删除的用户id列表 }, onFriendApplicationListAdded: (List applicationList) async { //好友请求数量增加的回调 //applicationList 新增的好友请求信息列表 }, onFriendApplicationListDeleted: (List userIDList) async { //好友请求数量减少的回调 //减少的好友请求的请求用户id列表 }, onFriendApplicationListRead: () async { //好友请求已读的回调 }, onFriendInfoChanged: (List infoList) async { //好友信息改变的回调 //infoList 好友信息改变的好友列表 }, onFriendListAdded: (List users) async { //好友列表增加人员的回调 //users 新增的好友信息列表 }, onFriendListDeleted: (List userList) async { //好友列表减少人员的回调 //userList 减少的好友id列表 }, ); TencentImSDKPlugin.v2TIMManager .getFriendshipManager() .addFriendListener(listener: listener);//添加关系链监听器 "},"api/v2timfriendshipmanager/removefriendlistener.html":{"url":"api/v2timfriendshipmanager/removefriendlistener.html","title":"removeFriendListener","summary":"移除关系链监听器√","keywords":"","body":"removeFriendListener 功能介绍 移除关系链监听器 参数详解 参数名称 参数类型 是否必填 描述 listener V2TimFriendshipListener 是 需要移除的关系链监听器 返回值 void 返回值详解 此方法无返回值 代码示例 //设置关系链监听器 V2TimFriendshipListener listener = V2TimFriendshipListener( onBlackListAdd: (List infoList) async { //黑名单列表新增用户的回调 //infoList 新增的用户信息列表 }, onBlackListDeleted: (List userList) async { //黑名单列表删除的回调 //userList 被删除的用户id列表 }, onFriendApplicationListAdded: (List applicationList) async { //好友请求数量增加的回调 //applicationList 新增的好友请求信息列表 }, onFriendApplicationListDeleted: (List userIDList) async { //好友请求数量减少的回调 //减少的好友请求的请求用户id列表 }, onFriendApplicationListRead: () async { //好友请求已读的回调 }, onFriendInfoChanged: (List infoList) async { //好友信息改变的回调 //infoList 好友信息改变的好友列表 }, onFriendListAdded: (List users) async { //好友列表增加人员的回调 //users 新增的好友信息列表 }, onFriendListDeleted: (List userList) async { //好友列表减少人员的回调 //userList 减少的好友id列表 }, ); TencentImSDKPlugin.v2TIMManager .getFriendshipManager() .addFriendListener(listener: listener);//添加关系链监听器 //添加成功之后可移除 TencentImSDKPlugin.v2TIMManager .getFriendshipManager() .removeFriendListener(listener: listener);//需要移除的关系链监听器 "},"api/v2timfriendshipmanager/getfriendlist.html":{"url":"api/v2timfriendshipmanager/getfriendlist.html","title":"getFriendList","summary":"获取好友列表√","keywords":"","body":"getFriendList 功能介绍 获取好友列表 参数详解 此API无参数 返回值 V2TimValueCallback> { code : int desc : String data : List//查询到的好友列表 } 返回值详解 名称 数值类型 描述 code int 请求结果错误码 desc String 请求结果描述 data ListV2TimFriendInfo > 查询到的好友列表 代码示例 //获取好友列表 V2TimValueCallback> getFriendListRes = await TencentImSDKPlugin.v2TIMManager .getFriendshipManager() .getFriendList(); if (getFriendListRes.code == 0) { // 查询成功 getFriendListRes.data?.forEach((element) { element.friendCustomInfo;//好友自定义字段 首先要在 控制台 (功能配置 -> 好友自定义字段) 配置好友自定义字段，然后再调用接口进行设置 element.friendGroups;//好友所在分组列表 element.friendRemark;//好友备注 element.userID;//用户的id element.userProfile?.allowType;//用户的好友验证方式 0:允许所有人加我好友 1:不允许所有人加我好友 2:加我好友需我确认 element.userProfile?.birthday;//用户生日 element.userProfile?.customInfo;//用户的自定义状态 element.userProfile?.faceUrl;//用户头像 url element.userProfile?.gender;//用户的性别 1:男 2:女 element.userProfile?.level;//用户的等级 element.userProfile?.nickName;//用户昵称 element.userProfile?.role;//用户的角色 element.userProfile?.selfSignature;//用户的签名 element.userProfile?.userID;//用户 ID }); } "},"api/v2timfriendshipmanager/getfriendsinfo.html":{"url":"api/v2timfriendshipmanager/getfriendsinfo.html","title":"getFriendsInfo","summary":"获取指定好友资料√","keywords":"","body":"getFriendsInfo 功能介绍 获取指定好友资料 从回调信息中通过 V2TIMFriendInfoResult 的 relation 字段可以得到该用户与自己的关系。 注意： userIDList 建议一次最大 100 个，因为数量过多可能会导致数据包太大被后台拒绝，后台限制数据包最大为 1M。 参数详解 参数名称 参数类型 是否必填 描述 userIDList List 是 需要查询的用户id列表 返回值 V2TimValueCallback> { code : int desc : String data : List//查询到的结果信息 } 返回值详解 名称 数值类型 描述 code int 请求结果错误码 desc String 请求结果描述 data ListV2TimFriendInfoResult > 查询到的结果信息 代码示例 // 获取指定好友资料 V2TimValueCallback> getFriendsInfoRes = await TencentImSDKPlugin.v2TIMManager .getFriendshipManager() .getFriendsInfo(userIDList: []);//需要查询的用户id列表 if (getFriendsInfoRes.code == 0) { // 查询成功 getFriendsInfoRes.data?.forEach((element) { element.relation;//好友类型 0:不是好友 1:对方在我的好友列表中 2:我在对方的好友列表中 3:互为好友 element.resultCode;//此条记录的查询结果错误码 element.resultInfo;//此条查询结果描述 //friendInfo为好友个人资料，如果不是好友，除了 userID 字段，其他字段都为空 element.friendInfo?.friendCustomInfo;//好友自定义字段 首先要在 控制台 (功能配置 -> 好友自定义字段) 配置好友自定义字段，然后再调用接口进行设置 element.friendInfo?.friendGroups;//好友所在分组列表 element.friendInfo?.friendRemark;//好友备注 element.friendInfo?.userID;//用户的id element.friendInfo?.userProfile?.allowType;//用户的好友验证方式 0:允许所有人加我好友 1:不允许所有人加我好友 2:加我好友需我确认 element.friendInfo?.userProfile?.birthday;//用户生日 element.friendInfo?.userProfile?.customInfo;//用户的自定义状态 element.friendInfo?.userProfile?.faceUrl;//用户头像 url element.friendInfo?.userProfile?.gender;//用户的性别 1:男 2:女 element.friendInfo?.userProfile?.level;//用户的等级 element.friendInfo?.userProfile?.nickName;//用户昵称 element.friendInfo?.userProfile?.role;//用户的角色 element.friendInfo?.userProfile?.selfSignature;//用户的签名 element.friendInfo?.userProfile?.userID;//用户 ID }); } "},"api/v2timfriendshipmanager/searchfriends.html":{"url":"api/v2timfriendshipmanager/searchfriends.html","title":"searchFriends","summary":"搜索好友√","keywords":"","body":"searchFriends 功能介绍 搜索好友 接口返回本地存储的用户资料，可以根据 V2TIMFriendInfoResult 中的 relation 来判断是否为好友。 参数详解 参数名称 参数类型 是否必填 描述 searchParam V2TimFriendSearchParam 是 搜索好友的搜索条件 返回值 V2TimValueCallback> { code : int desc : String data : List//查询到的结果信息 } 返回值详解 名称 数值类型 描述 code int 请求结果错误码 desc String 请求结果描述 data ListV2TimFriendInfoResult > 查询到的结果信息 代码示例 //搜索好友的搜索条件 V2TimFriendSearchParam searchParam = V2TimFriendSearchParam( isSearchNickName: true,//是否搜索昵称 isSearchRemark: true,//是否搜索备注 isSearchUserID: true,//是否搜索id keywordList: [],//关键字列表，最多支持5个。 ); V2TimValueCallback> searchFriendsRes = await TencentImSDKPlugin.v2TIMManager .getFriendshipManager() .searchFriends(searchParam: searchParam); //搜索好友的搜索条件 if (searchFriendsRes.code == 0) { // 查询成功 searchFriendsRes.data?.forEach((element) { element.relation; //好友类型 0:不是好友 1:对方在我的好友列表中 2:我在对方的好友列表中 3:互为好友 element.resultCode; //此条记录的查询结果错误码 element.resultInfo; //此条查询结果描述 //friendInfo为好友个人资料，如果不是好友，除了 userID 字段，其他字段都为空 element.friendInfo ?.friendCustomInfo; //好友自定义字段 首先要在 控制台 (功能配置 -> 好友自定义字段) 配置好友自定义字段，然后再调用接口进行设置 element.friendInfo?.friendGroups; //好友所在分组列表 element.friendInfo?.friendRemark; //好友备注 element.friendInfo?.userID; //用户的id element.friendInfo?.userProfile ?.allowType; //用户的好友验证方式 0:允许所有人加我好友 1:不允许所有人加我好友 2:加我好友需我确认 element.friendInfo?.userProfile?.birthday; //用户生日 element.friendInfo?.userProfile?.customInfo; //用户的自定义状态 element.friendInfo?.userProfile?.faceUrl; //用户头像 url element.friendInfo?.userProfile?.gender; //用户的性别 1:男 2:女 element.friendInfo?.userProfile?.level; //用户的等级 element.friendInfo?.userProfile?.nickName; //用户昵称 element.friendInfo?.userProfile?.role; //用户的角色 element.friendInfo?.userProfile?.selfSignature; //用户的签名 element.friendInfo?.userProfile?.userID; //用户 ID }); } "},"api/v2timfriendshipmanager/addfriend.html":{"url":"api/v2timfriendshipmanager/addfriend.html","title":"addFriend","summary":"添加好友√","keywords":"","body":"addFriend 功能介绍 添加好友 根据对方用户资料中的加好友需要验证与否，可以分为两种处理流程： 第一种：加好友不需要对方验证 用户 A 和 B 调用 setFriendListener 设置关系链监听器。 用户 B 通过 setSelfInfo 函数里的 allowType 字段设置为加好友不需要验证（V2TIM_FRIEND_ALLOW_ANY）。 用户 A 调用 addFriend 申请添加 B 为好友即可添加成功。添加成功后，按照申请参数 addType 的设置有两种情况： 如果设置为双向好友 (V2TIM_FRIEND_TYPE_BOTH) ，则用户 A 和 B 都会收到 onFriendListAdded 回调； 如果设置为单向好友（V2TIM_FRIEND_TYPE_SINGLE），则只有用户 A 收到 onFriendListAdded 回调。 第二种：加好友需要通过对方验证 用户 A 和 B 调用 setFriendListener 设置关系链监听。 用户 B 通过 setSelfInfo 函数里的 allowType 字段设置为加好友需要验证（V2TIM_FRIEND_NEED_CONFIRM）。 用户 A 调用 addFriend 申请添加 B 为好友，接口的成功回调参数中 resultCode 返回 30539，表示需要等待用户 B 的验证。同时 A 和 B 都会收到 onFriendApplicationListAdded 的回调。 用户 B 会收到 onFriendApplicationListAdded 的回调，当参数 type 为 V2TIM_FRIEND_APPLICATION_COME_IN 时，可以选择接受或者拒绝： B 调用 acceptFriendApplication 接受好友请求。如果参数接受类型为仅同意加单向好友（V2TIM_FRIEND_ACCEPT_AGREE）时: A 会收到 onFriendListAdded 回调，说明单向加好友成功。 B 会收到 onFriendApplicationListDeleted 回调，此时 B 成为 A 的好友，但 A 仍不是 B 的好友。 B 调用 acceptFriendApplication 接受好友请求，如果参数接受类型为同意加双向好友时（V2TIM_FRIEND_ACCEPT_AGREE_AND_ADD），A 和 B 都会收到 onFriendListAdded 回调，说明互相加好友成功。 B 调用 refuseFriendApplication 拒绝好友请求，双方都会收到 onFriendApplicationListDeleted 回调。 参数详解 参数名称 参数类型 是否必填 描述 userID String 是 需要添加的用户id remark String 否 添加的好友的好友备注 friendGroup String 否 添加好友所在分组 addWording String 否 添加好友附带信息 addSource String 否 添加来源描述 addType FriendTypeEnum 是 设置加好友类型，默认双向 返回值 V2TimValueCallback { code : int desc : String data : { resultCode : int//添加操作请求错误码 resultInfo : String//添加操作请求结果描述 userID : String//用户id } } 返回值详解 名称 数值类型 描述 code int 请求结果错误码 desc String 请求结果描述 data V2TimFriendOperationResult 添加请求结果 代码示例 //添加好友 V2TimValueCallback addFriendRes = await TencentImSDKPlugin.v2TIMManager.getFriendshipManager().addFriend( userID: \"userID\", //需要添加的用户id remark: \"\", //添加的好友的好友备注 friendGroup: \"\", //添加好友所在分组 addWording: \"\", //添加好友附带信息 addSource: \"\", //添加来源描述 addType: FriendTypeEnum.V2TIM_FRIEND_TYPE_BOTH, //设置加好友类型，默认双向 ); if (addFriendRes.code == 0) { // 添加请求发送成功 addFriendRes.data?.resultCode; //添加结果错误码 addFriendRes.data?.resultInfo; //添加结果描述 addFriendRes.data?.userID; //被添加的用户id } "},"api/v2timfriendshipmanager/deletefromfriendlist.html":{"url":"api/v2timfriendshipmanager/deletefromfriendlist.html","title":"deleteFromFriendList","summary":"从好友列表删除好友√","keywords":"","body":"deleteFromFriendList 功能介绍 添加好友 ID 建议一次最大 100 个，因为数量过多可能会导致数据包太大被后台拒绝，后台限制数据包最大为 1M。 参数详解 参数名称 参数类型 是否必填 描述 userIDList List 是 需要删除的用户id列表 deleteType FriendTypeEnum 是 删除操作的类型 返回值 V2TimValueCallback> { code : int desc : String data : List } 返回值详解 名称 数值类型 描述 code int 请求结果错误码 desc String 请求结果描述 data ListV2TimFriendOperationResult > 删除请求结果列表 代码示例 //从好友列表删除好友 V2TimValueCallback> deleteFromFriendListRes = await TencentImSDKPlugin.v2TIMManager .getFriendshipManager() .deleteFromFriendList( userIDList: [],//需要删除的用户id列表 deleteType: FriendTypeEnum.V2TIM_FRIEND_TYPE_BOTH,//删除操作的类型 ); if (deleteFromFriendListRes.code == 0) { // 删除请求发送成功 deleteFromFriendListRes.data?.forEach((element) { element.resultCode;//此条删除操作的错误码 element.resultInfo;//此条删除操作的结果描述 element.userID;//此条删除操作的用户id }); } "},"api/v2timfriendshipmanager/checkfriend.html":{"url":"api/v2timfriendshipmanager/checkfriend.html","title":"checkFriend","summary":"检查指定用户的好友关系√","keywords":"","body":"checkFriend 功能介绍 检查指定用户的好友关系 参数详解 参数名称 参数类型 是否必填 描述 userIDList List 是 需要检查的用户id列表 checkType FriendTypeEnum 是 检查的类型 返回值 V2TimValueCallback> { code : int desc : String data : List } 返回值详解 名称 数值类型 描述 code int 请求结果错误码 desc String 请求结果描述 data ListV2TimFriendCheckResult > 检查请求结果列表 代码示例 //检查指定用户的好友关系 V2TimValueCallback> checkFriendRes = await TencentImSDKPlugin.v2TIMManager .getFriendshipManager() .checkFriend( userIDList: [],//需要检查的用户id列表 checkType: FriendTypeEnum.V2TIM_FRIEND_TYPE_BOTH,//检查的类型 ); if (checkFriendRes.code == 0) { // 查询发送成功 checkFriendRes.data?.forEach((element) { element.resultCode;//检查结果错误码 element.resultInfo;//检查结果信息 element.resultType;//与查询用户的关系类型 0:不是好友 1:对方在我的好友列表中 2:我在对方的好友列表中 3:互为好友 element.userID;//用户id }); } "},"api/v2timfriendshipmanager/getfriendapplicationlist.html":{"url":"api/v2timfriendshipmanager/getfriendapplicationlist.html","title":"getFriendApplicationList","summary":"获取好友申请列表√","keywords":"","body":"getFriendApplicationList 功能介绍 获取好友申请列表 参数详解 此API无参数 返回值 V2TimValueCallback { code : int desc : String data : { friendApplicationList : List//好友申请列表 unreadCount : int//未读申请数量 } } 返回值详解 名称 数值类型 描述 code int 请求结果错误码 desc String 请求结果描述 data V2TimFriendApplicationResult 好友申请列表信息 代码示例 //获取好友申请列表 V2TimValueCallback getFriendApplicationListRes = await TencentImSDKPlugin.v2TIMManager .getFriendshipManager() .getFriendApplicationList(); if (getFriendApplicationListRes.code == 0) { // 查询成功 getFriendApplicationListRes.data?.unreadCount;//未读申请数量 getFriendApplicationListRes.data?.friendApplicationList ?.forEach((element) { element?.addSource;//申请添加来源 flutter会在发出请求的source前添加AddSource_Type_ element?.addTime;//申请时间 element?.addWording;//申请添加的信息 element?.faceUrl;//申请好友头像Url element?.nickname;//申请用户昵称 element?.type;//申请好友类型 element?.userID;//申请用户id }); } "},"api/v2timfriendshipmanager/acceptfriendapplication.html":{"url":"api/v2timfriendshipmanager/acceptfriendapplication.html","title":"acceptFriendApplication","summary":"同意好友申请√","keywords":"","body":"acceptFriendApplication 功能介绍 同意好友申请 参数详解 参数名称 参数类型 是否必填 描述 responseType FriendResponseTypeEnum 是 建立好友关系时选择单向/双向好友关系 type FriendApplicationTypeEnum 是 加好友类型 userID String 是 同意好友的用户id 返回值 V2TimValueCallback { code : int desc : String data : { resultCode : int//操作结果错误码 resultInfo : String//操作结果描述 userID : String//同意好友的id } } 返回值详解 名称 数值类型 描述 code int 请求结果错误码 desc String 请求结果描述 data V2TimFriendOperationResult 同意好友申请请求的返回信息 代码示例 //同意好友申请 V2TimValueCallback acceptFriendApplicationRes = await TencentImSDKPlugin.v2TIMManager .getFriendshipManager() .acceptFriendApplication( responseType: FriendResponseTypeEnum.V2TIM_FRIEND_ACCEPT_AGREE,//建立好友关系时选择单向/双向好友关系 type: FriendApplicationTypeEnum.V2TIM_FRIEND_APPLICATION_BOTH,//加好友类型 要与getApplicationList查询到的type相同，否则会报错。 userID: \"\");//同意好友的用户id if (acceptFriendApplicationRes.code == 0) { // 同意成功 acceptFriendApplicationRes.data?.resultCode;//操作结果错误码 acceptFriendApplicationRes.data?.resultInfo;//操作结果描述 acceptFriendApplicationRes.data?.userID;//同意好友的id } "},"api/v2timfriendshipmanager/refusefriendapplication.html":{"url":"api/v2timfriendshipmanager/refusefriendapplication.html","title":"refuseFriendApplication","summary":"拒绝好友申请√","keywords":"","body":"refuseFriendApplication 功能介绍 拒绝好友申请 参数详解 参数名称 参数类型 是否必填 描述 type FriendApplicationTypeEnum 是 拒绝好友类型 userID String 是 拒绝好友的用户id 返回值 V2TimValueCallback { code : int desc : String data : { resultCode : int//操作结果错误码 resultInfo : String//操作结果描述 userID : String//拒绝好友的id } } 返回值详解 名称 数值类型 描述 code int 请求结果错误码 desc String 请求结果描述 data V2TimFriendOperationResult 拒绝好友申请请求的返回信息 代码示例 V2TimValueCallback refuseFriendApplicationRes = await TencentImSDKPlugin.v2TIMManager .getFriendshipManager() .refuseFriendApplication( type: FriendApplicationTypeEnum.V2TIM_FRIEND_APPLICATION_BOTH,//拒绝好友类型 userID: \"\");//拒绝好友的用户id if (refuseFriendApplicationRes.code == 0) { // 拒绝成功 refuseFriendApplicationRes.data?.resultCode;//操作结果错误码 refuseFriendApplicationRes.data?.resultInfo;//操作结果描述 refuseFriendApplicationRes.data?.userID;//拒绝好友的id } "},"api/v2timfriendshipmanager/deletefriendapplication.html":{"url":"api/v2timfriendshipmanager/deletefriendapplication.html","title":"deleteFriendApplication","summary":"删除好友申请√","keywords":"","body":"deleteFriendApplication 功能介绍 删除好友申请 参数详解 参数名称 参数类型 是否必填 描述 type FriendApplicationTypeEnum 是 加好友类型 userID String 是 被删除好友申请的用户id 返回值 V2TimCallback { code : int desc : String } 返回值详解 名称 数值类型 描述 code int 请求结果错误码 desc String 请求结果描述 代码示例 //删除好友申请 V2TimCallback deleteFriendApplicationRes = await TencentImSDKPlugin .v2TIMManager .getFriendshipManager() .deleteFriendApplication( type: FriendApplicationTypeEnum.V2TIM_FRIEND_APPLICATION_BOTH,//加好友类型 要与getApplicationList查询到的type相同，否则会报错。 userID: \"\",//被删除好友申请的用户id ); if (deleteFriendApplicationRes.code == 0) { // 删除成功 } "},"api/v2timfriendshipmanager/setfriendapplicationread.html":{"url":"api/v2timfriendshipmanager/setfriendapplicationread.html","title":"setFriendApplicationRead","summary":"设置好友申请已读√","keywords":"","body":"setFriendApplicationRead 功能介绍 设置好友申请已读 参数详解 此API无参数 返回值 V2TimCallback { code : int desc : String } 返回值详解 名称 数值类型 描述 code int 请求结果错误码 desc String 请求结果描述 代码示例 //设置好友申请已读 V2TimCallback setFriendApplicationReadRes = await TencentImSDKPlugin .v2TIMManager .getFriendshipManager() .setFriendApplicationRead(); if (setFriendApplicationReadRes.code == 0) { // 设置成功 } "},"api/v2timfriendshipmanager/addtoblacklist.html":{"url":"api/v2timfriendshipmanager/addtoblacklist.html","title":"addToBlackList","summary":"添加用户到黑名单√","keywords":"","body":"addToBlackList 功能介绍 添加用户到黑名单 被拉黑的用户默认不会感知到 “被拉黑” 的状态，消息发送后不会返回已被对方拉黑的错误码。 如果希望被拉黑的用户在发消息时返回已被对方拉黑的错误提醒，请在 即时通信 IM 控制台 >【功能配置】>【登录与消息】>【黑名单检查】中关闭 ”发送消息后展示发送成功“。关闭后，被拉黑的用户在发送消息时，SDK 会报 20007 错误码。 参数详解 参数名称 参数类型 是否必填 描述 userIDList List 是 需要加入黑名单的好友id列表 返回值 V2TimValueCallback> { code : int desc : String data : List//添加黑名单请求的结果信息 } 返回值详解 名称 数值类型 描述 code int 请求结果错误码 desc String 请求结果描述 data ListV2TimFriendOperationResult > 添加黑名单请求的结果信息 代码示例 //添加好友到黑名单 V2TimValueCallback> addToBlackListRes = await TencentImSDKPlugin.v2TIMManager .getFriendshipManager() .addToBlackList( userIDList: [] //需要加入黑名单的好友id列表 ); if (addToBlackListRes.code == 0) { // 添加成功 addToBlackListRes.data?.forEach((element) { element.resultCode;//此条记录的错误码 element.resultInfo;//此条记录的操作结果描述 element.userID;//被操作的用户id }); } "},"api/v2timfriendshipmanager/deletefromblacklist.html":{"url":"api/v2timfriendshipmanager/deletefromblacklist.html","title":"deleteFromBlackList","summary":"把用户从黑名单中删除√","keywords":"","body":"deleteFromBlackList 功能介绍 把用户从黑名单中删除 参数详解 参数名称 参数类型 是否必填 描述 userIDList List 是 需要移出黑名单的好友id列表 返回值 V2TimValueCallback> { code : int desc : String data : List//把用户从黑名单中删除请求的结果信息 } 返回值详解 名称 数值类型 描述 code int 请求结果错误码 desc String 请求结果描述 data ListV2TimFriendOperationResult > 把用户从黑名单中删除请求的结果信息 代码示例 //把用户从黑名单中删除 V2TimValueCallback> deleteFromBlackListRes = await TencentImSDKPlugin.v2TIMManager .getFriendshipManager() .deleteFromBlackList( userIDList: [] //需要移出黑名单的好友id列表 ); if (deleteFromBlackListRes.code == 0) { // 删除成功 deleteFromBlackListRes.data?.forEach((element) { element.resultCode;//此条记录的错误码 element.resultInfo;//此条记录的操作结果描述 element.userID;//被操作的用户id }); } "},"api/v2timfriendshipmanager/getblacklist.html":{"url":"api/v2timfriendshipmanager/getblacklist.html","title":"getBlackList","summary":"获取黑名单列表√","keywords":"","body":"getBlackList 功能介绍 获取黑名单列表 参数详解 此API无参数 返回值 V2TimValueCallback> { code : int desc : String data : List//获取的黑名单列表 } 返回值详解 名称 数值类型 描述 code int 请求结果错误码 desc String 请求结果描述 data ListV2TimFriendInfo > 获取的黑名单列表 代码示例 //获取黑名单列表 V2TimValueCallback> getBlackListRes = await TencentImSDKPlugin.v2TIMManager .getFriendshipManager() .getBlackList(); if (getBlackListRes.code == 0) { // 查询成功 getBlackListRes.data?.forEach((element) { element.friendCustomInfo;//用户自定义属性 element.friendGroups;//用户的好友分组 element.friendRemark;//用户备注 element.userID;//此条记录用户id element.userProfile?.allowType; //用户的好友验证方式 0:允许所有人加我好友 1:不允许所有人加我好友 2:加我好友需我确认 element.userProfile?.birthday; //用户生日 element.userProfile?.customInfo; //用户的自定义状态 element.userProfile?.faceUrl; //用户头像 url element.userProfile?.gender; //用户的性别 1:男 2:女 element.userProfile?.level; //用户的等级 element.userProfile?.nickName; //用户昵称 element.userProfile?.role; //用户的角色 element.userProfile?.selfSignature; //用户的签名 element.userProfile?.userID; //用户 ID }); } "},"api/v2timfriendshipmanager/createfriendgroup.html":{"url":"api/v2timfriendshipmanager/createfriendgroup.html","title":"createFriendGroup","summary":"新建好友分组√","keywords":"","body":"createFriendGroup 功能介绍 新建好友分组 参数详解 参数名称 参数类型 是否必填 描述 groupName String 是 新建的分组名称 userIDList List 否 要添加到分组中的好友 userID 列表 返回值 V2TimValueCallback> { code : int desc : String data : List } 返回值详解 名称 数值类型 描述 code int 请求结果错误码 desc String 请求结果描述 data ListV2TimFriendOperationResult > 新建结果列表 代码示例 // 新建好友分组 V2TimValueCallback> createFriendGroupRes = await TencentImSDKPlugin.v2TIMManager .getFriendshipManager() .createFriendGroup( userIDList: [],//要添加到分组中的好友 userID 列表 groupName: \"\",//新建的分组名称 ); if (createFriendGroupRes.code == 0) { // 新建请求发送成功 createFriendGroupRes.data?.forEach((element) { element.resultCode;//此条操作的错误码 element.resultInfo;//此条操作的结果描述 element.userID;//此条被操作的用户id }); } "},"api/v2timfriendshipmanager/deletefriendsfromfriendgroup.html":{"url":"api/v2timfriendshipmanager/deletefriendsfromfriendgroup.html","title":"deleteFriendsFromFriendGroup","summary":"从好友分组中删除好友√","keywords":"","body":"deleteFriendsFromFriendGroup 功能介绍 从好友分组中删除好友 参数详解 参数名称 参数类型 是否必填 描述 groupName String 是 需要删除的群组名称 userIDList List 是 需要删除的用户id列表 返回值 V2TimValueCallback> { code : int desc : String data : List//操作结果说明列表 } 返回值详解 名称 数值类型 描述 code int 请求结果错误码 desc String 请求结果描述 data ListV2TimFriendOperationResult > 操作结果说明列表 代码示例 // 从好友分组中删除好友（只是将好友移出此列表，不删除好友关系） V2TimValueCallback> deleteFriendsFromFriendGroupRes = await TencentImSDKPlugin.v2TIMManager .getFriendshipManager() .deleteFriendsFromFriendGroup(groupName: \"\", //需要删除的群组名称 userIDList: [] //需要删除的用户id列表 ); if (deleteFriendsFromFriendGroupRes.code == 0) { // 添加成功 deleteFriendsFromFriendGroupRes.data?.forEach((element) { element.resultCode; //此条记录的错误码 element.resultInfo; //此条记录操作结果说明 element.userID; //此条记录被操作的用户id }); } # dart "},"api/v2timfriendshipmanager/getfriendgroups.html":{"url":"api/v2timfriendshipmanager/getfriendgroups.html","title":"getFriendGroups","summary":"获取分组信息√","keywords":"","body":"getFriendGroups 功能介绍 修改好友分组的名称 groupNameList 传入 null 获得所有分组信息。 参数详解 参数名称 参数类型 是否必填 描述 groupNameList List 是 要获取信息的好友分组名称列表 返回值 V2TimValueCallback> { code : int desc : String data : List// 查询到的分组信息 } 返回值详解 名称 数值类型 描述 code int 请求结果错误码 desc String 请求结果描述 data ListV2TimFriendGroup > 查询到的分组信息 代码示例 // 获取分组信息 V2TimValueCallback> getFriendGroupsRes = await TencentImSDKPlugin.v2TIMManager .getFriendshipManager() .getFriendGroups(groupNameList: []);//要获取信息的好友分组名称列表 if (getFriendGroupsRes.code == 0) { // 查询成功 getFriendGroupsRes.data?.forEach((element) { element.friendCount;//此组的好友数 element.friendIDList;//此组的好友id列表 element.name;//此组的名称 }); } "},"api/v2timfriendshipmanager/deletefriendgroup.html":{"url":"api/v2timfriendshipmanager/deletefriendgroup.html","title":"deleteFriendGroup","summary":"删除好友分组√","keywords":"","body":"deleteFriendGroup 功能介绍 删除好友分组 参数详解 参数名称 参数类型 是否必填 描述 groupNameList List 是 需要删除的群组名称 返回值 V2TimCallback { code : int desc : String } 返回值详解 名称 数值类型 描述 code int 请求结果错误码 desc String 请求结果描述 代码示例 // 删除好友分组 V2TimCallback deleteFriendGroupRes = await TencentImSDKPlugin.v2TIMManager .getFriendshipManager() .deleteFriendGroup(groupNameList: []);//需要删除的群组名称 if (deleteFriendGroupRes.code == 0) { // 删除成功 } "},"api/v2timfriendshipmanager/renamefriendgroup.html":{"url":"api/v2timfriendshipmanager/renamefriendgroup.html","title":"renameFriendGroup","summary":"修改好友分组的名称√","keywords":"","body":"renameFriendGroup 功能介绍 修改好友分组的名称 参数详解 参数名称 参数类型 是否必填 描述 oldName String 是 旧的分组名称 newName String 是 新的分组名称 返回值 V2TimCallback { code : int desc : String } 返回值详解 名称 数值类型 描述 code int 请求结果错误码 desc String 请求结果描述 代码示例 //修改好友分组的名称 V2TimCallback renameFriendGroupRes = await TencentImSDKPlugin.v2TIMManager .getFriendshipManager() .renameFriendGroup( oldName: \"\", //旧的分组名称 newName: \"\", //新的分组名称 ); if (renameFriendGroupRes.code == 0) { // 修改成功 } "},"api/v2timfriendshipmanager/addfriendstofriendgroup.html":{"url":"api/v2timfriendshipmanager/addfriendstofriendgroup.html","title":"addFriendsToFriendGroup","summary":"添加好友到一个好友分组√","keywords":"","body":"addFriendsToFriendGroup 功能介绍 添加好友到一个好友分组 参数详解 参数名称 参数类型 是否必填 描述 groupName String 是 分组名称 userIDList List 是 需要加入分组的好友id列表 返回值 V2TimValueCallback> { code : int desc : String data : List//添加分组请求的结果信息 } 返回值详解 名称 数值类型 描述 code int 请求结果错误码 desc String 请求结果描述 data ListV2TimFriendOperationResult > 添加分组请求的结果信息 代码示例 //添加好友到一个好友分组 V2TimValueCallback> addFriendsToFriendGroupRes = await TencentImSDKPlugin.v2TIMManager .getFriendshipManager() .addFriendsToFriendGroup( groupName: \"\", //分组名称 userIDList: [] //需要加入分组的好友id ); if (addFriendsToFriendGroupRes.code == 0) { // 添加成功 addFriendsToFriendGroupRes.data?.forEach((element) { element.resultCode;//此条记录的错误码 element.resultInfo;//此条记录的操作结果描述 element.userID;//此条记录被操作的用户id }); } "},"api/v2timfriendshipmanager/setfriendinfo.html":{"url":"api/v2timfriendshipmanager/setfriendinfo.html","title":"setFriendInfo","summary":"设置指定好友资料√","keywords":"","body":"setFriendInfo 功能介绍 设置指定好友资料 参数详解 参数名称 参数类型 是否必填 描述 userID String 是 需要修改的用户id friendRemark String 否 修改的好友备注 friendCustomInfo StriMap 否 修改的好友自定义信息 返回值 V2TimCallback { code : int desc : String } 返回值详解 名称 数值类型 描述 code int 请求结果错误码 desc String 请求结果描述 代码示例 //设置指定好友资料 V2TimCallback setFriendInfoRes = await TencentImSDKPlugin.v2TIMManager .getFriendshipManager() .setFriendInfo( userID: \"userID\",//需要修改的用户id friendRemark: \"\",//修改的好友备注 friendCustomInfo: {\"custom\": \"custom\"});//修改的好友自定义信息 旗舰版支持此属性 if (setFriendInfoRes.code == 0) { // 修改成功 } "},"api/v2timofflinepushmanager/":{"url":"api/v2timofflinepushmanager/","title":"V2TIMOfflinePushManager","summary":"提供离线推送相关的接口","keywords":"","body":"V2TIMOfflinePushManager V2TIMOfflinePushManager功能介绍 提供离线推送相关的接口 API目录 API 描述 doBackground APP 检测到应用退后台时可以调用此接口 doForeground APP 检测到应用进前台时可以调用此接口 setOfflinePushConfig 设置离线推送配置信息 "},"api/v2timofflinepushmanager/dobackground.html":{"url":"api/v2timofflinepushmanager/dobackground.html","title":"doBackground","summary":"APP 检测到应用退后台时可以调用此接口√","keywords":"","body":"doBackground 功能介绍 APP 检测到应用退后台时可以调用此接口 监听应用退后台方式可见文档。 从5.0.1（native）版本开始，如果配置了离线推送，会收到厂商的离线推送通道下发的通知栏消息。 参数详解 参数名称 参数类型 是否必填 描述 unreadCount int 是 会话未读数量 返回值 V2TimCallback { code : int desc : String } 返回值详解 名称 数值类型 描述 code int 请求结果错误码 desc String 请求结果描述 代码示例 //APP 检测到应用退后台时可以调用此接口 V2TimCallback doBackgroundRes = await TencentImSDKPlugin.v2TIMManager .getOfflinePushManager() .doBackground(unreadCount: 0); if (doBackgroundRes.code == 0) { //调用成功后的逻辑 } "},"api/v2timofflinepushmanager/doforeground.html":{"url":"api/v2timofflinepushmanager/doforeground.html","title":"doForeground","summary":"APP 检测到应用进前台时可以调用此接口√","keywords":"","body":"doForeground 功能介绍 APP 检测到应用退后台时可以调用此接口 监听应用进前台方式可见文档。 从5.0.1（native）版本开始，如果配置了离线推送，会收到厂商的离线推送通道下发的通知栏消息。 参数详解 此API无参数 返回值 V2TimCallback { code : int desc : String } 返回值详解 名称 数值类型 描述 code int 请求结果错误码 desc String 请求结果描述 代码示例 //doForeground V2TimCallback doForegroundRes = await TencentImSDKPlugin.v2TIMManager .getOfflinePushManager() .doForeground(); if (doForegroundRes.code == 0) { //调用成功后的逻辑 } "},"api/v2timofflinepushmanager/setofflinepushconfig.html":{"url":"api/v2timofflinepushmanager/setofflinepushconfig.html","title":"setOfflinePushConfig","summary":"设置离线推送配置信息√","keywords":"","body":"setOfflinePushConfig 功能介绍 设置离线推送配置信息 参数详解 参数名称 参数类型 是否必填 描述 businessID double 是 businessID 为对应厂商的证书 ID token String 是 应合规要求，在用户同意隐私协议登录成功后，分别初始化注册各个厂商推送服务，并在注册结果回调处保存注册成功后的 token， isTPNSToken bool 否 传false即可。 返回值 V2TimCallback { code : int desc : String } 返回值详解 名称 数值类型 描述 code int 请求结果错误码 desc String 请求结果描述 代码示例 //设置离线推送配置信息 V2TimCallback setOfflinePushConfigRes = await TencentImSDKPlugin .v2TIMManager .getOfflinePushManager() .setOfflinePushConfig( businessID: 0,//businessID 为对应厂商的证书 ID token: \"\",//应合规要求，在用户同意隐私协议登录成功后，分别初始化注册各个厂商推送服务，并在注册结果回调处保存注册成功后的 token isTPNSToken: false);//传false即可。 if (setOfflinePushConfigRes.code == 0) { // 设置成功 } "},"api/guan-jian-lei/":{"url":"api/guan-jian-lei/","title":"关键类","keywords":"","body":"关键类 关键类包含内容说明 IM API中使用到的数据类型 关键类目录 描述 Group 群组相关类型 User 用户相关类型 Message 消息相关类型 Listener 监听器相关类型 Topic 话题相关类型 V2TimValueCallback 携带请求结果与返回数据的类 V2TimCallback 只携带请求结果的类 "},"api/guan-jian-lei/group/":{"url":"api/guan-jian-lei/group/","title":"Group","summary":"群组相关类型","keywords":"","body":"Group Group包含内容说明 群组相关类型 Group包含类型目录 类型名称 描述 V2TimGroupMember 群组用户信息（只包含ID与角色） V2TimGroupMemberInfoResult 查询群组用户信息结果 V2TimGroupAtInfo 群组@信息 V2TimGroupInfo 群资料 V2TimGroupApplicationResult 加群申请列表 V2TimGroupApplication 群申请信息 V2TimGroupMemberChangeInfo 群tips，成员变更信息 V2TimGroupInfoResult 获取群组资料结果 V2TimGroupChangeInfo 群 tips，群变更信息 V2TimGroupMemberSearchParam 群成员搜索参数 V2TimTopicOperationResult 话题操作结果（添加、删除等） V2TimGroupMemberOperationResult 邀请其他人入群的操作结果 V2TimGroupTipsElem 群 tips 消息会存消息列表，群里所有的人都会展示，比如 xxx 进群，xxx 退群，xxx 群资料被修改了等 V2TimGroupSearchParam 群搜索参数 V2TimGroupMessageReadMemberList 群消息已读群成员列表 V2GroupMemberInfoSearchResult 查询群组用户信息单元结果 V2TimGroupMemberFullInfo 群组成员详细信息 V2TimGroupMemberInfo 群成员基本资料 EnumUtils 根据GroupMemberRoleTypeEnum生成GroupMemberRoleType "},"api/guan-jian-lei/group/v2timgroupmember.html":{"url":"api/guan-jian-lei/group/v2timgroupmember.html","title":"V2TimGroupMember","summary":"群组用户信息","keywords":"","body":"V2TimGroupMember 关键类描述 群组用户信息 参数 userID 参数类型 : String 参数描述：用户 ID role 参数类型 : GroupMemberRoleTypeEnum 参数描述：用户角色 toJson 参数类型 : Map toJson() 参数描述：返回群组用户信息的JSON格式 "},"api/guan-jian-lei/group/v2timgroupmemberinforesult.html":{"url":"api/guan-jian-lei/group/v2timgroupmemberinforesult.html","title":"V2TimGroupMemberInfoResult","summary":"查询群组用户信息结果","keywords":"","body":"V2TimGroupMemberInfoResult 关键类描述 查询群组用户信息结果 参数 nextSeq 参数类型 : String 参数描述：分页拉取的 seq 如果为 0 表示拉取结束 memberInfoList 参数类型 : ListV2TimGroupMemberFullInfo > 参数描述：用户信息列表 toJson 参数类型 : Map toJson() 参数描述：返回查询群组用户信息结果的JSON格式 "},"api/guan-jian-lei/group/v2timgroupatinfo.html":{"url":"api/guan-jian-lei/group/v2timgroupatinfo.html","title":"V2TimGroupAtInfo","summary":"群组@ 信息","keywords":"","body":"V2TimGroupAtInfo 关键类描述 群组@ 信息 参数 seq 参数类型 : String 参数描述：@ 消息序列号，即带有 “@我” 或者 “@所有人” 标记的消息的序列号 memberInfoList 参数类型 : int 参数描述：@ 提醒类型 0:@我 1:@所有人 2:@我并@所有人 toJson 参数类型 : Map toJson() 参数描述：返回群组@ 信息的JSON格式 "},"api/guan-jian-lei/group/v2timgroupinfo.html":{"url":"api/guan-jian-lei/group/v2timgroupinfo.html","title":"V2TimGroupInfo","summary":"群资料","keywords":"","body":"V2TimGroupInfo 关键类描述 群资料 参数 groupID 参数类型 : String 参数描述：群组 ID 自定义群组 ID 必须为可打印 ASCII 字符（0x20-0x7e），最长48个字节，且前缀不能为 @TGS（避免与默认分配的群组 ID 混淆） groupType 参数类型 : String 参数描述：群类型 groupName 参数类型 : String 参数描述：群名称 notification 参数类型 : String 参数描述：群公告 群公告最长300字节 introduction 参数类型 : String 参数描述：群简介 群简介最长240字节 faceUrl 参数类型 : String 参数描述：群头像 群头像 URL 最长100字节 isAllMuted 参数类型 : bool 参数描述：是否全员禁言 isSupportTopic 参数类型 : bool 参数描述：社群是否支持创建话题 只在群类型为 Community 时有效 owner 参数类型 : String 参数描述：群创建人/管理员 createTime 参数类型 : int 参数描述：群创建时间 groupAddOpt 参数类型 : int 参数描述：加群是否需要管理员审批，工作群（Work）不能主动加入，不支持此设置项 lastInfoTime 参数类型 : int 参数描述：群最近一次群资料修改时间 lastMessageTime 参数类型 : int 参数描述：群最近一次发消息时间 memberCount 参数类型 : int 参数描述：已加入的群成员数量 onlineCount 参数类型 : int 参数描述：在线的群成员数量 role 参数类型 : int 参数描述：当前用户在此群组中的角色，切换角色请调用 setGroupMemberRole 接口 recvOpt 参数类型 : int 参数描述：当前用户在此群组中的消息接收选项,修改群消息接收选项请调用 setGroupReceiveMessageOpt 接口 joinTime 参数类型 : int 参数描述：当前用户在此群中的加入时间，不支持设置，系统自动生成 customInfo 参数类型 : Map 参数描述：设置群自定义字段 需要两个步骤： 1.在 控制台 (功能配置 -> 群自定义字段) 配置群自定义字段的 key 值，Key 为 String 类型，长度不超过 16 字节。 2.调用 setGroupInfo 接口设置该字段，长度不超过 512 字节。 toJson 参数类型 : Map toJson() 参数描述：返回群资料的JSON格式 "},"api/guan-jian-lei/group/v2timgroupapplicationresult.html":{"url":"api/guan-jian-lei/group/v2timgroupapplicationresult.html","title":"V2TimGroupApplicationResult","summary":"加群申请列表","keywords":"","body":"V2TimGroupApplicationResult 关键类描述 加群申请列表 参数 unreadCount 参数类型 : int 参数描述：未读的申请数量 groupApplicationList 参数类型 : ListV2TimGroupApplication > 参数描述：加群申请的列表 toJson 参数类型 : Map toJson() 参数描述：返回加群申请列表的JSON格式 "},"api/guan-jian-lei/group/v2timgroupapplication.html":{"url":"api/guan-jian-lei/group/v2timgroupapplication.html","title":"V2TimGroupApplication","summary":"群申请信息","keywords":"","body":"V2TimGroupApplication 关键类描述 群申请信息 参数 groupID 参数类型 : String 参数描述：群组 ID fromUser 参数类型 : String 参数描述：请求者 userID fromUserNickName 参数类型 : String 参数描述：请求者昵称 fromUserFaceUrl 参数类型 : String 参数描述：请求者头像 toUser 参数类型 : String 参数描述：判决者id，有人请求加群:0，邀请其他人加群:被邀请人用户 ID addTime 参数类型 : int 参数描述：申请时间 requestMsg 参数类型 : String 参数描述：申请或邀请附加信息 handledMsg 参数类型 : String 参数描述：审批信息：同意或拒绝信息 type 参数类型 : int 参数描述：请求类型 0:申请入群 1:邀请入群 handleStatus 参数类型 : int 参数描述：处理标志 0:未处理 1:被他人处理 2:自己已处理 handleResult 参数类型 : int 参数描述：处理结果 0:拒绝申请 1:同意申请 toJson 参数类型 : Map toJson() 参数描述：返回群申请信息的JSON格式 "},"api/guan-jian-lei/group/v2timgroupmemberchangeinfo.html":{"url":"api/guan-jian-lei/group/v2timgroupmemberchangeinfo.html","title":"V2TIMGroupMemberChangeInfo","summary":"群tips，成员变更信息","keywords":"","body":"V2TIMGroupMemberChangeInfo 关键类描述 群tips，成员变更信息 参数 userID 参数类型 : String 参数描述：变更用户 muteTime 参数类型 : int 参数描述：禁言时间（秒，表示还剩多少秒可以发言） toJson 参数类型 : Map toJson() 参数描述：返回群tips，成员变更信息的JSON格式 "},"api/guan-jian-lei/group/v2timgroupinforesult.html":{"url":"api/guan-jian-lei/group/v2timgroupinforesult.html","title":"V2TimGroupInfoResult","summary":"获取群组资料结果","keywords":"","body":"V2TimGroupInfoResult 关键类描述 获取群组资料结果 参数 resultCode 参数类型 : int 参数描述：结果 0：成功；非0：失败 resultMessage 参数类型 : String 参数描述：如果获取失败，会返回错误信息 groupInfo 参数类型 : V2TimGroupInfo 参数描述：如果获取成功，会返回对应的 info toJson 参数类型 : Map toJson() 参数描述：返回获取群组资料结果的JSON格式 "},"api/guan-jian-lei/group/v2timgroupchangeinfo.html":{"url":"api/guan-jian-lei/group/v2timgroupchangeinfo.html","title":"V2TimGroupChangeInfo","summary":"群 tips，群变更信息","keywords":"","body":"V2TimGroupChangeInfo 关键类描述 群 tips，群变更信息 参数 type 参数类型 : int 参数描述：变更类型 1:群名修改 2:群简介修改 3:群公告修改 4:群头像修改 5:群主变更 6:群自定义字段变更 7:全员禁言字段变更 value 参数类型 : String 参数描述：根据变更类型表示不同的值,例如 type = 1，value 表示群新的 groupName key 参数类型 : String 参数描述：变更自定义字段的 key 值（type = 6 生效） 因为历史遗留原因，如果只修改了群自定义字段，当前消息不会存漫游和数据库 boolValue 参数类型 : bool 参数描述：根据变更类型表示不同的值，当前只有 type = 7 时有效 toJson 参数类型 : Map toJson() 参数描述：返回群 tips，群变更信息的JSON格式 "},"api/guan-jian-lei/group/v2timgroupmembersearchparam.html":{"url":"api/guan-jian-lei/group/v2timgroupmembersearchparam.html","title":"V2TimGroupMemberSearchParam","summary":"群成员搜索参数","keywords":"","body":"V2TimGroupMemberSearchParam 关键类描述 群成员搜索参数 参数 keywordList 参数类型 : List 参数描述：搜索关键字列表，最多支持5个 groupIDList 参数类型 : List 参数描述：指定群 ID 列表，若为 null 则搜索全部群中的群成员 isSearchMemberUserID 参数类型 : bool 参数描述：设置是否搜索群成员 userID，默认为true isSearchMemberNickName 参数类型 : bool 参数描述：设置是否搜索群成员昵称，默认为true isSearchMemberRemark 参数类型 : bool 参数描述：设置是否搜索群成员备注，默认为true isSearchMemberNameCard 参数类型 : bool 参数描述：设置是否搜索群成员名片，默认为true toJson 参数类型 : Map toJson() 参数描述：返回群成员搜索参数的JSON格式 "},"api/guan-jian-lei/group/v2timtopicoperationresult.html":{"url":"api/guan-jian-lei/group/v2timtopicoperationresult.html","title":"V2TimTopicOperationResult","summary":"话题操作结果（添加、删除等）","keywords":"","body":"V2TimTopicOperationResult 关键类描述 话题操作结果（添加、删除等） 参数 topicID 参数类型 : String 参数描述：话题 ID errorCode 参数类型 : int 参数描述：返回码 errorMessage 参数类型 : String 参数描述：返回信息 toJson 参数类型 : Map toJson() 参数描述：返回话题操作结果的JSON格式 "},"api/guan-jian-lei/group/v2timgroupmemberoperationresult.html":{"url":"api/guan-jian-lei/group/v2timgroupmemberoperationresult.html","title":"V2TimGroupMemberOperationResult","summary":"邀请其他人入群的操作结果","keywords":"","body":"V2TimGroupMemberOperationResult 关键类描述 邀请其他人入群的操作结果 参数 memberID 参数类型 : String 参数描述：被操作成员 ID result 参数类型 : int 参数描述：返回状态 0:操作失败 1:操作成功 2:无效操作，加群时已经是群成员，移除群组时不在群内 3:等待处理，邀请入群时等待对方处理 4:操作失败，创建群指定初始群成员列表或邀请入群时，被邀请者加入的群总数超限 toJson 参数类型 : Map toJson() 参数描述：返回邀请其他人入群的操作结果的JSON格式 "},"api/guan-jian-lei/group/v2timgrouptipselem.html":{"url":"api/guan-jian-lei/group/v2timgrouptipselem.html","title":"V2TimGroupTipsElem","summary":"群 tips 消息会存消息列表，群里所有的人都会展示，比如 xxx 进群，xxx 退群，xxx 群资料被修改了等","keywords":"","body":"V2TimGroupTipsElem 关键类描述 群 tips 消息会存消息列表，群里所有的人都会展示，比如 xxx 进群，xxx 退群，xxx 群资料被修改了等 参数 groupID 参数类型 : String 参数描述：群组 ID type 参数类型 : int 参数描述：群Tips类型 1:主动入群（memberList 加入群组，非 Work 群有效） 2:被邀请入群（opMember 邀请 memberList 入群，Work 群有效） 3:退出群 (opMember 退出群组) 4:踢出群 (opMember 把 memberList 踢出群组) 5:设置管理员 (opMember 把 memberList 设置为管理员) 6:取消管理员 (opMember 取消 memberList 管理员身份) 7:群资料变更 (opMember 修改群资料： groupName & introduction & notification & faceUrl & owner & custom) 8:群成员资料变更 (opMember 修改群成员资料：muteTime) opMember 参数类型 : V2TimGroupMemberInfo 参数描述：操作者群成员资料 memberList 参数类型 : ListV2TimGroupMemberInfo > 参数描述：被操作人列表 groupChangeInfoList 参数类型 : ListV2TimGroupChangeInfo > 参数描述：群信息变更 memberChangeInfoList 参数类型 : ListV2TimGroupMemberChangeInfo > 参数描述：成员变更 memberCount 参数类型 : int 参数描述：当前群人数 toJson 参数类型 : Map toJson() 参数描述：返回查询群组用户信息结果的JSON格式 "},"api/guan-jian-lei/group/v2timgroupsearchparam.html":{"url":"api/guan-jian-lei/group/v2timgroupsearchparam.html","title":"V2TimGroupSearchParam","summary":"群搜索参数","keywords":"","body":"V2TimGroupSearchParam 关键类描述 群搜索参数 参数 keywordList 参数类型 : List 参数描述：搜索关键字列表，最多支持5个。 isSearchGroupID 参数类型 : bool 参数描述：设置是否搜索群 ID，默认为true isSearchGroupName 参数类型 : bool 参数描述：设置是否搜索群名称，默认为true toJson 参数类型 : Map toJson() 参数描述：返回群搜索参数的JSON格式 "},"api/guan-jian-lei/group/v2timgroupmessagereadmemberlist.html":{"url":"api/guan-jian-lei/group/v2timgroupmessagereadmemberlist.html","title":"V2TimGroupMessageReadMemberList","summary":"群消息已读或未读群成员列表","keywords":"","body":"V2TimGroupMessageReadMemberList 关键类描述 群消息已读或未读群成员列表 参数 nextSeq 参数类型 : String 参数描述：分页拉取的 seq 如果为 0 表示拉取结束 isFinished 参数类型 : bool 参数描述：成员列表是否已经拉取完毕 memberInfoList 参数类型 : ListV2TimGroupMemberInfo > 参数描述：群消息已读或未读群成员列表 toJson 参数类型 : Map toJson() 参数描述：返回群消息已读群成员列表的JSON格式 "},"api/guan-jian-lei/group/v2groupmemberinfosearchresult.html":{"url":"api/guan-jian-lei/group/v2groupmemberinfosearchresult.html","title":"V2GroupMemberInfoSearchResult","summary":"查询群组用户信息结果","keywords":"","body":"V2GroupMemberInfoSearchResult 关键类描述 查询群组用户信息结果 参数 groupMemberSearchResultItems 参数类型 : Map 参数描述：群组成员搜索结果单元 toJson 参数类型 : Map toJson() 参数描述：返回查询群组用户信息结果的JSON格式 "},"api/guan-jian-lei/group/v2timgroupmemberfullinfo.html":{"url":"api/guan-jian-lei/group/v2timgroupmemberfullinfo.html","title":"V2TimGroupMemberFullInfo","summary":"群组成员详细信息","keywords":"","body":"V2TimGroupMemberFullInfo 关键类描述 群组成员详细信息 参数 userID 参数类型 : String 参数描述：群成员 userID role 参数类型 : int 参数描述：群成员角色 1:群成员 2:群管理员 3:群主 muteUntil 参数类型 : int 参数描述：禁言持续时间 joinTime 参数类型 : int 参数描述：群成员入群时间，自动生成，不可修改。 customInfo 参数类型 : Map 参数描述：群成员自定义字段 nickName 参数类型 : String 参数描述：群成员昵称 nameCard 参数类型 : String 参数描述：群成员名片 friendRemark 参数类型 : String 参数描述：好友备注 faceUrl 参数类型 : String 参数描述：用户头像 url toJson 参数类型 : Map toJson() 参数描述：返回群组成员详细信息的JSON格式 "},"api/guan-jian-lei/group/v2timgroupmemberinfo.html":{"url":"api/guan-jian-lei/group/v2timgroupmemberinfo.html","title":"V2TimGroupMemberInfo","summary":"群成员基本资料","keywords":"","body":"V2TimGroupMemberInfo 关键类描述 群成员基本资料 参数 userID 参数类型 : String 参数描述：用户 ID nickName 参数类型 : String 参数描述：用户昵称 nameCard 参数类型 : String 参数描述：群成员名片 friendRemark 参数类型 : String 参数描述：用户好友备注 faceUrl 参数类型 : String 参数描述：用户头像 toJson 参数类型 : Map toJson() 参数描述：返回群成员基本资料的JSON格式 "},"api/guan-jian-lei/group/enumutils.html":{"url":"api/guan-jian-lei/group/enumutils.html","title":"EnumUtils","summary":"根据GroupMemberRoleTypeEnum生成GroupMemberRoleType","keywords":"","body":"EnumUtils 关键类描述 根据GroupMemberRoleTypeEnum生成GroupMemberRoleType 参数 convertGroupMemberRoleTypeEnum 参数类型 : GroupMemberRoleTypeEnum 参数描述：根据GroupMemberRoleTypeEnum生成GroupMemberRoleType 200:群成员 300:群管理员 400:群主 "},"api/guan-jian-lei/user/":{"url":"api/guan-jian-lei/user/","title":"User","summary":"用户相关类","keywords":"","body":"User User包含内容说明 用户相关类型 User包含类型目录 类型名称 描述 V2TimUserInfo 用户信息属性 V2TimUserStatus 用户状态信息属性 V2TimUserFullInfo 用户全量信息属性 V2TimFriendGroup 用户好友分组信息 V2TimFriendCheckResult 好友关系链检查结果 V2TimFriendApplicationResult 好友申请列表 V2TimFriendApplication 好友申请信息 V2TimFriendSearchParam 搜索用户参数 V2TimFriendOperationResult 好友操作结果（添加、删除、加黑名单、添加分组等） V2TimFriendInfoResult 好友资料获取结果 V2TimFriendInfo 好友资料 "},"api/guan-jian-lei/user/v2timuserinfo.html":{"url":"api/guan-jian-lei/user/v2timuserinfo.html","title":"V2TimUserInfo","summary":"用户信息属性","keywords":"","body":"V2TimUserInfo 关键类描述 用户信息属性 参数 userID 参数类型 : String 参数描述：用户 ID nickName 参数类型 : String 参数描述：用户昵称 faceUrl 参数类型 : String 参数描述：用户头像 toJson 参数类型 : Map toJson() 参数描述：返回用户信息的JSON格式 "},"api/guan-jian-lei/user/v2timuserstatus.html":{"url":"api/guan-jian-lei/user/v2timuserstatus.html","title":"V2TimUserStatus","summary":"用户状态信息属性","keywords":"","body":"V2TimUserStatus 关键类描述 用户状态信息属性 参数 userID 参数类型 : String 参数描述：用户 ID statusType 参数类型 : int 参数描述：用户状态 0:未知状态 1:在线状态 2:离线状态 3:未登录（如主动调用 logout 接口，或者账号注册后还未登录） customStatus 参数类型 : String 参数描述：用户的自定义状态 toJson 参数类型 : Map toJson() 参数描述：返回用户状态信息的JSON格式 "},"api/guan-jian-lei/user/v2timuserfullinfo.html":{"url":"api/guan-jian-lei/user/v2timuserfullinfo.html","title":"V2TimUserFullInfo","summary":"用户全量信息属性","keywords":"","body":"V2TimUserFullInfo 关键类描述 用户全量信息属性 参数 userID 参数类型 : String 参数描述：用户 ID nickName 参数类型 : String 参数描述：用户昵称 faceUrl 参数类型 : String 参数描述：用户头像 url selfSignature 参数类型 : String 参数描述：用户的签名 gender 参数类型 : int 参数描述：用户的性别 1:男 2:女 allowType 参数类型 : int 参数描述：用户的好友验证方式 0:允许所有人加我好友 1:不允许所有人加我好友 2:加我好友许我确认 customInfo 参数类型 : Map 参数描述：用户的自定义状态 role 参数类型 : int 参数描述：用户的角色 level 参数类型 : int 参数描述：用户的等级 birthday 参数类型 : int 参数描述：用户生日 toJson 参数类型 : Map toJson() 参数描述：返回用户全量信息的JSON格式 "},"api/guan-jian-lei/user/v2timfriendgroup.html":{"url":"api/guan-jian-lei/user/v2timfriendgroup.html","title":"V2TimFriendGroup","summary":"用户好友分组信息","keywords":"","body":"V2TimFriendGroup 关键类描述 用户好友分组信息 参数 name 参数类型 : String 参数描述：好友分组名称 friendCount 参数类型 : int 参数描述：分组成员数量 friendIDList 参数类型 : List 参数描述：分组成员列表 toJson 参数类型 : Map toJson() 参数描述：返回用户好友分组信息的JSON格式 "},"api/guan-jian-lei/user/v2timfriendcheckresult.html":{"url":"api/guan-jian-lei/user/v2timfriendcheckresult.html","title":"V2TimFriendCheckResult","summary":"好友关系链检查结果","keywords":"","body":"V2TimFriendCheckResult 关键类描述 好友关系链检查结果 参数 userID 参数类型 : String 参数描述：用户 ID resultCode 参数类型 : int 参数描述：返回码 resultInfo 参数类型 : String 参数描述：返回信息 resultType 参数类型 : int 参数描述：与查询用户的关系类型 0:不是好友 1:对方在我的好友列表中 2:我在对方的好友列表中 3:互为好友 toJson 参数类型 : Map toJson() 参数描述：返回好友关系链检查结果的JSON格式 "},"api/guan-jian-lei/user/v2timfriendapplicationresult.html":{"url":"api/guan-jian-lei/user/v2timfriendapplicationresult.html","title":"V2TimFriendApplicationResult","summary":"好友申请列表","keywords":"","body":"V2TimFriendApplicationResult 关键类描述 好友申请列表 参数 unreadCount 参数类型 : int 参数描述：好友申请未读数量 friendApplicationList 参数类型 : ListV2TimFriendApplication > 参数描述：好友申请列表 toJson 参数类型 : Map toJson() 参数描述：返回好友申请列表的JSON格式 "},"api/guan-jian-lei/user/v2timfriendapplication.html":{"url":"api/guan-jian-lei/user/v2timfriendapplication.html","title":"V2TimFriendApplication","summary":"好友申请信息","keywords":"","body":"V2TimFriendApplication 关键类描述 好友申请信息 参数 userID 参数类型 : String 参数描述：用户 ID nickName 参数类型 : String 参数描述：用户昵称 faceUrl 参数类型 : String 参数描述：用户头像 addTime 参数类型 : int 参数描述：添加时间 addSource 参数类型 : String 参数描述：来源 addWording 参数类型 : String 参数描述：加好友附言 type 参数类型 : int 参数描述：好友申请类型 0:别人发给我的 1:我发给别人的 2:别人发给我的 和 我发给别人的。仅拉取时有效 toJson 参数类型 : Map toJson() 参数描述：返回好友申请信息的JSON格式 "},"api/guan-jian-lei/user/v2timfriendsearchparam.html":{"url":"api/guan-jian-lei/user/v2timfriendsearchparam.html","title":"V2TimFriendSearchParam","summary":"搜索用户参数","keywords":"","body":"V2TimFriendSearchParam 关键类描述 搜索用户参数 参数 keywordList 参数类型 : List 参数描述：搜索的关键字列表，关键字列表最多支持 5 个 isSearchUserID 参数类型 : bool 参数描述：设置是否搜索 userID 默认为true isSearchNickName 参数类型 : bool 参数描述：是否设置搜索昵称 默认为true isSearchRemark 参数类型 : bool 参数描述：是否设置搜索备注 默认为true toJson 参数类型 : Map toJson() 参数描述：返回搜索用户参数的JSON格式 "},"api/guan-jian-lei/user/v2timfriendoperationresult.html":{"url":"api/guan-jian-lei/user/v2timfriendoperationresult.html","title":"V2TimFriendOperationResult","summary":"好友操作结果（添加、删除、加黑名单、添加分组等）","keywords":"","body":"V2TimFriendOperationResult 关键类描述 好友操作结果（添加、删除、加黑名单、添加分组等） 参数 userID 参数类型 : String 参数描述：用户 ID resultCode 参数类型 : int 参数描述：返回码 resultInfo 参数类型 : String 参数描述：返回信息 toJson 参数类型 : Map toJson() 参数描述：返回好友操作结果的JSON格式 "},"api/guan-jian-lei/user/v2timfriendinforesult.html":{"url":"api/guan-jian-lei/user/v2timfriendinforesult.html","title":"V2TimFriendInfoResult","summary":"好友资料获取结果","keywords":"","body":"V2TimFriendInfoResult 关键类描述 好友资料获取结果 参数 resultCode 参数类型 : int 参数描述：返回码 resultInfo 参数类型 : String 参数描述：返回结果表述 relation 参数类型 : int 参数描述：好友类型 0:不是好友 1:对方在我的好友列表中 2:我在对方的好友列表中 3:互为好友 friendInfo 参数类型 : V2TimFriendInfo 参数描述：好友个人资料，如果不是好友，除了 userID 字段，其他字段都为空 toJson 参数类型 : Map toJson() 参数描述：返回好友资料获取结果的JSON格式 "},"api/guan-jian-lei/user/v2timfriendinfo.html":{"url":"api/guan-jian-lei/user/v2timfriendinfo.html","title":"V2TimFriendInfo","summary":"好友资料","keywords":"","body":"V2TimFriendInfo 关键类描述 好友资料 参数 userID 参数类型 : String 参数描述：好友 ID friendRemark 参数类型 : String 参数描述：好友备注 friendGroups 参数类型 : List 参数描述：好友所在分组列表 friendCustomInfo 参数类型 : Map 参数描述：好友自定义字段 首先要在 控制台 (功能配置 -> 好友自定义字段) 配置好友自定义字段，然后再调用该接口进行设置，key 值不需要加 Tag_SNS_Custom_ 前缀。 userProfile 参数类型 : V2TimUserFullInfo 参数描述：好友个人资料 toJson 参数类型 : Map toJson() 参数描述：返回好友资料的JSON格式 "},"api/guan-jian-lei/message/":{"url":"api/guan-jian-lei/message/","title":"Message","summary":"消息相关类型","keywords":"","body":"Message Message包含内容说明 消息相关类型 Message包含类型目录 类型名称 描述 V2TimMessage 消息属性 V2TimVideoElem 视频消息单体属性 V2TimTextElem 文本消息单体属性 V2TimSoundElem 语音消息单体属性 OfflinePushInfo 消息的离线推送信息 V2TimOfflinePushInfo 自定义消息离线推送 V2TimMergerElem 合并消息单体属性 V2TimLocationElem 地理位置单体属性 V2TimFileElem 文件消息单体属性 V2TimFaceElem 表情消息单体属性 V2TimCustomElem 自定义消息单体属性 V2TimConversationResult 会话列表拉取结果 V2TimConversation 会话对象属性 V2TimMsgCreateInfoResult 创建信息结果 V2TimReceiveMessageOptInfo 用户接收消息设置的属性 V2TimSignalingInfo 信令消息属性 V2TimMessageSearchResultItem 会话搜索结果单体属性 V2TimMessageSearchResult 会话搜索结果 V2TimMessageSearchParam 消息搜索参数 V2TimMessageReceipt 消息已读回执 V2TimMessageChangeInfo 消息修改信息 "},"api/guan-jian-lei/message/v2timmessage.html":{"url":"api/guan-jian-lei/message/v2timmessage.html","title":"V2TIMMessage","summary":"消息属性","keywords":"","body":"V2TIMMessage 关键类描述 消息属性 参数 msgID 参数类型 : String 参数描述：消息 ID（消息创建的时候为 nil，消息发送的时候会生成） timestamp 参数类型 : int 参数描述：消息时间戳 progress 参数类型 : int 参数描述：消息中文件上传进度 取值范围为0-100 sender 参数类型 : String 参数描述：消息发送者 nickName 参数类型 : String 参数描述：消息发送者昵称 friendRemark 参数类型 : String 参数描述：消息发送者好友备注 faceUrl 参数类型 : String 参数描述：消息发送者头像 nameCard 参数类型 : String 参数描述：如果是群组消息，nameCard 为发送者的群名片 groupID 参数类型 : String 参数描述：如果是群组消息，groupID 为会话群组 ID，否则为 nil userID 参数类型 : String 参数描述：如果是单聊消息，userID 为会话用户 ID，否则为 nil， 假设自己和 userA 聊天，无论是自己发给 userA 的消息还是 userA 发给自己的消息，这里的 userID 均为 userA status 参数类型 : int 参数描述：消息发送状态 1:消息发送中 2:消息发送成功 3:消息发送失败 4:消息被删除 5:导入到本地的消息 6:被撤销的消息 elemType 参数类型 : int 参数描述：消息类型 0:未知消息 1:文本消息 2:自定义消息 3:图片消息 4:语音消息 5:视频消息 6:文件消息 7:地理位置消息 8:表情消息 9:群 Tips 消息 10:合并消息 textElem 参数类型 : V2TimTextElem 参数描述：消息类型 为 V2TIM_ELEM_TYPE_TEXT，textElem 会存储文本消息内容 customElem 参数类型 : V2TimCustomElem 参数描述：消息类型 为 V2TIM_ELEM_TYPE_CUSTOM，customElem 会存储自定义消息内容 imageElem 参数类型 : V2TimImageElem 参数描述：消息类型 为 V2TIM_ELEM_TYPE_IMAGE，imageElem 会存储图片消息内容 soundElem 参数类型 : V2TimSoundElem 参数描述：消息类型 为 V2TIM_ELEM_TYPE_SOUND，soundElem 会存储语音消息内容 videoElem 参数类型 : V2TimVideoElem 参数描述：消息类型 为 V2TIM_ELEM_TYPE_VIDEO，videoElem 会存储视频消息内容 fileElem 参数类型 : V2TimFileElem 参数描述：消息类型 为 V2TIM_ELEM_TYPE_FILE，fileElem 会存储文件消息内容 locationElem 参数类型 : V2TimLocationElem 参数描述：消息类型 为 V2TIM_ELEM_TYPE_LOCATION，locationElem 会存储地理位置消息内容 faceElem 参数类型 : V2TimFaceElem 参数描述：消息类型 为 V2TIM_ELEM_TYPE_FACE，faceElem 会存储表情消息内容 groupTipsElem 参数类型 : V2TimGroupTipsElem 参数描述：消息类型 为 V2TIM_ELEM_TYPE_GROUP_TIPS，groupTipsElem 会存储群 tips 消息内容 mergerElem 参数类型 : V2TimMergerElem 参数描述：消息类型 为 V2TIM_ELEM_TYPE_MERGER，mergerElem 会存储转发消息内容 localCustomData 参数类型 : String 参数描述：消息自定义数据（本地保存，不会发送到对端，程序卸载重装后失效） localCustomInt 参数类型 : int 参数描述：消息自定义数据,可以用来标记语音、视频消息是否已经播放（本地保存，不会发送到对端，程序卸载重装后失效） cloudCustomData 参数类型 : String 参数描述：消息自定义数据（云端保存，会发送到对端，程序卸载重装后还能拉取到） isSelf 参数类型 : bool 参数描述：消息发送者是否是自己 isRead 参数类型 : bool 参数描述：消息自己是否已读 isPeerRead 参数类型 : bool 参数描述：消息对方是否已读（只有 C2C 消息有效） 该字段为true的条件是消息 timestamp priority 参数类型 : int 参数描述：消息优先级（只有 onRecvNewMessage 收到的 V2TIMMessage 获取有效） offlinePushInfo 参数类型 : V2TimOfflinePushInfo 参数描述：消息的离线推送信息 groupAtUserList 参数类型 : List 参数描述：群消息中被 @ 的用户 UserID 列表（即该消息都 @ 了哪些人） seq 参数类型 : bool 参数描述：群聊中的消息序列号云端生成，在群里是严格递增且唯一的, 单聊中的序列号是本地生成，不能保证严格递增且唯一。 random 参数类型 : int 参数描述：消息随机码 isExcludedFromUnreadCount 参数类型 : bool 参数描述：消息是否不计入会话未读数：默认为 NO，表明需要计入会话未读数，设置为 YES，表明不需要计入会话未读数（5.3.425 及以上版本支持） isExcludedFromLastMessage 参数类型 : bool 参数描述：消息是否不计入会话 lastMsg：默认为 NO，表明需要计入会话 lastMsg，设置为 YES，表明不需要计入会话 lastMsg（5.4.666 及以上版本支持） messageFromWeb 参数类型 : String 参数描述：WEB端传递到flutter端的文本数据 id 参数类型 : String 参数描述：plugin自己维护的id，在onProgressListener的监听中才返回 needReadReceipt 参数类型 : bool 参数描述：消息是否需要已读回执（6.1 以上版本有效，需要您购买旗舰版套餐） 群消息在使用该功能之前，需要先到 IM 控制台设置已读回执支持的群类型 toJson 参数类型 : Map toJson() 参数描述：返回消息属性的JSON格式 "},"api/guan-jian-lei/message/v2timvideoelem.html":{"url":"api/guan-jian-lei/message/v2timvideoelem.html","title":"V2TimVideoElem","summary":"视频消息单体属性","keywords":"","body":"V2TimVideoElem 关键类描述 视频消息单体属性 参数 videoPath 参数类型 : String 参数描述：视频文件路径（只有发送方才能获取到） UUID 参数类型 : String 参数描述：视频 ID,内部标识，可用于外部缓存 key videoSize 参数类型 : int 参数描述：视频大小 duration 参数类型 : int 参数描述：视频时长 snapshotPath 参数类型 : String 参数描述：封面截图文件路径（只有发送方才能获取到） snapshotUUID 参数类型 : String 参数描述：封面截图 ID,内部标识，可用于外部缓存 key snapshotSize 参数类型 : int 参数描述：截图 size snapshotWidth 参数类型 : int 参数描述：封面截图宽 snapshotHeight 参数类型 : int 参数描述：封面截图高 videoUrl 参数类型 : String 参数描述：视频文件的 URL 下载地址 snapshotUrl 参数类型 : String 参数描述：封面截图的 URL 下载地址 localVideoUrl 参数类型 : String 参数描述：视频下载后的本地路径 localSnapshotUrl 参数类型 : String 参数描述：封面截图下载后的本地路径 toJson 参数类型 : Map toJson() 参数描述：返回视频消息单体属性的JSON格式 "},"api/guan-jian-lei/message/v2timtextelem.html":{"url":"api/guan-jian-lei/message/v2timtextelem.html","title":"V2TimTextElem","summary":"文本消息单体属性","keywords":"","body":"V2TimTextElem 关键类描述 文本消息单体属性 参数 text 参数类型 : String 参数描述：消息文本 toJson 参数类型 : Map toJson() 参数描述：返回文本消息单体属性的JSON格式 "},"api/guan-jian-lei/message/v2timsoundelem.html":{"url":"api/guan-jian-lei/message/v2timsoundelem.html","title":"V2TimSoundElem","summary":"语音消息单体属性","keywords":"","body":"V2TimSoundElem 关键类描述 语音消息单体属性 参数 path 参数类型 : String 参数描述：语音文件路径（只有发送方才能获取到） UUID 参数类型 : String 参数描述：语音消息内部 ID dataSize 参数类型 : int 参数描述：语音数据大小 duration 参数类型 : int 参数描述：语音长度（秒） url 参数类型 : String 参数描述：语音文件的 URL 下载地址 localUrl 参数类型 : String 参数描述：语音下载后的本地路径 toJson 参数类型 : Map toJson() 参数描述：返回语音消息单体属性的JSON格式 "},"api/guan-jian-lei/message/offlinepushinfo.html":{"url":"api/guan-jian-lei/message/offlinepushinfo.html","title":"OfflinePushInfo","summary":"消息的离线推送信息","keywords":"","body":"OfflinePushInfo 关键类描述 消息的离线推送信息 参数 title 参数类型 : String 参数描述：离线推送展示的标题。 desc 参数类型 : String 参数描述：离线推送展示的内容。 自定义消息进行离线推送，必须设置此字段内容。 disablePush 参数类型 : bool 参数描述：是否关闭推送（默认开启推送）。 ext 参数类型 : String 参数描述：离线推送扩展字段 iOS: 收到离线推送的一方可以在 UIApplicationDelegate -> didReceiveRemoteNotification -> userInfo 拿到这个字段，用这个字段可以做 UI 跳转逻辑 iOSSound 参数类型 : String 参数描述：离线推送声音设置（仅对 iOS 生效） 当 iOSSound = kIOSOfflinePushNoSound，表示接收时不会播放声音。 当 iOSSound = kIOSOfflinePushDefaultSound，表示接收时播放系统声音。 如果要自定义 iOSSound，需要先把语音文件链接进 Xcode 工程，然后把语音文件名（带后缀）设置给 iOSSound。 ignoreIOSBadge 参数类型 : bool 参数描述：离线推送忽略 badge 计数（仅对 iOS 生效）， 如果设置为 YES，在 iOS 接收端，这条消息不会使 APP 的应用图标未读计数增加。 androidOPPOChannelID 参数类型 : String 参数描述：离线推送设置 OPPO 手机推送的 ChannelID, 仅支持 8.0 系统及以上。（应用配置接入 OPPO 推送的必须要设置） toJson 参数类型 : Map toJson() 参数描述：返回消息的离线推送信息的JSON格式 "},"api/guan-jian-lei/message/v2timofflinepushinfo.html":{"url":"api/guan-jian-lei/message/v2timofflinepushinfo.html","title":"V2TimOfflinePushInfo","summary":"自定义消息离线推送","keywords":"","body":"V2TimOfflinePushInfo 关键类描述 自定义消息离线推送 参数 title 参数类型 : String 参数描述：离线推送展示的标题。 desc 参数类型 : String 参数描述：离线推送展示的内容。 自定义消息进行离线推送，必须设置此字段内容。 disablePush 参数类型 : bool 参数描述：是否关闭推送（默认开启推送）。 iOSSound 参数类型 : String 参数描述：离线推送声音设置（仅对 iOS 生效） 当 iOSSound = kIOSOfflinePushNoSound，表示接收时不会播放声音。 当 iOSSound = kIOSOfflinePushDefaultSound，表示接收时播放系统声音。 如果要自定义 iOSSound，需要先把语音文件链接进 Xcode 工程，然后把语音文件名（带后缀）设置给 iOSSound。 ignoreIOSBadge 参数类型 : bool 参数描述：离线推送忽略 badge 计数（仅对 iOS 生效）， 如果设置为 YES，在 iOS 接收端，这条消息不会使 APP 的应用图标未读计数增加。 androidOPPOChannelID 参数类型 : String 参数描述：离线推送设置 OPPO 手机推送的 ChannelID, 仅支持 8.0 系统及以上。（应用配置接入 OPPO 推送的必须要设置） androidVIVOClassification 参数类型 : String 参数描述：离线推送设置 vivo 手机推送消息的类型，0：运营消息，1：系统消息。默认取值为 1。（应用配置接入 vivo 推送可以根据需要修改设置） androidSound 参数类型 : String 参数描述：离线推送声音设置（仅对 Android 生效, 仅 imsdk 6.1 及以上版本支持） 只有华为和谷歌手机支持设置铃音提示，小米铃音设置请您参照：https://dev.mi.com/console/doc/detail?pId=1278%23\\_3\\_0 AndroidSound: Android 工程里 raw 目录中的铃声文件名，不需要后缀名。 toJson 参数类型 : Map toJson() 参数描述：返回自定义消息离线推送的JSON格式 "},"api/guan-jian-lei/message/v2timmergerelem.html":{"url":"api/guan-jian-lei/message/v2timmergerelem.html","title":"V2TimMergerElem","summary":"合并消息单体属性","keywords":"","body":"V2TimMergerElem 关键类描述 合并消息单体属性 参数 isLayersOverLimit 参数类型 : bool 参数描述：合并嵌套层数是否超过 100 层 合并消息里面又包含合并消息我们称之为合并嵌套，合并嵌套层数不能超过 100 层。 如果超过限制，layersOverLimit 会返回true，title 和 abstractList 会返回 null，downloadMergerMessage 会返回 ERR_MERGER_MSG_LAYERS_OVER_LIMIT 错误码。 title 参数类型 : String 参数描述：合并消息 title abstractList 参数类型 : List 参数描述：合并消息摘要列表 toJson 参数类型 : Map toJson() 参数描述：返回合并消息单体属性的JSON格式 "},"api/guan-jian-lei/message/v2timlocationelem.html":{"url":"api/guan-jian-lei/message/v2timlocationelem.html","title":"V2TimLocationElem","summary":"地理位置单体属性","keywords":"","body":"V2TimLocationElem 关键类描述 地理位置单体属性 参数 desc 参数类型 : String 参数描述：地理位置描述信息 longitude 参数类型 : double 参数描述：经度，发送消息时设置 latitude 参数类型 : double 参数描述：纬度，发送消息时设置 toJson 参数类型 : Map toJson() 参数描述：返回地理位置单体属性的JSON格式 "},"api/guan-jian-lei/message/v2timfileelem.html":{"url":"api/guan-jian-lei/message/v2timfileelem.html","title":"V2TimFileElem","summary":"文件消息单体属性","keywords":"","body":"V2TimFileElem 关键类描述 文件消息单体属性 参数 path 参数类型 : String 参数描述：文件路径（只有发送方才能获取到） fileName 参数类型 : String 参数描述：文件显示名称 UUID 参数类型 : String 参数描述：文件 ID,内部标识，可用于外部缓存 key url 参数类型 : String 参数描述：文件的 URL 下载地址 fileSize 参数类型 : int 参数描述：文件大小 localUrl 参数类型 : String 参数描述：文件下载后的本地路径 toJson 参数类型 : Map toJson() 参数描述：返回文件消息单体属性的JSON格式 "},"api/guan-jian-lei/message/v2timfaceelem.html":{"url":"api/guan-jian-lei/message/v2timfaceelem.html","title":"V2TimFaceElem","summary":"表情消息单体属性","keywords":"","body":"V2TimFaceElem 关键类描述 表情消息单体属性 参数 index 参数类型 : String 参数描述：表情索引，用户自定义 表情消息由 TIMFaceElem 定义，SDK 并不提供表情包，如果开发者有表情包，可使用 index 存储表情在表情包中的索引，由用户自定义，或者直接使用 data 存储表情二进制信息以及字符串 key，都由用户自定义，SDK 内部只做透传。 index 和 data 只需要传入一个即可，ImSDK 只是透传这两个数据。 data 参数类型 : String 参数描述：额外数据，用户自定义 toJson 参数类型 : Map toJson() 参数描述：返回表情消息单体属性的JSON格式 "},"api/guan-jian-lei/message/v2timcustomelem.html":{"url":"api/guan-jian-lei/message/v2timcustomelem.html","title":"V2TimCustomElem","summary":"自定义消息单体属性","keywords":"","body":"V2TimCustomElem 关键类描述 自定义消息单体属性 参数 data 参数类型 : String 参数描述：自定义消息二进制数据 desc 参数类型 : String 参数描述：自定义消息描述信息 extension 参数类型 : String 参数描述：自定义消息扩展字段 toJson 参数类型 : Map toJson() 参数描述：返回自定义消息单体属性的JSON格式 "},"api/guan-jian-lei/message/v2timconversationresult.html":{"url":"api/guan-jian-lei/message/v2timconversationresult.html","title":"V2TimConversationResult","summary":"会话列表拉取结果","keywords":"","body":"V2TimConversationResult 关键类描述 会话列表拉取结果 参数 nextSeq 参数类型 : String 参数描述：分页拉取的游标 isFinished 参数类型 : bool 参数描述：会话列表是否已经拉取完毕 true:拉取完毕 false:还有会话需要继续拉取 conversationList 参数类型 : ListV2TimConversation > 参数描述：会话列表 toJson 参数类型 : Map toJson() 参数描述：返回会话列表拉取结果的JSON格式 "},"api/guan-jian-lei/message/v2timconversation.html":{"url":"api/guan-jian-lei/message/v2timconversation.html","title":"V2TimConversation","summary":"会话对象属性","keywords":"","body":"V2TimConversation 关键类描述 会话对象属性 参数 conversationID 参数类型 : String 参数描述：会话唯一 ID，如果是 C2C 单聊，组成方式为 c2c_userID，如果是群聊，组成方式为 group_groupID type 参数类型 : int 参数描述：如果会话类型为群聊，groupType 为当前群类型，否则为 null 1:单聊 2:群聊 userID 参数类型 : String 参数描述：如果会话类型为 C2C 单聊，userID 会存储对方的用户ID，否则为 null groupID 参数类型 : String 参数描述：如果会话类型为群聊，groupID 会存储当前群的群 ID，否则为 null showName 参数类型 : String 参数描述：会话展示名称（群组：群名称 >> 群 ID；C2C：对方好友备注 >> 对方昵称 >> 对方的 userID） faceUrl 参数类型 : String 参数描述：会话展示头像（群组：群头像；C2C：对方头像） groupType 参数类型 : String 参数描述：如果会话类型为群聊，groupType 为当前群类型，否则为 null unreadCount 参数类型 : int 参数描述：话未读消息数量,直播群（AVChatRoom）不支持未读计数，默认为 0 lastMessage 参数类型 : V2TimMessage 参数描述：会话最后一条消息 draftText 参数类型 : String 参数描述：草稿信息，设置草稿信息请调用 setConversationDraft 接口 draftTimestamp 参数类型 : int 参数描述：草稿编辑时间，草稿设置的时候自动生成 isPinned 参数类型 : bool 参数描述：是否置顶 recvOpt 参数类型 : int 参数描述：消息接收选项 0:在线正常接收消息，离线时会进行离线推送 1:不会接收到消息，离线不会有推送通知 2:在线正常接收消息，离线不会有推送通知 groupAtInfoList 参数类型 : ListV2TimGroupAtInfo > 参数描述：用户头像 orderkey 参数类型 : int 参数描述：排序字段 toJson 参数类型 : Map toJson() 参数描述：返回会话对象属性的JSON格式 "},"api/guan-jian-lei/message/v2timsdklistener-1.html":{"url":"api/guan-jian-lei/message/v2timsdklistener-1.html","title":"V2TimMsgCreateInfoResult","summary":"创建信息结果","keywords":"","body":"V2TimMsgCreateInfoResult 关键类描述 创建信息结果 参数 id 参数类型 : String 参数描述：创建信息的 ID messageInfo 参数类型 : V2TimMessage 参数描述：创建信息的内容 toJson 参数类型 : Map toJson() 参数描述：返回创建信息结果的JSON格式 "},"api/guan-jian-lei/message/v2timreceivemessageoptinfo.html":{"url":"api/guan-jian-lei/message/v2timreceivemessageoptinfo.html","title":"V2TimReceiveMessageOptInfo","summary":"用户接收消息设置的属性","keywords":"","body":"V2TimReceiveMessageOptInfo 关键类描述 用户接收消息设置的属性 参数 userID 参数类型 : String 参数描述：用户 ID c2CReceiveMessageOpt 参数类型 : int 参数描述：消息接收选项用户接收消息设置的属性 0:在线正常接收消息，离线时会进行离线推送 1:不会接收到消息，离线不会有推送通知 2:在线正常接收消息，离线不会有推送通知 toJson 参数类型 : Map toJson() 参数描述：返回用户接收消息设置的属性的JSON格式 "},"api/guan-jian-lei/message/v2timsignalinginfo.html":{"url":"api/guan-jian-lei/message/v2timsignalinginfo.html","title":"V2TimSignalingInfo","summary":"信令消息属性","keywords":"","body":"V2TimSignalingInfo 关键类描述 信令消息属性 参数 inviteID 参数类型 : String 参数描述：邀请用户 ID inviter 参数类型 : String 参数描述：邀请人 ID inviteeList 参数类型 : List 参数描述：邀请列表 groupID 参数类型 : String 参数描述：邀请群组 ID data 参数类型 : String 参数描述：邀请信息 timeout 参数类型 : int 参数描述：邀请超时时间 actionType 参数类型 : int 参数描述：邀请状态类型 1:邀请方发起邀请 2:邀请方取消邀请 3:被邀请方接受邀请 4:被邀请方拒绝邀请 5:邀请超时 isOnlineUserOnly 参数类型 : bool 参数描述：是否只邀请在线用户，ios不回返回这条 offlinePushInfo 参数类型 : V2TimOfflinePushInfo 参数描述：离线推送信息，ios不回返回这条 toJson 参数类型 : Map toJson() 参数描述：返回信令消息属性的JSON格式 "},"api/guan-jian-lei/message/v2timmessagesearchresultitem.html":{"url":"api/guan-jian-lei/message/v2timmessagesearchresultitem.html","title":"V2TimMessageSearchResultItem","summary":"会话搜索结果单体属性","keywords":"","body":"V2TimMessageSearchResultItem 关键类描述 会话搜索结果单体属性 参数 conversationID 参数类型 : String 参数描述：会话ID messageCount 参数类型 : int 参数描述：当前会话一共搜索到了多少条符合要求的消息 messageList 参数类型 : ListV2TimMessage > 参数描述：满足搜索条件的消息列表 如果您本次搜索【指定会话】，那么 messageList 中装载的是本会话中所有满足搜索条件的消息列表。 如果您本次搜索【全部会话】，那么 messageList 中装载的消息条数会有如下两种可能： 如果某个会话中匹配到的消息条数 > 1，则 messageList 为空，您可以在 UI 上显示“ messageCount 条相关记录”。 如果某个会话中匹配到的消息条数 = 1，则 messageList 为匹配到的那条消息，您可以在 UI 上显示之，并高亮匹配关键词。 toJson 参数类型 : Map toJson() 参数描述：返回会话搜索结果单体属性的JSON格式 "},"api/guan-jian-lei/message/v2timmessagesearchresult.html":{"url":"api/guan-jian-lei/message/v2timmessagesearchresult.html","title":"V2TimMessageSearchResult","summary":"会话搜索结果","keywords":"","body":"V2TimMessageSearchResult 关键类描述 会话搜索结果 参数 totalCount 参数类型 : String 参数描述：如果您本次搜索【指定会话】，那么返回满足搜索条件的消息总数量； 如果您本次搜索【全部会话】，那么返回满足搜索条件的消息所在的所有会话总数量。 messageSearchResultItems 参数类型 : ListV2TimMessageSearchResultItem > 参数描述：如果您本次搜索【指定会话】，那么返回结果列表只包含该会话结果； 如果您本次搜索【全部会话】，那么对满足搜索条件的消息根据会话 ID 分组，分页返回分组结果； toJson 参数类型 : Map toJson() 参数描述：返回会话搜索结果的JSON格式 "},"api/guan-jian-lei/message/v2timmessagesearchparam.html":{"url":"api/guan-jian-lei/message/v2timmessagesearchparam.html","title":"V2TimMessageSearchParam","summary":"消息搜索参数","keywords":"","body":"V2TimMessageSearchParam 关键类描述 消息搜索参数 参数 conversationID 参数类型 : String 参数描述：搜索“全部会话”还是搜索“指定的会话”： 如果设置 conversationID == null，代表搜索全部会话。 如果设置 conversationID != null，代表搜索指定会话。 keywordList 参数类型 : List 参数描述：关键字列表，最多支持5个。当消息发送者以及消息类型均未指定时，关键字列表必须非空；否则，关键字列表可以为空。 type 参数类型 : int 参数描述： userIDList 参数类型 : List 参数描述：指定 userID 发送的消息，最多支持5个。 messageTypeList 参数类型 : List 参数描述：指定搜索的消息类型集合，传 null 表示搜索支持的全部类型消息（V2TIMFaceElem 和 V2TIMGroupTipsElem 不支持）取值详情见MessageElemType。 searchTimePosition 参数类型 : int 参数描述：搜索的起始时间点。默认为0即代表从现在开始搜索。UTC 时间戳，单位：秒 searchTimePeriod 参数类型 : int 参数描述：从起始时间点开始的过去时间范围，单位秒。默认为0即代表不限制时间范围，传24x60x60代表过去一天。 pageSize 参数类型 : int 参数描述：每页结果数量：用于分页展示查找结果，如不希望分页可将其设置成 0，但如果结果太多，可能会带来性能问题。默认为100。 pageIndex 参数类型 : int 参数描述：分页的页号：用于分页展示查找结果，从零开始起步。 比如：您希望每页展示 10 条结果，请按照如下规则调用： 首次调用：通过参数 pageSize = 10, pageIndex = 0 调用 searchLocalMessage，从结果回调中的 totalCount 可以获知总共有多少条结果。 计算页数：可以获知总页数：totalPage = (totalCount % pageSize == 0) ? (totalCount / pageSize) : (totalCount / pageSize + 1) 。 再次调用：可以通过指定参数 pageIndex （pageIndex toJson 参数类型 : Map toJson() 参数描述：返回消息搜索参数的JSON格式 "},"api/guan-jian-lei/message/v2timmessagereceipt.html":{"url":"api/guan-jian-lei/message/v2timmessagereceipt.html","title":"V2TimMessageReceipt","summary":"消息已读回执","keywords":"","body":"V2TimMessageReceipt 关键类描述 消息已读回执 参数 userID 参数类型 : String 参数描述：发送次消息的用户id timestamp 参数类型 : int 参数描述：C2C 对端用户标记会话已读的时间 groupID 参数类型 : String 参数描述：群 ID msgID 参数类型 : String 参数描述：消息 ID readCount 参数类型 : int 参数描述：群消息已读人数 unreadCount 参数类型 : int 参数描述：群消息未读人数 toJson 参数类型 : Map toJson() 参数描述：返回消息已读回执的JSON格式 "},"api/guan-jian-lei/message/v2timmessagechangeinfo.html":{"url":"api/guan-jian-lei/message/v2timmessagechangeinfo.html","title":"V2TimMessageChangeInfo","summary":"消息修改信息","keywords":"","body":"V2TimMessageChangeInfo 关键类描述 消息修改信息 参数 code 参数类型 : int 参数描述：修改结果码 desc 参数类型 : String 参数描述：描述信息 message 参数类型 : V2TimMessage 参数描述：修改后的信息 toJson 参数类型 : Map toJson() 参数描述：返回消息修改信息的JSON格式 "},"api/guan-jian-lei/topic/":{"url":"api/guan-jian-lei/topic/","title":"Topic","summary":"话题相关类型","keywords":"","body":"Topic Topic包含内容说明 话题相关类型 Topic包含类型目录 类型名称 描述 V2TimTopicInfo 话题信息属性 V2TIMTopicInfoResult 查询话题信息结果 "},"api/guan-jian-lei/topic/v2timtopicinfo.html":{"url":"api/guan-jian-lei/topic/v2timtopicinfo.html","title":"V2TimTopicInfo","summary":"话题信息属性","keywords":"","body":"V2TimTopicInfo 关键类描述 话题信息属性 参数 topicID 参数类型 : String 参数描述：话题 ID topicName 参数类型 : String 参数描述：话题名称 topicFaceUrl 参数类型 : String 参数描述：话题头像 introduction 参数类型 : String 参数描述：话题介绍 notification 参数类型 : String 参数描述：话题公告 isAllMute 参数类型 : bool 参数描述：话题全员禁言 selfMuteTime 参数类型 : int 参数描述：当前用户在话题中的禁言时间 customString 参数类型 : String 参数描述：话题自定义字段 recvOpt 参数类型 : int 参数描述：话题消息接收选项，修改话题消息接收选项请调用 setGroupReceiveMessageOpt 接口 0:在线正常接收消息，离线时会进行 APNs 推送 1:不会接收到消息，离线不会有推送通知 2:在线正常接收消息，离线不会有推送通知 draftText 参数类型 : String 参数描述：话题草稿 unreadCount 参数类型 : int 参数描述：话题消息未读数量 lastMessage 参数类型 : V2TimMessage 参数描述：话题最新消息 groupAtInfoList 参数类型 : ListV2TimGroupAtInfo > 参数描述：话题 at 信息列表 toJson 参数类型 : Map toJson() 参数描述：返回话题信息属性的JSON格式 "},"api/guan-jian-lei/topic/v2timtopicinforesult.html":{"url":"api/guan-jian-lei/topic/v2timtopicinforesult.html","title":"V2TIMTopicInfoResult","summary":"查询话题信息结果","keywords":"","body":"V2TIMTopicInfoResult 关键类描述 查询话题信息结果 参数 errorCode 参数类型 : int 参数描述：结果 0：成功；非0：失败 errorMessage 参数类型 : String 参数描述：如果获取失败，会返回错误信息 topicInfo 参数类型 : V2TimTopicInfo 参数描述：如果获取成功，会返回对应的话题信息 toJson 参数类型 : Map toJson() 参数描述：返回查询话题信息结果的JSON格式 "},"api/guan-jian-lei/listener/":{"url":"api/guan-jian-lei/listener/","title":"Listener","summary":"监听器相关类型","keywords":"","body":"Listener Listener包含内容说明 监听器相关类型 Listener包含类型目录 类型名称 描述 V2TimSDKListener SDK的回调 V2TimGroupListener 群组信息的监听器回调 V2TimConversationListener 聊天的监听器回调 V2TimFriendshipListener 资料关系链回调 V2TimAdvancedMsgListener 高级消息监听器 V2TimSignalingListener 信令消息监听器 V2TimSimpleMsgListener IMSDK 基本消息回调 "},"api/guan-jian-lei/listener/v2timsdklistener.html":{"url":"api/guan-jian-lei/listener/v2timsdklistener.html","title":"V2TimSDKListener","summary":"SDK的回调","keywords":"","body":"V2TimSDKListener 关键类描述 SDK的监听器回调 参数 onConnectFailed 参数类型 : ErrorCallback 参数描述：连接失败的回调函数 onConnectSuccess 参数类型 : VoidCallback 参数描述：连接成功的回调函数 onConnecting 参数类型 : VoidCallback 参数描述：正在连接的回调函数 onKickedOffline 参数类型 : VoidCallback 参数描述：被踢下线的回调函数 onSelfInfoUpdated 参数类型 : V2TimUserFullInfoCallback 参数描述：用户信息更新的回调函数 onUserSigExpired 参数类型 : VoidCallback 参数描述：用户凭证过期的回调函数 onUserStatusChanged 参数类型 : OnUserStatusChanged 参数描述：用户状态改变的回调函数 "},"api/guan-jian-lei/listener/v2timgrouplistener.html":{"url":"api/guan-jian-lei/listener/v2timgrouplistener.html","title":"V2TimGroupListener","summary":"群组信息的监听器回调","keywords":"","body":"V2TimGroupListener 关键类描述 群组信息的监听器回调 参数 onApplicationProcessed 参数类型 : OnApplicationProcessedCallback 参数描述：加群请求已经被群主或管理员处理了（只有申请人能够收到） onGrantAdministrator 参数类型 : OnGrantAdministratorCallback 参数描述：指定管理员身份 onGroupAttributeChanged 参数类型 : OnGroupAttributeChangedCallback 参数描述：群组属性被修改的回调函数 onGroupCreated 参数类型 : OnGroupCreatedCallback 参数描述：创建群（主要用于多端同步） onGroupDismissed 参数类型 : OnGroupDismissedCallback 参数描述：群组被解散（全员能收到） onGroupInfoChanged 参数类型 : OnGroupInfoChangedCallback 参数描述：群信息被修改（全员能收到） onGroupRecycled 参数类型 : OnGroupRecycledCallback 参数描述：群组被回收（全员能收到） onMemberEnter 参数类型 : OnMemberEnterCallback 参数描述：有用户进入群（全员能够收到） onMemberInfoChanged 参数类型 : OnMemberInfoChangedCallback 参数描述：群成员信息被修改（全员能收到） onMemberInvited 参数类型 : OnMemberInvitedCallback 参数描述：有用户被拉入某群（全员能够收到） onMemberKicked 参数类型 : OnMemberKickedCallback 参数描述：有用户被踢出某群（全员能够收到） onMemberLeave 参数类型 : OnMemberLeaveCallback 参数描述：有用户离开群（全员能够收到） onQuitFromGroup 参数类型 : OnQuitFromGroupCallback 参数描述：主动退出群组（主要用于多端同步，直播群（AVChatRoom）不支持） onReceiveJoinApplication 参数类型 : OnReceiveJoinApplicationCallback 参数描述：有新的加群请求（只有群主或管理员会收到） onReceiveRESTCustomData 参数类型 : OnReceiveRESTCustomDataCallback 参数描述：收到 RESTAPI 下发的自定义系统消息 onRevokeAdministrator 参数类型 : OnRevokeAdministratorCallback 参数描述：取消管理员身份 "},"api/guan-jian-lei/listener/v2timconversationlistener.html":{"url":"api/guan-jian-lei/listener/v2timconversationlistener.html","title":"V2TimConversationListener","summary":"聊天的监听器回调","keywords":"","body":"V2TimConversationListener 关键类描述 聊天的监听器回调 参数 onSyncServerStart 参数类型 : VoidCallback 参数描述：同步服务开始的回调函数 onSyncServerFinish 参数类型 : VoidCallback 参数描述：同步服务完成的回调函数 onSyncServerFailed 参数类型 : VoidCallback 参数描述：同步服务失败的回调函数 onNewConversation 参数类型 : OnNewConversation 参数描述：新会话的回调函数 onConversationChanged 参数类型 : OnConversationChangedCallback 参数描述：会话刷新的回调函数 onTotalUnreadMessageCountChanged 参数类型 : OnTotalUnreadMessageCountChanged 参数描述：未读数改变的回调函数 "},"api/guan-jian-lei/listener/v2timfriendshiplistener.html":{"url":"api/guan-jian-lei/listener/v2timfriendshiplistener.html","title":"V2TimFriendshipListener","summary":"资料关系链回调","keywords":"","body":"V2TimFriendshipListener 关键类描述 资料关系链回调 参数 onFriendApplicationListAdded 参数类型 : OnFriendApplicationListAddedCallback 参数描述：好友申请新增通知 两种情况会收到这个回调： 自己申请加别人好友 别人申请加自己好友 onFriendApplicationListDeleted 参数类型 : OnFriendApplicationListDeletedCallback 参数描述：好友申请删除通知 四种情况会收到这个回调： 调用 deleteFriendApplication 主动删除好友申请 调用 refuseFriendApplication 拒绝好友申请 调用 acceptFriendApplication 同意好友申请 申请加别人好友被拒绝 onFriendApplicationListRead 参数类型 : OnFriendApplicationListReadCallback 参数描述：好友申请已读通知，如果调用 setFriendApplicationRead 设置好友申请列表已读，会收到这个回调（主要用于多端同步） onFriendListAdded 参数类型 : OnFriendListAddedCallback 参数描述：好友新增通知 onFriendListDeleted 参数类型 : OnFriendListDeletedCallback 参数描述：好友删除通知 两种情况会收到这个回调： 自己删除好友（单向和双向删除都会收到回调） 好友把自己删除（双向删除会收到） onBlackListAdd 参数类型 : OnBlackListAddCallback 参数描述：黑名单新增通知 onBlackListDeleted 参数类型 : OnBlackListDeletedCallback 参数描述：黑名单删除通知 onFriendInfoChanged 参数类型 : OnFriendInfoChangedCallback 参数描述：好友资料变更通知 "},"api/guan-jian-lei/listener/v2timadvancedmsglistener.html":{"url":"api/guan-jian-lei/listener/v2timadvancedmsglistener.html","title":"V2TimAdvancedMsgListener","summary":"高级消息监听器","keywords":"","body":"V2TimAdvancedMsgListener 关键类描述 高级消息监听器 参数 onRecvC2CReadReceipt 参数类型 : OnRecvC2CReadReceiptCallback 参数描述：C2C 对端用户会话已读通知（如果对端用户调用 markC2CMessageAsRead 接口，自己会收到该回调，回调只会携带对端 userID 和对端已读 timestamp 信息） onRecvMessageRevoked 参数类型 : OnRecvMessageRevokedCallback 参数描述：收到消息撤回 onRecvNewMessage 参数类型 : OnRecvNewMessageCallback 参数描述：收到新消息 onSendMessageProgress 参数类型 : OnSendMessageProgressCallback 参数描述：上传消息进度事件 onRecvMessageModified 参数类型 : OnRecvMessageModified 参数描述：消息内容被修改 onRecvMessageReadReceipts 参数类型 : OnRecvMessageReadReceipts 参数描述：消息已读回执通知（如果自己发的消息支持已读回执，消息接收端调用了 sendMessageReadReceipts 接口，自己会收到该回调) "},"api/guan-jian-lei/listener/v2timsignalinglistener.html":{"url":"api/guan-jian-lei/listener/v2timsignalinglistener.html","title":"V2TimSignalingListener","summary":"信令消息监听器","keywords":"","body":"V2TimSignalingListener 关键类描述 信令消息监听器 参数 onReceiveNewInvitation 参数类型 : OnReceiveNewInvitationCallback 参数描述：收到邀请的回调 onInviteeAccepted 参数类型 : OnInviteeAcceptedCallback 参数描述：被邀请者接受邀请 onInviteeRejected 参数类型 : OnInviteeRejectedCallback 参数描述：被邀请者拒绝邀请 onInvitationCancelled 参数类型 : OnInvitationCancelledCallback 参数描述：邀请被取消 onInvitationTimeout 参数类型 : OnInvitationTimeoutCallback 参数描述：邀请超时 "},"api/guan-jian-lei/listener/v2timsimplemsglistener.html":{"url":"api/guan-jian-lei/listener/v2timsimplemsglistener.html","title":"V2TimSimpleMsgListener","summary":"简单消息监听器","keywords":"","body":"V2TimSimpleMsgListener 关键类描述 简单消息监听器 参数 onRecvC2CCustomMessage 参数类型 : OnRecvC2CCustomMessageCallback 参数描述：收到 C2C 自定义（信令）消息 onRecvC2CTextMessage 参数类型 : OnRecvC2CTextMessageCallback 参数描述：收到 C2C 文本消息 onRecvGroupCustomMessage 参数类型 : OnRecvGroupCustomMessageCallback 参数描述：收到群自定义（信令）消息 onRecvGroupTextMessage 参数类型 : OnRecvGroupCustomMessageCallback 参数描述：收到群文本消息 "},"api/guan-jian-lei/v2timvaluecallback.html":{"url":"api/guan-jian-lei/v2timvaluecallback.html","title":"V2TimValueCallback","summary":"携带请求结果与返回数据的类","keywords":"","body":"V2TimValueCallback 关键类描述 携带请求结果与返回数据的类 参数 code 参数类型 : int 参数描述：请求结果的错误码 data 参数类型 : T（根据不同接口而不同） 参数描述：请求结果携带的数据 desc 参数类型 : String 参数描述：请求结果的描述 toJson 参数类型 : Map toJson() 参数描述：返回携带请求结果与返回数据的类的JSON格式 "},"api/guan-jian-lei/v2timcallback.html":{"url":"api/guan-jian-lei/v2timcallback.html","title":"V2TimCallback","summary":"只携带请求结果的回调函数","keywords":"","body":"V2TimCallback 关键类描述 只携带请求结果的回调函数 参数 code 参数类型 : int 参数描述：请求结果的错误码 desc 参数类型 : String 参数描述：请求结果的描述 toJson 参数类型 : Map toJson() 参数描述：返回只携带请求结果的类的JSON格式 "},"api/enums/":{"url":"api/enums/","title":"Enums","summary":"IM API中使用到的枚举类型","keywords":"","body":"Enums Enums包含内容说明 IM API中使用到的枚举类型 枚举类型目录 枚举类型名称 说明 AllowType 设置用户信息时中，是否允许其他人加你好友 ConversationType 会话类型 FriendApplicationTypeEnum 加好友类型 FriendResponseTypeEnum 建立好友关系时选择单向/双向好友关系 FriendTypeEnum 好友类型 GroupAddOptTypeEnum 群加群方式 GroupApplicationTypeEnum 入群申请类型 GroupMemberFilterTypeEnum 群成员过滤类型 GetGroupMessageReadMemberListFilter 获取群消息已读（未读）成员列表type GroupApplicationHandleResult 申请加群处理结果 GroupApplicationHandleStatus 加群申请处理状态 GroupChangeInfoType 群信息变化类型 GroupMemberRoleTypeEnum 群成员类型 GroupMemberRoleType 群成员类型 GroupTipsElemType 群通知消息类型 GroupType 群组类型 HistoryMessageGetType 获取历史消息类型 ListenerType 事件监听类型 LogLevelEnum 日志等级 MessageElemType 消息类型 MessagePriority 消息优先级 MessageStatus 消息状态 ReceiveMsgOptEnum 用户接收消息设置类型 SimpleMsgListenerType 简单消息监听器类型 UserStatusType 用户在线状态 V2TIM_IMAGE_TYPE 图片类型 V2TIMKeywordListMatchType 搜索信息匹配方法类型 "},"api/enums/allowtype.html":{"url":"api/enums/allowtype.html","title":"AllowType","summary":"设置用户信息时中，是否允许其他人加你好友","keywords":"","body":"AllowType 枚举类型介绍 设置用户信息时中，是否允许其他人加你好友 枚举值列表 枚举值名称 枚举类型描述 枚举值 V2TIM_FRIEND_ALLOW_ANY 允许任何人添加好友 0 V2TIM_FRIEND_NEED_CONFIRM 添加好友需要验证 1 V2TIM_FRIEND_DENY_ANY 拒绝任何人添加好友 2 "},"api/enums/conversationtype.html":{"url":"api/enums/conversationtype.html","title":"ConversationType","summary":"会话类型","keywords":"","body":"ConversationType 枚举类型介绍 会话类型 枚举值列表 枚举值名称 枚举类型描述 枚举值 V2TIM_C2C 单聊 1 V2TIM_GROUP 群聊 2 "},"api/enums/friendapplicationtypeenum.html":{"url":"api/enums/friendapplicationtypeenum.html","title":"FriendApplicationTypeEnum","summary":"加好友类型","keywords":"","body":"FriendApplicationTypeEnum 枚举类型介绍 加好友类型 枚举值列表 枚举值名称 枚举类型描述 枚举值 V2TIM_FRIEND_APPLICATION_COME_IN 别人发给我的加好友请求 1 V2TIM_FRIEND_APPLICATION_SEND_OUT 我发给别人的加好友请求 2 V2TIM_FRIEND_APPLICATION_BOTH 别人发给我的和我发给别人的加好友请求，仅在拉取时有效 3 "},"api/enums/friendresponsetypeenum.html":{"url":"api/enums/friendresponsetypeenum.html","title":"FriendResponseTypeEnum","summary":"建立好友关系时选择单向/双向好友关系","keywords":"","body":"FriendResponseTypeEnum 枚举类型介绍 建立好友关系时选择建立单向/双向好友关系 枚举值列表 枚举值名称 枚举类型描述 枚举值 V2TIM_FRIEND_ACCEPT_AGREE 同意添加单向好友 0 V2TIM_FRIEND_ACCEPT_AGREE_AND_ADD 同意并添加为双向好友 1 "},"api/enums/friendtypeenum.html":{"url":"api/enums/friendtypeenum.html","title":"FriendTypeEnum","summary":"好友类型","keywords":"","body":"FriendTypeEnum 枚举类型介绍 好友类型 枚举值列表 枚举值名称 枚举类型描述 枚举值 V2TIM_FRIEND_TYPE_SINGLE 单向好友 1 V2TIM_FRIEND_TYPE_BOTH 互为好友 2 "},"api/enums/groupaddopttypeenum.html":{"url":"api/enums/groupaddopttypeenum.html","title":"GroupAddOptTypeEnum","summary":"群加群方式","keywords":"","body":"GroupAddOptTypeEnum 枚举类型介绍 群加群方式 枚举值列表 枚举值名称 枚举类型描述 枚举值 V2TIM_GROUP_ADD_FORBID 禁止加群 0 V2TIM_GROUP_ADD_AUTH 需要管理员审批 1 V2TIM_GROUP_ADD_ANY 任何人可以加入 2 "},"api/enums/groupapplicationtypeenum.html":{"url":"api/enums/groupapplicationtypeenum.html","title":"GroupApplicationTypeEnum","summary":"入群申请类型","keywords":"","body":"GroupApplicationTypeEnum 枚举类型介绍 入群申请类型 枚举值列表 枚举值名称 枚举类型描述 枚举值 V2TIM_GROUP_APPLICATION_GET_TYPE_JOIN 申请入群 0 V2TIM_GROUP_APPLICATION_GET_TYPE_INVITE 被邀请入群 1 "},"api/enums/groupmemberfiltertypeenum.html":{"url":"api/enums/groupmemberfiltertypeenum.html","title":"GroupMemberFilterTypeEnum","summary":"群成员过滤类型","keywords":"","body":"GroupMemberFilterTypeEnum 枚举类型介绍 群成员过滤类型 枚举值列表 枚举值名称 枚举类型描述 枚举值 V2TIM_GROUP_MEMBER_FILTER_ALL 全部成员 0 V2TIM_GROUP_MEMBER_FILTER_OWNER 群主 1 V2TIM_GROUP_MEMBER_FILTER_ADMIN 管理员 2 V2TIM_GROUP_MEMBER_FILTER_COMMON 普通成员 4 "},"api/enums/getgroupmessagereadmemberlistfilter.html":{"url":"api/enums/getgroupmessagereadmemberlistfilter.html","title":"GetGroupMessageReadMemberListFilter","summary":"获取群消息已读（未读）成员列表type","keywords":"","body":"GetGroupMessageReadMemberListFilter 枚举类型介绍 获取群消息已读（未读）成员列表type 枚举值列表 枚举值名称 枚举类型描述 枚举值 V2TIM_GROUP_MESSAGE_READ_MEMBERS_FILTER_READ 已读成员 0 V2TIM_GROUP_MESSAGE_READ_MEMBERS_FILTER_UNREAD 未读成员 1 "},"api/enums/groupapplicationhandleresult.html":{"url":"api/enums/groupapplicationhandleresult.html","title":"GroupApplicationHandleResult","summary":"申请加群处理结果","keywords":"","body":"GroupApplicationHandleResult 枚举类型介绍 申请加群处理结果 枚举值列表 枚举值名称 枚举类型描述 枚举值 V2TIM_GROUP_APPLICATION_HANDLE_RESULT_REFUSE 拒绝申请 0 V2TIM_GROUP_APPLICATION_HANDLE_RESULT_AGREE 同意申请 1 "},"api/enums/groupapplicationhandlestatus.html":{"url":"api/enums/groupapplicationhandlestatus.html","title":"GroupApplicationHandleStatus","summary":"加群申请处理状态","keywords":"","body":"GroupApplicationHandleStatus 枚举类型介绍 加群申请处理状态 枚举值列表 枚举值名称 枚举类型描述 枚举值 V2TIM_GROUP_APPLICATION_HANDLE_STATUS_UNHANDLED 未处理 0 V2TIM_GROUP_APPLICATION_HANDLE_STATUS_HANDLED_BY_OTHER 被他人处理 1 V2TIM_GROUP_APPLICATION_HANDLE_STATUS_HANDLED_BY_SELF 被自己处理 2 "},"api/enums/groupchangeinfotype.html":{"url":"api/enums/groupchangeinfotype.html","title":"GroupChangeInfoType","summary":"群信息变化类型","keywords":"","body":"GroupChangeInfoType 枚举类型介绍 群信息变化类型 枚举值列表 枚举值名称 枚举类型描述 枚举值 V2TIM_GROUP_INFO_CHANGE_TYPE_NAME 群名修改 1 V2TIM_GROUP_INFO_CHANGE_TYPE_INTRODUCTION 群简介修改 2 V2TIM_GROUP_INFO_CHANGE_TYPE_NOTIFICATION 群公告修改 3 V2TIM_GROUP_INFO_CHANGE_TYPE_FACE_URL 群头像修改 4 V2TIM_GROUP_INFO_CHANGE_TYPE_OWNER 群主变更 5 V2TIM_GROUP_INFO_CHANGE_TYPE_CUSTOM 群自定义字段变更 6 V2TIM_GROUP_INFO_CHANGE_TYPE_SHUT_UP_ALL 全员禁言字段变更 7 "},"api/enums/groupmemberroletypeenum.html":{"url":"api/enums/groupmemberroletypeenum.html","title":"GroupMemberRoleTypeEnum","summary":"群成员类型","keywords":"","body":"GroupMemberRoleTypeEnum 枚举类型介绍 群成员类型 枚举值列表 枚举值名称 枚举类型描述 枚举值 V2TIM_GROUP_MEMBER_ROLE_MEMBER 群成员 1 V2TIM_GROUP_MEMBER_ROLE_ADMIN 群管理员 2 V2TIM_GROUP_MEMBER_ROLE_OWNER 群主 3 "},"api/enums/groupmemberroletype.html":{"url":"api/enums/groupmemberroletype.html","title":"GroupMemberRoleType","summary":"群成员类型","keywords":"","body":"GroupMemberRoleType 枚举类型介绍 群成员类型 枚举值列表 枚举值名称 枚举类型描述 枚举值 V2TIM_GROUP_MEMBER_ROLE_MEMBER 群成员 200 V2TIM_GROUP_MEMBER_ROLE_ADMIN 群管理员 300 V2TIM_GROUP_MEMBER_ROLE_OWNER 群主 400 "},"api/enums/grouptipselemtype.html":{"url":"api/enums/grouptipselemtype.html","title":"GroupTipsElemType","summary":"群通知消息类型","keywords":"","body":"GroupTipsElemType 枚举类型介绍 群通知消息类型 枚举值列表 枚举值名称 枚举类型描述 枚举值 V2TIM_GROUP_TIPS_TYPE_JOIN 主动入群（memberList 加入群组，非 Work 群有效） 1 V2TIM_GROUP_TIPS_TYPE_INVITE 被邀请入群（opMember 邀请 memberList 入群，Work 群有效） 2 V2TIM_GROUP_TIPS_TYPE_QUIT 退出群组 3 V2TIM_GROUP_TIPS_TYPE_KICKED 踢出群 (opMember 把 memberList 踢出群组) 4 V2TIM_GROUP_TIPS_TYPE_SET_ADMIN 设置管理员 (opMember 把 memberList 设置为管理员) 5 V2TIM_GROUP_TIPS_TYPE_CANCEL_ADMIN 取消管理员 (opMember 取消 memberList 管理员身份) 6 V2TIM_GROUP_TIPS_TYPE_GROUP_INFO_CHANGE 群资料变更 (opMember 修改群资料：groupName & introduction & notification & faceUrl & owner & custom) 7 V2TIM_GROUP_TIPS_TYPE_MEMBER_INFO_CHANGE 群成员资料变更 (opMember 修改群成员资料：muteTime) 8 "},"api/enums/grouptype.html":{"url":"api/enums/grouptype.html","title":"GroupType","summary":"群组类型","keywords":"","body":"GroupType 枚举类型介绍 群组类型 枚举值列表 枚举值名称 枚举类型描述 枚举值 AVChatRoom 直播群 AVChatRoom Meeting 会议群 Meeting Public 公开群 Public Work 工作群 Work Community 社群 Community "},"api/enums/historymsggettypeenum.html":{"url":"api/enums/historymsggettypeenum.html","title":"HistoryMsgGetTypeEnum","summary":"获取历史消息类型","keywords":"","body":"HistoryMsgGetTypeEnum 枚举类型介绍 获取历史消息类型 枚举值列表 枚举值名称 枚举类型描述 枚举值 V2TIM_GET_CLOUD_OLDER_MSG 获取云端更老的消息 1 V2TIM_GET_CLOUD_NEWER_MSG 获取云端更新的消息 2 V2TIM_GET_LOCAL_OLDER_MSG 获取本地更老的消息 3 V2TIM_GET_LOCAL_NEWER_MSG 获取本地更新的消息 4 "},"api/enums/listenertype.html":{"url":"api/enums/listenertype.html","title":"ListenerType","summary":"事件监听类型","keywords":"","body":"ListenerType 枚举类型介绍 事件监听类型 枚举值列表 枚举值名称 枚举类型描述 枚举值 advancedMsgListener 高级消息监听 advancedMsgListener conversationListener 会话监听 conversationListener friendListener 好友关系链监听 friendListener groupListener 群组监听 groupListener initSDKListener 初始化监听 initSDKListener signalingListener 信令监听 signalingListener simpleMsgListener 基本消息监听 simpleMsgListener "},"api/enums/loglevelenum.html":{"url":"api/enums/loglevelenum.html","title":"LogLevelEnum","summary":"日志登记","keywords":"","body":"LogLevelEnum 枚举类型介绍 日志登记 枚举值列表 枚举值名称 枚举类型描述 枚举值 V2TIM_LOG_NONE 无日志 0 V2TIM_LOG_ALL 全量日志 2 V2TIM_LOG_DEBUG 输出 DEBUG，INFO，WARNING，ERROR 级别的 log 3 V2TIM_LOG_INFO 输出 INFO，WARNING，ERROR 级别的 log 4 V2TIM_LOG_WARN 输出 WARNING，ERROR 级别的 log 5 V2TIM_LOG_ERROR 输出 ERROR 级别的 log 6 "},"api/enums/messageelemtype.html":{"url":"api/enums/messageelemtype.html","title":"MessageElemType","summary":"消息类型","keywords":"","body":"MessageElemType 枚举类型介绍 消息类型 枚举值列表 枚举值名称 枚举类型描述 枚举值 V2TIM_ELEM_TYPE_NONE 没有元素 0 V2TIM_ELEM_TYPE_TEXT 文本消息 1 V2TIM_ELEM_TYPE_CUSTOM 自定义消息 2 V2TIM_ELEM_TYPE_IMAGE 图片消息 3 V2TIM_ELEM_TYPE_SOUND 语音消息 4 V2TIM_ELEM_TYPE_VIDEO 视频消息 5 V2TIM_ELEM_TYPE_FILE 文件消息 6 V2TIM_ELEM_TYPE_LOCATION 地理位置消息 7 V2TIM_ELEM_TYPE_FACE 表情消息 8 V2TIM_ELEM_TYPE_GROUP_TIPS 群 Tips 消息（存消息列表） 9 V2TIM_ELEM_TYPE_MERGER 合并消息 10 "},"api/enums/messagepriority.html":{"url":"api/enums/messagepriority.html","title":"MessagePriority","summary":"消息优先级","keywords":"","body":"MessagePriority 枚举类型介绍 消息优先级 枚举值列表 枚举值名称 枚举类型描述 枚举值 V2TIM_PRIORITY_DEFAULT 默认为普通优先级 0 V2TIM_PRIORITY_HIGH 高优先级，一般用于礼物等重要消息 1 V2TIM_PRIORITY_NORMAL 普通优先级，一般用于普通消息 2 V2TIM_PRIORITY_LOW 低优先级，一般用于点赞消息 3 "},"api/enums/messagestatus.html":{"url":"api/enums/messagestatus.html","title":"MessageStatus","summary":"消息状态","keywords":"","body":"MessageStatus 枚举类型介绍 消息状态 枚举值列表 枚举值名称 枚举类型描述 枚举值 V2TIM_MSG_STATUS_SENDING 消息发送中 1 V2TIM_MSG_STATUS_SEND_SUCC 消息发送成功 2 V2TIM_MSG_STATUS_SEND_FAIL 消息发送失败 3 V2TIM_MSG_STATUS_HAS_DELETED 消息被删除 4 V2TIM_MSG_STATUS_LOCAL_IMPORTED 导入到本地的消息 5 V2TIM_MSG_STATUS_LOCAL_REVOKED 被撤销的消息 6 "},"api/enums/receivemsgoptenum.html":{"url":"api/enums/receivemsgoptenum.html","title":"ReceiveMsgOptEnum","summary":"用户接收消息设置类型","keywords":"","body":"ReceiveMsgOptEnum 枚举类型介绍 用户接收消息设置类型 枚举值列表 枚举值名称 枚举类型描述 枚举值 V2TIM_RECEIVE_MESSAGE 在线正常接收消息，离线时会进行离线推送 0 V2TIM_NOT_RECEIVE_MESSAGE 不会接收到消息 1 V2TIM_RECEIVE_NOT_NOTIFY_MESSAGE 在线正常接收消息，离线不会有推送通知 2 "},"api/enums/simplemsglistenertype.html":{"url":"api/enums/simplemsglistenertype.html","title":"SimpleMsgListenerType","summary":"简单消息监听器类型","keywords":"","body":"SimpleMsgListenerType 枚举类型介绍 简单消息监听器类型 枚举值列表 枚举值名称 枚举类型描述 枚举值 onRecvC2CTextMessage 监听文本消息 0 onRecvC2CCustomMessage 监听自定义消息 1 onRecvGroupTextMessage 监听群组文本消息 2 onRecvGroupCustomMessage 监听群组自定义消息 3 "},"api/enums/userstatustype.html":{"url":"api/enums/userstatustype.html","title":"UserStatusType","summary":"用户在线状态","keywords":"","body":"UserStatusType 枚举类型介绍 用户在线状态 枚举值列表 枚举值名称 枚举类型描述 枚举值 V2TIM_USER_STATUS_ONLINE 在线状态 1 V2TIM_USER_STATUS_OFFLINE 离线状态 2 V2TIM_USER_STATUS_UNLOGINED 未登录过 3 "},"api/enums/v2tim_image_type.html":{"url":"api/enums/v2tim_image_type.html","title":"V2TIM_IMAGE_TYPE","summary":"图片类型","keywords":"","body":"V2TIM_IMAGE_TYPE 枚举类型介绍 图片类型 枚举值列表 枚举值名称 枚举类型描述 枚举值 V2TIM_IMAGE_TYPE_ORIGIN 原始图片 0 V2TIM_IMAGE_TYPE_THUMB 小图片 1 V2TIM_IMAGE_TYPE_LARGE 大型图片 2 "},"api/enums/v2timkeywordlistmatchtype.html":{"url":"api/enums/v2timkeywordlistmatchtype.html","title":"V2TIMKeywordListMatchType","summary":"搜索信息匹配方法类型","keywords":"","body":"V2TIMKeywordListMatchType 枚举类型介绍 搜索信息匹配方法类型 枚举值列表 枚举值名称 枚举类型描述 枚举值 KEYWORD_LIST_MATCH_TYPE_OR 或 搜索 0 KEYWORD_LIST_MATCH_TYPE_AND 与 搜索 1 "},"api/callbacks/":{"url":"api/callbacks/","title":"Callbacks","summary":"IM API中使用到的回调函数类型","keywords":"","body":"Callbacks Callbacks包含内容说明 IM API中使用到的回调函数类型 回调函数目录 回调函数名称 说明 VoidCallback 无返回参数的回调函数 ErrorCallback 请求失败的回调函数 OnApplicationProcessedCallback 加群请求已经被群主或管理员处理了（只有申请人能够收到） OnBlackListAddCallback 黑名单列表新增用户的回调 OnBlackListDeletedCallback 黑名单列表删除用户的回调 OnConversationChangedCallback 某些会话的关键信息发生变化 OnFriendApplicationListAddedCallback 好友请求数量增加的回调 OnFriendApplicationListDeletedCallback 好友请求数量减少的回调 OnFriendApplicationListReadCallback 好友请求已读的回调 OnFriendInfoChangedCallback 好友信息改变的回调 OnFriendListAddedCallback 好友列表增加人员的回调 OnFriendListDeletedCallback 好友列表减少人员的回调 OnGrantAdministratorCallback 指定管理员身份 OnGroupAttributeChangedCallback 收到群属性更新的回调 OnGroupCreatedCallback 创建群（主要用于多端同步） OnGroupDismissedCallback 群被解散了（全员能收到） OnGroupInfoChangedCallback 群信息被修改（全员能收到） OnGroupRecycledCallback 群被回收（全员能收到） OnInvitationCancelledCallback 邀请被取消的回调 OnInvitationTimeoutCallback 邀请超时的回调 OnInviteeAcceptedCallback 邀请被接受的回调 OnInviteeRejectedCallback 邀请被拒绝的回调 OnMemberEnterCallback 有用户加入群（全员能够收到） OnMemberInfoChangedCallback 群成员信息被修改，仅支持禁言通知（全员能收到） OnMemberInvitedCallback 某些人被拉入某群（全员能够收到） OnMemberKickedCallback 某些人被踢出某群（全员能够收到） OnMemberLeaveCallback 有用户离开群（全员能够收到） OnNewConversation 有新的会话 OnQuitFromGroupCallback 主动退出群组（主要用于多端同步，直播群（AVChatRoom）不支持） OnReceiveJoinApplicationCallback 有新的加群请求（只有群主或管理员会收到） OnReceiveNewInvitationCallback 获取新的邀请的回调 OnReceiveRESTCustomDataCallback 收到 RESTAPI 下发的自定义系统消息 OnRecvC2CReadReceiptCallback C2C 对端用户会话已读通知 OnRecvMessageModified 消息内容被修改 OnRecvMessageReadReceipts 消息已读回执通知 OnRecvMessageRevokedCallback 收到消息撤回的通知 OnRecvNewMessageCallback 收到新消息 OnRevokeAdministratorCallback 取消管理员身份 OnSendMessageProgressCallback 文件上传进度回调 OnTotalUnreadMessageCountChanged 会话未读总数变更通知 OnUserStatusChanged 用户状态变更通知 V2TimUserFullInfoCallback 登录用户的资料发生了更新更新 "},"api/callbacks/voidcallback.html":{"url":"api/callbacks/voidcallback.html","title":"VoidCallback","summary":"无返回参数的回调函数","keywords":"","body":"VoidCallback 回调函数功能描述 无返回参数的回调函数 回调函数模版 VoidCallback = void Function() 回调函数参数说明 此回调函数无返回值 代码示例 // 1. 从即时通信 IM 控制台获取应用 SDKAppID。 int sdkAppID = 0; // 2. 添加 V2TimSDKListener 的事件监听器，sdkListener 是 V2TimSDKListener 的实现类 V2TimSDKListener sdkListener = V2TimSDKListener( onConnectSuccess: () { // SDK 已经成功连接到腾讯云服务器 }, onConnecting: () { // SDK 正在连接到腾讯云服务器 }, onKickedOffline: () { // 当前用户被踢下线，此时可以 UI 提示用户，并再次调用 V2TIMManager 的 login() 函数重新登录。 }, onUserSigExpired: () { // 在线时票据过期：此时您需要生成新的 userSig 并再次调用 V2TIMManager 的 login() 函数重新登录。 }, ); // 3.初始化SDK TencentImSDKPlugin.v2TIMManager.initSDK( sdkAppID: sdkAppID, // SDKAppID loglevel: LogLevelEnum.V2TIM_LOG_ALL, // 日志登记等级 listener: sdkListener, // 事件监听器 ); "},"api/callbacks/errorcallback.html":{"url":"api/callbacks/errorcallback.html","title":"ErrorCallback","summary":"请求失败的回调函数","keywords":"","body":"ErrorCallback 回调函数功能描述 请求失败的回调函数 回调函数模版 ErrorCallback = void Function( int code, String error ) 回调函数参数说明 参数名称 参数类型 参数描述 code int 请求结果错误码 error String 请求结果错误描述 代码示例 // 1. 从即时通信 IM 控制台获取应用 SDKAppID。 int sdkAppID = 0; // 2. 添加 V2TimSDKListener 的事件监听器，sdkListener 是 V2TimSDKListener 的实现类 V2TimSDKListener sdkListener = V2TimSDKListener( onConnectFailed: (code, error) { print(code);//请求结果错误码 print(error);//请求结果错误描述 },// 连接失败的回调函数 ); // 3.初始化 TencentImSDKPlugin.v2TIMManager.initSDK( sdkAppID: sdkAppID, loglevel: LogLevelEnum.V2TIM_LOG_ALL,// 日志登记等级 listener: sdkListener, ); "},"api/callbacks/onapplicationprocessedcallback.html":{"url":"api/callbacks/onapplicationprocessedcallback.html","title":"OnApplicationProcessedCallback","summary":"加群请求已经被群主或管理员处理了（只有申请人能够收到）","keywords":"","body":"OnApplicationProcessedCallback 回调函数功能描述 加群请求已经被群主或管理员处理了（只有申请人能够收到） 回调函数模版 OnApplicationProcessedCallback = void Function( String groupID, V2TimGroupMemberInfo opUser, bool isAgreeJoin, String opReason ) 回调函数参数说明 参数名称 参数类型 参数描述 groupID String 群 ID opUser V2TimGroupMemberInfo 处理人 isAgreeJoin bool 是否同意加群 opReason String 处理原因 代码示例 //设置群组监听器 V2TimGroupListener listener = V2TimGroupListener( onApplicationProcessed: (String groupID, V2TimGroupMemberInfo opUser, bool isAgreeJoin, String opReason) async { //加群请求已经被群主或管理员处理了（只有申请人能够收到） //groupID 群 ID //opUser 处理人 //isAgreeJoin 是否同意加群 //opReason 处理原因 }, ); //添加群组监听器 TencentImSDKPlugin.v2TIMManager.addGroupListener(listener: listener); "},"api/callbacks/onblacklistaddcallback.html":{"url":"api/callbacks/onblacklistaddcallback.html","title":"OnBlackListAddCallback","summary":"黑名单列表新增用户的回调","keywords":"","body":"OnBlackListAddCallback 回调函数功能描述 黑名单列表新增用户的回调 回调函数模版 OnBlackListAddCallback = void Function( List infoList ) 回调函数参数说明 参数名称 参数类型 参数描述 infoList ListV2TimFriendInfo > 新增的用户信息列表 代码示例 //设置关系链监听器 V2TimFriendshipListener listener = V2TimFriendshipListener( onBlackListAdd: (List infoList) async { //黑名单列表新增用户的回调 //infoList 新增的用户信息列表 } ); TencentImSDKPlugin.v2TIMManager .getFriendshipManager() .addFriendListener(listener: listener); //添加关系链监听器 "},"api/callbacks/onblacklistdeletedcallback.html":{"url":"api/callbacks/onblacklistdeletedcallback.html","title":"OnBlackListDeletedCallback","summary":"黑名单列表删除用户的回调","keywords":"","body":"OnBlackListDeletedCallback 回调函数功能描述 黑名单列表删除用户的回调 回调函数模版 OnBlackListDeletedCallback = void Function( List userList ) 回调函数参数说明 参数名称 参数类型 参数描述 userList List 被删除的用户id列表 代码示例 //设置关系链监听器 V2TimFriendshipListener listener = V2TimFriendshipListener( onBlackListDeleted: (List userList) async { //黑名单列表删除的回调 //userList 被删除的用户id列表 } ); TencentImSDKPlugin.v2TIMManager .getFriendshipManager() .addFriendListener(listener: listener); //添加关系链监听器 "},"api/callbacks/onconversationchangedcallback.html":{"url":"api/callbacks/onconversationchangedcallback.html","title":"OnConversationChangedCallback","summary":"某些会话的关键信息发生变化","keywords":"","body":"OnConversationChangedCallback 回调函数功能描述 某些会话的关键信息发生变化 未读计数发生变化、最后一条消息被更新等等，可以根据会话的 lastMessage 的 timestamp 重新对会话列表做排序 回调函数模版 OnConversationChangedCallback = void Function( List conversationList ) 回调函数参数说明 参数名称 参数类型 参数描述 conversationList ListV2TimConversation > 改变的会话列表 代码示例 //设置会话监听器 V2TimConversationListener listener = V2TimConversationListener( onConversationChanged: (List conversationList) => { //某些会话的关键信息发生变化未读计数发生变化、最后一条消息被更新等等），可以根据会话的 lastMessage -> timestamp 重新对会话列表做排序 //conversationList 改变的会话列表 } ); //添加会话监听器 TencentImSDKPlugin.v2TIMManager .getConversationManager() .addConversationListener(listener: listener); //需要新增的会话监听器 "},"api/callbacks/onfriendapplicationlistaddedcallback.html":{"url":"api/callbacks/onfriendapplicationlistaddedcallback.html","title":"OnFriendApplicationListAddedCallback","summary":"好友请求数量增加的回调","keywords":"","body":"OnFriendApplicationListAddedCallback 回调函数功能描述 好友请求数量增加的回调 回调函数模版 OnFriendApplicationListAddedCallback = void Function( List applicationList ) 回调函数参数说明 参数名称 参数类型 参数描述 applicationList ListV2TimFriendApplication > 新增的好友请求信息列表 代码示例 //设置关系链监听器 V2TimFriendshipListener listener = V2TimFriendshipListener( onFriendApplicationListAdded: (List applicationList) async { //好友请求数量增加的回调 //applicationList 新增的好友请求信息列表 } ); TencentImSDKPlugin.v2TIMManager .getFriendshipManager() .addFriendListener(listener: listener); //添加关系链监听器 "},"api/callbacks/onfriendapplicationlistdeletedcallback.html":{"url":"api/callbacks/onfriendapplicationlistdeletedcallback.html","title":"OnFriendApplicationListDeletedCallback","summary":"好友请求数量减少的回调","keywords":"","body":"OnFriendApplicationListDeletedCallback 回调函数功能描述 好友请求数量减少的回调 回调函数模版 OnFriendApplicationListDeletedCallback = void Function( List userIDList ) 回调函数参数说明 参数名称 参数类型 参数描述 userIDList List 减少的好友请求的请求用户id列表 代码示例 //设置关系链监听器 V2TimFriendshipListener listener = V2TimFriendshipListener( onFriendApplicationListDeleted: (List userIDList) async { //好友请求数量减少的回调 //减少的好友请求的请求用户id列表 } ); TencentImSDKPlugin.v2TIMManager .getFriendshipManager() .addFriendListener(listener: listener); //添加关系链监听器 "},"api/callbacks/onfriendapplicationlistreadcallback.html":{"url":"api/callbacks/onfriendapplicationlistreadcallback.html","title":"OnFriendApplicationListReadCallback","summary":"好友请求已读的回调","keywords":"","body":"OnFriendApplicationListReadCallback 回调函数功能描述 好友请求已读的回调 回调函数模版 OnFriendApplicationListReadCallback = void Function() 回调函数参数说明 该回调函数无参数 代码示例 //设置关系链监听器 V2TimFriendshipListener listener = V2TimFriendshipListener( onFriendApplicationListRead: () async { //好友请求已读的回调 } ); TencentImSDKPlugin.v2TIMManager .getFriendshipManager() .addFriendListener(listener: listener); //添加关系链监听器 "},"api/callbacks/onfriendinfochangedcallback.html":{"url":"api/callbacks/onfriendinfochangedcallback.html","title":"OnFriendInfoChangedCallback","summary":"好友信息改变的回调","keywords":"","body":"OnFriendInfoChangedCallback 回调函数功能描述 好友信息改变的回调 回调函数模版 OnFriendInfoChangedCallback = void Function( List infoList ) 回调函数参数说明 参数名称 参数类型 参数描述 infoList ListV2TimFriendInfo > 好友信息改变的好友列表 代码示例 //设置关系链监听器 V2TimFriendshipListener listener = V2TimFriendshipListener( onFriendInfoChanged: (List infoList) async { //好友信息改变的回调 //infoList 好友信息改变的好友列表 } ); TencentImSDKPlugin.v2TIMManager .getFriendshipManager() .addFriendListener(listener: listener); //添加关系链监听器 "},"api/callbacks/onfriendlistaddedcallback.html":{"url":"api/callbacks/onfriendlistaddedcallback.html","title":"OnFriendListAddedCallback","summary":"好友列表增加人员的回调","keywords":"","body":"OnFriendListAddedCallback 回调函数功能描述 好友列表增加人员的回调 回调函数模版 OnFriendListAddedCallback = void Function( List users ) 回调函数参数说明 参数名称 参数类型 参数描述 users ListV2TimFriendInfo > 新增的好友信息列表 代码示例 //设置关系链监听器 V2TimFriendshipListener listener = V2TimFriendshipListener( onFriendListAdded: (List users) async { //好友列表增加人员的回调 //users 新增的好友信息列表 } ); TencentImSDKPlugin.v2TIMManager .getFriendshipManager() .addFriendListener(listener: listener); //添加关系链监听器 "},"api/callbacks/onfriendlistdeletedcallback.html":{"url":"api/callbacks/onfriendlistdeletedcallback.html","title":"OnFriendListDeletedCallback","summary":"好友列表减少人员的回调","keywords":"","body":"OnFriendListDeletedCallback 回调函数功能描述 好友列表减少人员的回调 回调函数模版 OnFriendListDeletedCallback = void Function( List userList ) 回调函数参数说明 参数名称 参数类型 参数描述 userList List 减少的好友id列表 代码示例 //设置关系链监听器 V2TimFriendshipListener listener = V2TimFriendshipListener( onFriendListDeleted: (List userList) async { //好友列表减少人员的回调 //userList 减少的好友id列表 } ); TencentImSDKPlugin.v2TIMManager .getFriendshipManager() .addFriendListener(listener: listener); //添加关系链监听器 "},"api/callbacks/ongrantadministratorcallback.html":{"url":"api/callbacks/ongrantadministratorcallback.html","title":"OnGrantAdministratorCallback","summary":"指定管理员身份","keywords":"","body":"OnGrantAdministratorCallback 回调函数功能描述 指定管理员身份 回调函数模版 OnGrantAdministratorCallback = void Function( String groupID, V2TimGroupMemberInfo opUser, List memberList ) 回调函数参数说明 参数名称 参数类型 参数描述 groupID String 群 ID opUser V2TimGroupMemberInfo 处理人 memberList ListV2TimGroupMemberInfo > 被处理的群成员 代码示例 //设置群组监听器 V2TimGroupListener listener = V2TimGroupListener( onGrantAdministrator: (String groupID, V2TimGroupMemberInfo opUser, List memberList) async { //指定管理员身份 //groupID 群 ID //opUser 处理人 //memberList 被处理的群成员 } ); //添加群组监听器 TencentImSDKPlugin.v2TIMManager.addGroupListener(listener: listener); "},"api/callbacks/ongroupattributechangedcallback.html":{"url":"api/callbacks/ongroupattributechangedcallback.html","title":"OnGroupAttributeChangedCallback","summary":"收到群属性更新的回调","keywords":"","body":"OnGroupAttributeChangedCallback 回调函数功能描述 收到群属性更新的回调 回调函数模版 OnGroupAttributeChangedCallback = void Function( String groupID, Map groupAttributeMap ) 回调函数参数说明 参数名称 参数类型 参数描述 groupID String 群 ID groupAttributeMap Map 群的所有属性 代码示例 //设置群组监听器 V2TimGroupListener listener = V2TimGroupListener( onGroupAttributeChanged: (String groupID, Map groupAttributeMap) async { //收到群属性更新的回调 //groupID 群 ID //groupAttributeMap 群的所有属性 } ); //添加群组监听器 TencentImSDKPlugin.v2TIMManager.addGroupListener(listener: listener); "},"api/callbacks/ongroupcreatedcallback.html":{"url":"api/callbacks/ongroupcreatedcallback.html","title":"OnGroupCreatedCallback","summary":"创建群（主要用于多端同步）","keywords":"","body":"OnGroupCreatedCallback 回调函数功能描述 创建群（主要用于多端同步） 回调函数模版 OnGroupCreatedCallback = void Function( String groupID ) 回调函数参数说明 参数名称 参数类型 参数描述 groupID String 群 ID 代码示例 //设置群组监听器 V2TimGroupListener listener = V2TimGroupListener( onGroupCreated: (String groupID) async { //创建群（主要用于多端同步） //groupID 群 ID } ); //添加群组监听器 TencentImSDKPlugin.v2TIMManager.addGroupListener(listener: listener); "},"api/callbacks/ongroupdismissedcallback.html":{"url":"api/callbacks/ongroupdismissedcallback.html","title":"OnGroupDismissedCallback","summary":"群被解散了（全员能收到）","keywords":"","body":"OnGroupDismissedCallback 回调函数功能描述 群被解散了（全员能收到） 回调函数模版 OnGroupDismissedCallback = void Function( String groupID, V2TimGroupMemberInfo opUser ) 回调函数参数说明 参数名称 参数类型 参数描述 groupID String 群 ID opUser V2TimGroupMemberInfo 处理人 代码示例 //设置群组监听器 V2TimGroupListener listener = V2TimGroupListener( onGroupDismissed: (String groupID, V2TimGroupMemberInfo opUser) async { //群被解散了（全员能收到） //groupID 群 ID //opUser 处理人 } ); //添加群组监听器 TencentImSDKPlugin.v2TIMManager.addGroupListener(listener: listener); "},"api/callbacks/ongroupinfochangedcallback.html":{"url":"api/callbacks/ongroupinfochangedcallback.html","title":"OnGroupInfoChangedCallback","summary":"群信息被修改（全员能收到）","keywords":"","body":"OnGroupInfoChangedCallback 回调函数功能描述 群信息被修改（全员能收到） 回调函数模版 OnGroupInfoChangedCallback = void Function( String groupID, List changeInfos ) 回调函数参数说明 参数名称 参数类型 参数描述 groupID String 群 ID changeInfos ListV2TimGroupChangeInfo > 修改的群信息 代码示例 //设置群组监听器 V2TimGroupListener listener = V2TimGroupListener( onGroupInfoChanged: (String groupID, List changeInfos) async { //群成员信息被修改，仅支持禁言通知（全员能收到）。 //groupID 群 ID //changeInfos 修改的群信息 } ); //添加群组监听器 TencentImSDKPlugin.v2TIMManager.addGroupListener(listener: listener); "},"api/callbacks/ongrouprecycledcallback.html":{"url":"api/callbacks/ongrouprecycledcallback.html","title":"OnGroupRecycledCallback","summary":"群被回收（全员能收到）","keywords":"","body":"OnGroupRecycledCallback 回调函数功能描述 群被回收（全员能收到） 回调函数模版 OnGroupRecycledCallback = void Function( String groupID, V2TimGroupMemberInfo opUser ) 回调函数参数说明 参数名称 参数类型 参数描述 groupID String 群 ID opUser V2TimGroupMemberInfo 处理人 代码示例 //设置群组监听器 V2TimGroupListener listener = V2TimGroupListener( onGroupRecycled: (String groupID, V2TimGroupMemberInfo opUser) async { //群被回收（全员能收到） //groupID 群 ID //opUser 处理人 } ); //添加群组监听器 TencentImSDKPlugin.v2TIMManager.addGroupListener(listener: listener); "},"api/callbacks/oninvitationcancelledcallback.html":{"url":"api/callbacks/oninvitationcancelledcallback.html","title":"OnInvitationCancelledCallback","summary":"邀请被取消的回调","keywords":"","body":"OnInvitationCancelledCallback 回调函数功能描述 邀请被取消的回调 回调函数模版 OnInvitationCancelledCallback = void Function( String inviteID, String inviter, String data ) 回调函数参数说明 参数名称 参数类型 参数描述 inviteID String 邀请消息信令id inviter String 邀请人id data String 邀请被取消时的自定义data 代码示例 //设置信令监听器 V2TimSignalingListener listener = V2TimSignalingListener( onInvitationCancelled: (String inviteID, String inviter, String data) async { //邀请被取消的回调 //inviteID 邀请消息信令id //inviter 邀请人id //data 邀请被取消时的自定义data } ); TencentImSDKPlugin.v2TIMManager .getSignalingManager() .addSignalingListener(listener: listener); //添加信令监听器 "},"api/callbacks/oninvitationtimeoutcallback.html":{"url":"api/callbacks/oninvitationtimeoutcallback.html","title":"OnInvitationTimeoutCallback","summary":"邀请超时的回调","keywords":"","body":"OnInvitationTimeoutCallback 回调函数功能描述 邀请超时的回调 回调函数模版 OnInvitationTimeoutCallback = void Function( String inviteID, List inviteeList ) 回调函数参数说明 参数名称 参数类型 参数描述 inviteID String 邀请消息信令id inviteeList List 被邀请人的id列表 代码示例 //设置信令监听器 V2TimSignalingListener listener = V2TimSignalingListener( onInvitationTimeout: (String inviteID, List inviteeList) async { //邀请超时的回调 //inviteID 邀请消息信令id //inviteeList 被邀请人的列表 } ); TencentImSDKPlugin.v2TIMManager .getSignalingManager() .addSignalingListener(listener: listener); //添加信令监听器 "},"api/callbacks/oninviteeacceptedcallback.html":{"url":"api/callbacks/oninviteeacceptedcallback.html","title":"OnInviteeAcceptedCallback","summary":"邀请被接受的回调","keywords":"","body":"OnInviteeAcceptedCallback 回调函数功能描述 邀请被接受的回调 回调函数模版 OnInviteeAcceptedCallback = void Function( String inviteID, String invitee, String data ) 回调函数参数说明 参数名称 参数类型 参数描述 inviteID String 邀请消息信令id invitee String 被邀请人id data String 接受邀请时的自定义data 代码示例 //设置信令监听器 V2TimSignalingListener listener = V2TimSignalingListener( onInviteeAccepted: (String inviteID, String invitee, String data) async { //邀请被接受的回调 //inviteID 邀请消息信令id //invitee 被邀请人id //data 接受邀请时的自定义data } ); TencentImSDKPlugin.v2TIMManager .getSignalingManager() .addSignalingListener(listener: listener); //添加信令监听器 "},"api/callbacks/oninviteerejectedcallback.html":{"url":"api/callbacks/oninviteerejectedcallback.html","title":"OnInviteeRejectedCallback","summary":"邀请被拒绝的回调","keywords":"","body":"OnInviteeRejectedCallback 回调函数功能描述 邀请被拒绝的回调 回调函数模版 OnInviteeRejectedCallback = void Function( String inviteID, String invitee, String data ) 回调函数参数说明 参数名称 参数类型 参数描述 inviteID String 邀请消息信令id invitee String 被邀请人id data String 拒绝邀请时的自定义data 代码示例 //设置信令监听器 V2TimSignalingListener listener = V2TimSignalingListener( onInviteeRejected: (String inviteID, String invitee, String data) async { //邀请被拒绝的回调 //inviteID 邀请消息信令id //invitee 被邀请人id //data 拒绝邀请时的自定义data } ); TencentImSDKPlugin.v2TIMManager .getSignalingManager() .addSignalingListener(listener: listener); //添加信令监听器 "},"api/callbacks/onmemberentercallback.html":{"url":"api/callbacks/onmemberentercallback.html","title":"OnMemberEnterCallback","summary":"有用户加入群（全员能够收到）","keywords":"","body":"OnMemberEnterCallback 回调函数功能描述 有用户加入群（全员能够收到） 回调函数模版 OnMemberEnterCallback = void Function( String groupID, List memberList ) 回调函数参数说明 参数名称 参数类型 参数描述 groupID String 群 ID memberList ListV2TimGroupMemberInfo > 加入的成员 代码示例 //设置群组监听器 V2TimGroupListener listener = V2TimGroupListener( onMemberEnter: (String groupID, List memberList) async { //有用户加入群（全员能够收到） //groupID 群 ID //memberList 加入的成员 } ); //添加群组监听器 TencentImSDKPlugin.v2TIMManager.addGroupListener(listener: listener); "},"api/callbacks/onmemberinfochangedcallback.html":{"url":"api/callbacks/onmemberinfochangedcallback.html","title":"OnMemberInfoChangedCallback","summary":"群成员信息被修改，仅支持禁言通知（全员能收到）","keywords":"","body":"OnMemberInfoChangedCallback 回调函数功能描述 群成员信息被修改，仅支持禁言通知（全员能收到） 回调函数模版 OnMemberInfoChangedCallback = void Function( String groupID, List v2TIMGroupMemberChangeInfoList ) 回调函数参数说明 参数名称 参数类型 参数描述 groupID String 群 ID v2TIMGroupMemberChangeInfoList ListV2TimGroupMemberChangeInfo > 被修改的群成员信息 代码示例 //设置群组监听器 V2TimGroupListener listener = V2TimGroupListener( onMemberInfoChanged: (String groupID, List v2TIMGroupMemberChangeInfoList) async { //群成员信息被修改，仅支持禁言通知（全员能收到）。 //groupID 群 ID //v2TIMGroupMemberChangeInfoList 被修改的群成员信息 } ); //添加群组监听器 TencentImSDKPlugin.v2TIMManager.addGroupListener(listener: listener); "},"api/callbacks/onmemberinvitedcallback.html":{"url":"api/callbacks/onmemberinvitedcallback.html","title":"OnMemberInvitedCallback","summary":"些人被拉入某群（全员能够收到）","keywords":"","body":"OnMemberInvitedCallback 回调函数功能描述 些人被拉入某群（全员能够收到） 回调函数模版 OnMemberInvitedCallback = void Function( String groupID, V2TimGroupMemberInfo opUser, List memberList ) 回调函数参数说明 参数名称 参数类型 参数描述 groupID String 群 ID opUser V2TimGroupMemberInfo 处理人 memberList ListV2TimGroupMemberInfo > 被拉进群成员 代码示例 //设置群组监听器 V2TimGroupListener listener = V2TimGroupListener( onMemberInvited: (String groupID, V2TimGroupMemberInfo opUser, List memberList) async { //某些人被拉入某群（全员能够收到） //groupID 群 ID //opUser 处理人 //memberList 被拉进群成员 } ); //添加群组监听器 TencentImSDKPlugin.v2TIMManager.addGroupListener(listener: listener); "},"api/callbacks/onmemberkickedcallback.html":{"url":"api/callbacks/onmemberkickedcallback.html","title":"OnMemberKickedCallback","summary":"某些人被踢出某群（全员能够收到）","keywords":"","body":"OnMemberKickedCallback 回调函数功能描述 某些人被踢出某群（全员能够收到） 回调函数模版 OnMemberInvitedCallback = void Function( String groupID, V2TimGroupMemberInfo opUser, List memberList ) 回调函数参数说明 参数名称 参数类型 参数描述 groupID String 群 ID opUser V2TimGroupMemberInfo 处理人 memberList ListV2TimGroupMemberInfo > 被踢成员 代码示例 //设置群组监听器 V2TimGroupListener listener = V2TimGroupListener( onMemberKicked: (String groupID, V2TimGroupMemberInfo opUser, List memberList) async { //某些人被踢出某群（全员能够收到） //groupID 群 ID //opUser 处理人 //memberList 被踢成员 } ); //添加群组监听器 TencentImSDKPlugin.v2TIMManager.addGroupListener(listener: listener); "},"api/callbacks/onmemberleavecallback.html":{"url":"api/callbacks/onmemberleavecallback.html","title":"OnMemberLeaveCallback","summary":"有用户离开群（全员能够收到）","keywords":"","body":"OnMemberLeaveCallback 回调函数功能描述 有用户离开群（全员能够收到） 回调函数模版 OnMemberLeaveCallback = void Function( String groupID, V2TimGroupMemberInfo member ) 回调函数参数说明 参数名称 参数类型 参数描述 groupID String 群 ID member V2TimGroupMemberInfo 离开的成员 代码示例 //设置群组监听器 V2TimGroupListener listener = V2TimGroupListener( onMemberLeave: (String groupID, V2TimGroupMemberInfo member) async { //有用户离开群（全员能够收到） //groupID 群 ID //member 离开的成员 } ); //添加群组监听器 TencentImSDKPlugin.v2TIMManager.addGroupListener(listener: listener); "},"api/callbacks/onnewconversation.html":{"url":"api/callbacks/onnewconversation.html","title":"OnNewConversation","summary":"有新的会话","keywords":"","body":"OnNewConversation 回调函数功能描述 有新的会话 比如收到一个新同事发来的单聊消息、或者被拉入了一个新的群组中，可以根据会话的 lastMessage的 timestamp 重新对会话列表做排序 回调函数模版 OnNewConversation = void Function( List conversationList ) 回调函数参数说明 参数名称 参数类型 参数描述 conversationList ListV2TimConversation > 新的会话列表 代码示例 //设置群组监听器 V2TimGroupListener listener = V2TimGroupListener( onNewConversation: (List conversationList) => { //有新的会话（比如收到一个新同事发来的单聊消息、或者被拉入了一个新的群组中），可以根据会话的 lastMessage -> timestamp 重新对会话列表做排序 //conversationList 新的会话列表 } ); //添加群组监听器 TencentImSDKPlugin.v2TIMManager.addGroupListener(listener: listener); "},"api/callbacks/onquitfromgroupcallback.html":{"url":"api/callbacks/onquitfromgroupcallback.html","title":"OnQuitFromGroupCallback","summary":"主动退出群组（主要用于多端同步，直播群（AVChatRoom）不支持）","keywords":"","body":"OnQuitFromGroupCallback 回调函数功能描述 主动退出群组（主要用于多端同步，直播群（AVChatRoom）不支持） 回调函数模版 OnQuitFromGroupCallback = void Function( String groupID ) 回调函数参数说明 参数名称 参数类型 参数描述 groupID String 群 ID 代码示例 //设置群组监听器 V2TimGroupListener listener = V2TimGroupListener( onQuitFromGroup: (String groupID) async { //主动退出群组（主要用于多端同步，直播群（AVChatRoom）不支持） //groupID 群 ID } ); //添加群组监听器 TencentImSDKPlugin.v2TIMManager.addGroupListener(listener: listener); "},"api/callbacks/onreceivejoinapplicationcallback.html":{"url":"api/callbacks/onreceivejoinapplicationcallback.html","title":"OnReceiveJoinApplicationCallback","summary":"有新的加群请求（只有群主或管理员会收到）","keywords":"","body":"OnReceiveJoinApplicationCallback 回调函数功能描述 有新的加群请求（只有群主或管理员会收到） 回调函数模版 OnReceiveJoinApplicationCallback = void Function( String groupID, V2TimGroupMemberInfo member, String opReason ) 回调函数参数说明 参数名称 参数类型 参数描述 groupID String 群 ID member V2TimGroupMemberInfo 申请人 opReason String 申请原因 代码示例 //设置群组监听器 V2TimGroupListener listener = V2TimGroupListener( onReceiveJoinApplication: (String groupID, V2TimGroupMemberInfo member, String opReason) async { //有新的加群请求（只有群主或管理员会收到） //groupID 群 ID //member 申请人 //opReason 申请原因 } ); //添加群组监听器 TencentImSDKPlugin.v2TIMManager.addGroupListener(listener: listener); "},"api/callbacks/onreceivenewinvitationcallback.html":{"url":"api/callbacks/onreceivenewinvitationcallback.html","title":"OnReceiveNewInvitationCallback","summary":"获取新的邀请的回调","keywords":"","body":"OnReceiveNewInvitationCallback 回调函数功能描述 获取新的邀请的回调 回调函数模版 OnReceiveNewInvitationCallback = void Function( String inviteID, String inviter, String groupID, List inviteeList, String data ) 回调函数参数说明 参数名称 参数类型 参数描述 inviteID String 邀请消息信令id inviter String 邀请人id groupID String 发出邀请的群组id inviteeList List 被邀请人的列表 data String 邀请时的自定义data 代码示例 //设置群组监听器 V2TimGroupListener listener = V2TimGroupListener( onReceiveNewInvitation: (String inviteID, String inviter, String groupID, List inviteeList, String data) async { //获取新的邀请的回调 //inviteID 邀请消息信令id //inviter 邀请人id //groupID 发出邀请的群组id //inviteeList 被邀请人的列表 //data 邀请时的自定义data } ); //添加群组监听器 TencentImSDKPlugin.v2TIMManager.addGroupListener(listener: listener); "},"api/callbacks/onreceiverestcustomdatacallback.html":{"url":"api/callbacks/onreceiverestcustomdatacallback.html","title":"OnReceiveRESTCustomDataCallback","summary":"收到 RESTAPI 下发的自定义系统消息","keywords":"","body":"OnReceiveRESTCustomDataCallback 回调函数功能描述 有新的加群请求（只有群主或管理员会收到） 回调函数模版 OnReceiveRESTCustomDataCallback = void Function( String groupID, String customData ) 回调函数参数说明 参数名称 参数类型 参数描述 groupID String 群 ID customData String 自定义数据 代码示例 //设置群组监听器 V2TimGroupListener listener = V2TimGroupListener( onReceiveRESTCustomData: (String groupID, String customData) async { //收到 RESTAPI 下发的自定义系统消息 //groupID 群 ID //customData 自定义数据 } ); //添加群组监听器 TencentImSDKPlugin.v2TIMManager.addGroupListener(listener: listener); "},"api/callbacks/onrecvc2creadreceiptcallback.html":{"url":"api/callbacks/onrecvc2creadreceiptcallback.html","title":"OnRecvC2CReadReceiptCallback","summary":"C2C 对端用户会话已读通知","keywords":"","body":"OnRecvC2CReadReceiptCallback 回调函数功能描述 C2C 对端用户会话已读通知 如果对端用户调用 markC2CMessageAsRead 接口，自己会收到该回调 回调函数模版 OnRecvC2CReadReceiptCallback = void Function( List receiptList ) 回调函数参数说明 参数名称 参数类型 参数描述 receiptList ListV2TimMessageReceipt > 消息已读列表 代码示例 //创建消息监听器 V2TimAdvancedMsgListener listener = V2TimAdvancedMsgListener( onRecvC2CReadReceipt: (List receiptList) { //C2C 对端用户会话已读通知（如果对端用户调用 markC2CMessageAsRead 接口，自己会收到该回调，回调只会携带对端 userID 和对端已读 timestamp 信息） //receiptList 消息已读列表 for (V2TimMessageReceipt element in receiptList) { element.groupID; // 群id element.msgID; // 已读回执消息 ID element.readCount; // 群消息最新已读数 element.unreadCount; // 群消息最新未读数 element.userID; // C2C 消息对方 ID } ); // 添加高级消息的事件监听器 TencentImSDKPlugin.v2TIMManager .getMessageManager() .addAdvancedMsgListener(listener: listener); "},"api/callbacks/onrecvmessagemodified.html":{"url":"api/callbacks/onrecvmessagemodified.html","title":"OnRecvMessageModified","summary":"消息内容被修改","keywords":"","body":"OnRecvMessageModified 回调函数功能描述 消息内容被修改 回调函数模版 OnRecvMessageModified = void Function( V2TimMessage message ) 回调函数参数说明 参数名称 参数类型 参数描述 message V2TimMessage 被修改之后的消息对象 代码示例 //设置会话监听器 V2TimGroupListener listener = V2TimGroupListener( onRecvMessageModified: (V2TimMessage message) { // 消息内容被修改 // message 为被修改之后的消息对象 }, ); //添加会话监听器 TencentImSDKPlugin.v2TIMManager.addGroupListener(listener: listener); "},"api/callbacks/onrecvmessagereadreceipts.html":{"url":"api/callbacks/onrecvmessagereadreceipts.html","title":"OnRecvMessageReadReceipts","summary":"消息已读回执通","keywords":"","body":"OnRecvMessageReadReceipts 回调函数功能描述 消息已读回执通 如果自己发送的消息支持已读回执，消息接收端调用 sendMessageReadReceipts，自己会收到该通知 回调函数模版 OnRecvMessageReadReceipts = void Function( List receiptList ) 回调函数参数说明 参数名称 参数类型 参数描述 message ListV2TimMessageReceipt > 消息已读列表 代码示例 //设置会话监听器 V2TimGroupListener listener = V2TimGroupListener( onRecvMessageReadReceipts: (List receiptList) { //消息已读回执通知（如果自己发送的消息支持已读回执，消息接收端调用 sendMessageReadReceipts，自己会收到该通知） //receiptList 消息已读列表 for (V2TimMessageReceipt element in receiptList) { element.groupID; // 群id element.msgID; // 已读回执消息 ID element.readCount; // 群消息最新已读数 element.unreadCount; // 群消息最新未读数 element.userID; // C2C 消息对方 ID } }, ); //添加会话监听器 TencentImSDKPlugin.v2TIMManager.addGroupListener(listener: listener); "},"api/callbacks/onrecvmessagerevokedcallback.html":{"url":"api/callbacks/onrecvmessagerevokedcallback.html","title":"OnRecvMessageRevokedCallback","summary":"收到消息撤回的通知","keywords":"","body":"OnRecvMessageRevokedCallback 回调函数功能描述 收到消息撤回的通知 回调函数模版 OnRecvMessageRevokedCallback = void Function( String messageid ) 回调函数参数说明 参数名称 参数类型 参数描述 messageid String 撤回消息的id 代码示例 //设置会话监听器 V2TimGroupListener listener = V2TimGroupListener( onRecvMessageRevoked: (String messageid) { // 收到消息撤回的通知 // messageid 撤回消息的id }, ); //添加会话监听器 TencentImSDKPlugin.v2TIMManager.addGroupListener(listener: listener); "},"api/callbacks/onrecvnewmessagecallback.html":{"url":"api/callbacks/onrecvnewmessagecallback.html","title":"OnRecvNewMessageCallback","summary":"收到新消息","keywords":"","body":"OnRecvNewMessageCallback 回调函数功能描述 收到新消息 回调函数模版 OnRecvNewMessageCallback = void Function( V2TimMessage message ) 回调函数参数说明 参数名称 参数类型 参数描述 message V2TimMessage 收到的新消息 代码示例 //设置会话监听器 V2TimGroupListener listener = V2TimGroupListener( onRecvNewMessage: (V2TimMessage message) async { // 收到新消息 // 处理文本消息 if (message.elemType == MessageElemType.V2TIM_ELEM_TYPE_TEXT) { message.textElem?.text; } // 使用自定义消息 if (message.elemType == MessageElemType.V2TIM_ELEM_TYPE_CUSTOM) { message.customElem?.data; message.customElem?.desc; message.customElem?.extension; } // 使用图片消息 if (message.elemType == MessageElemType.V2TIM_ELEM_TYPE_IMAGE) { message.imageElem ?.path; // 图片上传时的路径，消息发送者才会有这个字段，消息发送者可用这个字段将图片预先上屏，优化上屏体验。 message.imageElem?.imageList?.forEach((element) { // 遍历大图、原图、缩略图 // 解析图片属性 element?.height; element?.localUrl; element?.size; element?.type; // 大图 缩略图 原图 element?.url; element?.uuid; element?.width; }); } // 处理视频消息 if (message.elemType == MessageElemType.V2TIM_ELEM_TYPE_VIDEO) { // 解析视频消息属性，封面、播放地址、宽高、大小等。 message.videoElem?.UUID; message.videoElem?.duration; message.videoElem?.localSnapshotUrl; message.videoElem?.localVideoUrl; message.videoElem?.snapshotHeight; message.videoElem?.snapshotPath; // ... } // 处理音频消息 if (message.elemType == MessageElemType.V2TIM_ELEM_TYPE_SOUND) { // 解析语音消息 播放地址，本地地址，大小，时长等。 message.soundElem?.UUID; message.soundElem?.dataSize; message.soundElem?.duration; message.soundElem?.localUrl; message.soundElem?.url; // ... } // 处理文件消息 if (message.elemType == MessageElemType.V2TIM_ELEM_TYPE_FILE) { // 解析文件消息 文件名、文件大小、url等 message.fileElem?.UUID; message.fileElem?.fileName; message.fileElem?.fileSize; message.fileElem?.localUrl; message.fileElem?.path; message.fileElem?.url; } // 处理位置消息 if (message.elemType == MessageElemType.V2TIM_ELEM_TYPE_LOCATION) { // 解析地理位置消息，经纬度、描述等 message.locationElem?.desc; message.locationElem?.latitude; message.locationElem?.longitude; } // 处理表情消息 if (message.elemType == MessageElemType.V2TIM_ELEM_TYPE_FACE) { message.faceElem?.data; message.faceElem?.index; } // 处理群组tips文本消息 if (message.elemType == MessageElemType.V2TIM_ELEM_TYPE_GROUP_TIPS) { message.groupTipsElem?.groupID; // 所属群组 message.groupTipsElem?.type; // 群Tips类型 message.groupTipsElem?.opMember; // 操作人资料 message.groupTipsElem?.memberList; // 被操作人资料 message.groupTipsElem?.groupChangeInfoList; // 群信息变更详情 message.groupTipsElem?.memberChangeInfoList; // 群成员变更信息 message.groupTipsElem?.memberCount; // 当前群在线人数 } // 处理合并消息消息 if (message.elemType == MessageElemType.V2TIM_ELEM_TYPE_MERGER) { message.mergerElem?.abstractList; message.mergerElem?.isLayersOverLimit; message.mergerElem?.title; V2TimValueCallback> download = await TencentImSDKPlugin.v2TIMManager .getMessageManager() .downloadMergerMessage( msgID: message.msgID!, ); if (download.code == 0) { List? messageList = download.data; } } if (message.textElem?.nextElem != null) { //通过第一个 Elem 对象的 nextElem 方法获取下一个 Elem 对象，如果下一个 Elem 对象存在，会返回 Elem 对象实例，如果不存在，会返回 null。 } }, ); //添加会话监听器 TencentImSDKPlugin.v2TIMManager.addGroupListener(listener: listener); "},"api/callbacks/onrevokeadministratorcallback.html":{"url":"api/callbacks/onrevokeadministratorcallback.html","title":"OnRevokeAdministratorCallback","summary":"取消管理员身份","keywords":"","body":"OnRevokeAdministratorCallback 回调函数功能描述 取消管理员身份 回调函数模版 OnRevokeAdministratorCallback = void Function( String groupID, V2TimGroupMemberInfo opUser, List memberList ) 回调函数参数说明 参数名称 参数类型 参数描述 groupID String 群 ID opUser V2TimGroupMemberInfo 处理人 memberList ListV2TimGroupMemberInfo > 被处理的群成员 代码示例 //设置群组监听器 V2TimGroupListener listener = V2TimGroupListener( onRevokeAdministrator: (String groupID, V2TimGroupMemberInfo opUser, List memberList) async { //取消管理员身份 //groupID 群 ID //opUser 处理人 //memberList 被处理的群成员 } ); //添加群组监听器 TencentImSDKPlugin.v2TIMManager.addGroupListener(listener: listener); "},"api/callbacks/onsendmessageprogresscallback.html":{"url":"api/callbacks/onsendmessageprogresscallback.html","title":"OnSendMessageProgressCallback","summary":"文件上传进度回调","keywords":"","body":"OnSendMessageProgressCallback 回调函数功能描述 文件上传进度回调 回调函数模版 OnSendMessageProgressCallback = void Function( V2TimMessage message, int progress ) 回调函数参数说明 参数名称 参数类型 参数描述 message V2TimMessage 上传文件的消息属性 progress int 文件上传进度 0-100 代码示例 //设置会话监听器 V2TimGroupListener listener = V2TimGroupListener( onSendMessageProgress: (V2TimMessage message, int progress) { //文件上传进度回调 //message 上传文件的消息属性 //progress文件上传进度 0-100 } ); //添加会话监听器 TencentImSDKPlugin.v2TIMManager.addGroupListener(listener: listener); "},"api/callbacks/ontotalunreadmessagecountchanged.html":{"url":"api/callbacks/ontotalunreadmessagecountchanged.html","title":"OnTotalUnreadMessageCountChanged","summary":"会话未读总数变更通知","keywords":"","body":"OnTotalUnreadMessageCountChanged 回调函数功能描述 会话未读总数变更通知 未读总数会减去设置为免打扰的会话的未读数 回调函数模版 OnTotalUnreadMessageCountChanged = void Function( int totalUnreadCount ) 回调函数参数说明 参数名称 参数类型 参数描述 totalUnreadCount int 会话未读总数 代码示例 //设置群组监听器 V2TimGroupListener listener = V2TimGroupListener( onTotalUnreadMessageCountChanged: (int totalUnreadCount) => { //会话未读总数变更通知，未读总数会减去设置为免打扰的会话的未读数 //totalUnreadCount 会话未读总数 } ); //添加群组监听器 TencentImSDKPlugin.v2TIMManager.addGroupListener(listener: listener); "},"api/callbacks/onuserstatuschanged.html":{"url":"api/callbacks/onuserstatuschanged.html","title":"OnUserStatusChanged","summary":"用户状态变更通知","keywords":"","body":"OnUserStatusChanged 回调函数功能描述 用户状态变更通知 订阅过的用户发生了状态变更（包括在线状态和自定义状态），会触发该回调 在 IM 控制台打开了好友状态通知开关，即使未主动订阅，当好友状态发生变更时，也会触发该回调 同一个账号多设备登录，当其中一台设备修改了自定义状态，所有设备都会收到该回调 回调函数模版 OnUserStatusChanged = void Function( List userStatusList ) 回调函数参数说明 参数名称 参数类型 参数描述 userStatusList ListV2TimUserStatus > 用户状态变化的用户列表 代码示例 // 1. 从即时通信 IM 控制台获取应用 SDKAppID。 int sdkAppID = 0; // 2. 添加 V2TimSDKListener 的事件监听器，sdkListener 是 V2TimSDKListener 的实现类 V2TimSDKListener sdkListener = V2TimSDKListener( onUserStatusChanged: (List userStatusList) { //用户状态变更通知 //userStatusList 用户状态变化的用户列表 //收到通知的情况：订阅过的用户发生了状态变更（包括在线状态和自定义状态），会触发该回调 //在 IM 控制台打开了好友状态通知开关，即使未主动订阅，当好友状态发生变更时，也会触发该回调 //同一个账号多设备登录，当其中一台设备修改了自定义状态，所有设备都会收到该回调 } ); // 3.初始化SDK TencentImSDKPlugin.v2TIMManager.initSDK( sdkAppID: sdkAppID, // SDKAppID loglevel: LogLevelEnum.V2TIM_LOG_ALL, // 日志登记等级 listener: sdkListener, // 事件监听器 ); "},"api/callbacks/v2timuserfullinfocallback.html":{"url":"api/callbacks/v2timuserfullinfocallback.html","title":"V2TimUserFullInfoCallback","summary":"登录用户的资料发生了更新更新","keywords":"","body":"V2TimUserFullInfoCallback 回调函数功能描述 登录用户的资料发生了更新更新 回调函数模版 V2TimUserFullInfoCallback = void Function( V2TimUserFullInfo info ) 回调函数参数说明 参数名称 参数类型 参数描述 info V2TimUserFullInfo 登录用户的资料 代码示例 // 1. 从即时通信 IM 控制台获取应用 SDKAppID。 int sdkAppID = 0; // 2. 添加 V2TimSDKListener 的事件监听器，sdkListener 是 V2TimSDKListener 的实现类 V2TimSDKListener sdkListener = V2TimSDKListener( onSelfInfoUpdated: (V2TimUserFullInfo info) { // 登录用户的资料发生了更新 // info登录用户的资料 } ); // 3.初始化SDK TencentImSDKPlugin.v2TIMManager.initSDK( sdkAppID: sdkAppID, // SDKAppID loglevel: LogLevelEnum.V2TIM_LOG_ALL, // 日志登记等级 listener: sdkListener, // 事件监听器 ); "}}